{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"HASP - Open Hardware edition This project is a re-implementation of the popular HASwitchPlate sketch created by aderusha. The original HASwitchPlate project uses a Wemos D1 mini and requires a Nextion/TJC HMI display. This rewrite removes the Nextion/TJC requirement by using the Lvgl Graphics Library on the MCU to drive a cheap commodity display. This version also adds ESP32 and STM32F4 support to take advantage of the additional hardware capabilities. Demo Screens ~ Features ~ Feature ESP8266 ESP32 STM32F4 SPI display yes yes yes Parallel display no yes yes PWM Screen dimming yes yes yes Maximum Page Count 4 12 12 Object Types / Widgets 14 15 15 Dynamic Objects yes yes yes Theme Support yes yes yes Custom .zi V5 font yes (latin1) yes (latin1) no FontAwesome Icons 1300+ 1300+ no PNG images no tbd tbd Network Wi-Fi Wi-Fi Ethernet Support ~ For support using hasp-lvgl, please join the #hasp-lvgl channel on Discord or use Discussions on Github.","title":"Home"},{"location":"#demo-screens","text":"","title":"Demo Screens"},{"location":"#features","text":"Feature ESP8266 ESP32 STM32F4 SPI display yes yes yes Parallel display no yes yes PWM Screen dimming yes yes yes Maximum Page Count 4 12 12 Object Types / Widgets 14 15 15 Dynamic Objects yes yes yes Theme Support yes yes yes Custom .zi V5 font yes (latin1) yes (latin1) no FontAwesome Icons 1300+ 1300+ no PNG images no tbd tbd Network Wi-Fi Wi-Fi Ethernet","title":"Features"},{"location":"#support","text":"For support using hasp-lvgl, please join the #hasp-lvgl channel on Discord or use Discussions on Github.","title":"Support"},{"location":"ESP32/","text":"Installation Download the firmware ~ Go to the releases page on GitHub to download the latest hasp-lvgl binaries. There are currently 2 download options, pick the one appropriate for your hardware: hasp-lvgl-0.2.0-esp32_ili9341_spi.bin boot files Install the firmware ~ Flash ESP32 ~ When flashing the ESP32 for the first time, you need to install a bootloader, partition scheme and application loader: esptool.py --port \"COM1\" erase_flash esptool.py --port \"COM1\" write_flash 0x1000 bootloader_dio_40m.bin --flash_mode dio --flash_freq 40m esptool.py --port \"COM1\" write_flash 0x8000 partitions.bin esptool.py --port \"COM1\" write_flash 0xe000 boot_app0.bin Change COM1 to the correct port on your computer. then flash the actual firmware: esptool.py -p \"COM1\" --baud 921600 write_flash 0x10000 d1-mini-esp32_ili9341_<version>.bin or all previous steps in one long command line: esptool.py -p \"COM1\" --baud 921600 --before default_reset --after hard_reset write_flash --flash_mode dio --flash_freq 40m --flash_size detect 0x1000 bootloader_dio_40m.bin 0x8000 partitions.bin 0xe000 boot_app0.bin 0x10000 d1-mini-esp32_ili9341_<version>.bin","title":"ESP32 Installation"},{"location":"ESP32/#download-the-firmware","text":"Go to the releases page on GitHub to download the latest hasp-lvgl binaries. There are currently 2 download options, pick the one appropriate for your hardware: hasp-lvgl-0.2.0-esp32_ili9341_spi.bin boot files","title":"Download the firmware"},{"location":"ESP32/#install-the-firmware","text":"","title":"Install the firmware"},{"location":"ESP32/#flash-esp32","text":"When flashing the ESP32 for the first time, you need to install a bootloader, partition scheme and application loader: esptool.py --port \"COM1\" erase_flash esptool.py --port \"COM1\" write_flash 0x1000 bootloader_dio_40m.bin --flash_mode dio --flash_freq 40m esptool.py --port \"COM1\" write_flash 0x8000 partitions.bin esptool.py --port \"COM1\" write_flash 0xe000 boot_app0.bin Change COM1 to the correct port on your computer. then flash the actual firmware: esptool.py -p \"COM1\" --baud 921600 write_flash 0x10000 d1-mini-esp32_ili9341_<version>.bin or all previous steps in one long command line: esptool.py -p \"COM1\" --baud 921600 --before default_reset --after hard_reset write_flash --flash_mode dio --flash_freq 40m --flash_size detect 0x1000 bootloader_dio_40m.bin 0x8000 partitions.bin 0xe000 boot_app0.bin 0x10000 d1-mini-esp32_ili9341_<version>.bin","title":"Flash ESP32"},{"location":"ESP8266/","text":"Installation Download the firmware ~ Go to the releases page on GitHub to download the latest hasp-lvgl binaries. There are currently 2 download options, pick the one appropriate for your hardware: hasp-lvgl-0.2.0-esp8266_ili9341_spi.bin Install the firmware ~ Flash ESP8266 ~ For ESP8266 you only need one single .bin file: Using Tasmotizer (Windows) Using esp-tool.py esptool.py -p \"COM1\" write_flash --flash_mode qio --flash_size 4m 0x0 d1-mini-esp8266_ili9341_<version>.bin Change COM1 to the correct port on your computer and 4m to the correct size of the internal flash chip.","title":"ESP8266 Installation"},{"location":"ESP8266/#download-the-firmware","text":"Go to the releases page on GitHub to download the latest hasp-lvgl binaries. There are currently 2 download options, pick the one appropriate for your hardware: hasp-lvgl-0.2.0-esp8266_ili9341_spi.bin","title":"Download the firmware"},{"location":"ESP8266/#install-the-firmware","text":"","title":"Install the firmware"},{"location":"ESP8266/#flash-esp8266","text":"For ESP8266 you only need one single .bin file:","title":"Flash ESP8266"},{"location":"commands/","text":"Commands Commands are not related to an object on the screen but can get or set global properties or invoke system commands on the device. Commands can be issued via the Serial Commandline, Telnet Commandline or MQTT. For MQTT, use the hasp/<hostname>/command topic with payload <keyword> <parameter(s)> Here is a list of all the recognized command keywords: Pages ~ page value: [0-11] Switches the display to show the objects from a different page and return the page number in state/page . Calling the page command without a parameter will return the value of the current page in state/page . clearpage value: [0-11,254] Deletes all objects on a given page. If no page number is specified, it clears the current page. To delete individual objects, you can issue the p[x].b[y].delete command. Backlight ~ dim values: [0-100] Sets the level of the backlight from 0 to 100%, where 0% is off and 100% is full brightness. Example dim 50 sets the display to half the brightness. Tip This can be used in conjunction with the idle event e.g. to dim the backlight after a short period of inactivity. light values: on / off , true / false , 0 / 1 , yes / no Switches the backlight on or off, independent of the set dim level. Turning the backlight on will restore the brightness to the previous dim level. Example light on Turn the backlight on Tip: this can be used in conjunction with the idle event, e.g. to turn the backlight off after a long period of inactivity. Important dim and light commands will work only if a Backlight GPIO pin is configured to the pin required to control the display backlight. wakeup Clears the idle state of the device and publishes a state/idle = OFF status message. It resets the idle counter as if a touch event occurred on the device. This is helpful e.g. when you want to wake up the display when an external event has occurred, like a PIR motion sensor. System Commands ~ calibrate Start on-screen touch calibration. You need to issue a soft reboot command to save the new calibration settings. If you do a hard reset of the device, the calibration settings will be lost. screenshot Saves a picture of the current screen to the flash filesystem. You can retrieve it via http://<ip-address>/screenshot.bmp. This can be handy for bug reporting or documentation. The previous screenshot is overwritten. statusupdate Reports the status of the MCU. The response will be posted to the state topic: \"statusupdate\": { \"status\": \"available\", \"espVersion\": \"0.0.6\", \"espUptime\": 124, \"signalStrength\": -72, \"haspIP\": \"10.1.0.148\", \"heapFree\": 5912, \"heapFragmentation\": 7, \"espCore\": \"2_6_3\" } reboot or restart Saves any changes in the configuration file and reboots the device. update value: [url] Update the firmware from the url provided. Reboots when update was successful. factoryreset Clear the filesystem and EEPROM and reboot the device in its initial state. Warning There is no confirmation prompt nor an undo function! Output Commands (GPIO) ~ output<x> where <x> is number of the group values: 1 or 0 , on or off , true or false Sets all GPIO's assigned to the group number <x> in Configuration -> GPIO Configuration to \"0\" or \"1\". GUI objects that are assigned to that group will also change state accordingly. Configuration Settings ~ Wi-FI ~ ssid Set network name of the access point to connect to. pass Set the optional password for the access point to connect to. MQTT ~ hostname Set the hostname of the device and mqtt topic for the node to hasp/<hostname>/ mqtthost Set the IP address or hostname of the mqtt broker. mqttport Set the port of the mqtt broker. mqttuser Set the optional username for the mqtt broker. mqttpass Set the optional password for the mqtt broker. Config/submodule ~ You can get or set the configuration of a hasp-lvgl submodule in json format. To get the configuration, use the command config/<submodule> . The result will be published to hasp/<hostname>/state/config . Passwords will be omitted from the result. config/wifi config/mqtt config/http config/mdns config/hasp config/gui config/debug To update the configuration simply issue the same command config/<submodule> with updated json payload. Multiple Commands ~ json When you want to execute multiple commands in one payload, you can use the json command to create an array of commands in a json payload Each command is an element in this array of strings: [\"page 5\",\"dim 50\",\"light on\",\"statusupdate\"] The commands are interpreted and processed sequentially. jsonl (json lines) This command can be used to create new objects or update the properties of an existing object. When updating an existing object objid is not required and will be ignored. Each line in the jsonl payload defines one object and has to be in the json format. For details see Pages and Objects","title":"Commands"},{"location":"commands/#pages","text":"page value: [0-11] Switches the display to show the objects from a different page and return the page number in state/page . Calling the page command without a parameter will return the value of the current page in state/page . clearpage value: [0-11,254] Deletes all objects on a given page. If no page number is specified, it clears the current page. To delete individual objects, you can issue the p[x].b[y].delete command.","title":"Pages"},{"location":"commands/#backlight","text":"dim values: [0-100] Sets the level of the backlight from 0 to 100%, where 0% is off and 100% is full brightness. Example dim 50 sets the display to half the brightness. Tip This can be used in conjunction with the idle event e.g. to dim the backlight after a short period of inactivity. light values: on / off , true / false , 0 / 1 , yes / no Switches the backlight on or off, independent of the set dim level. Turning the backlight on will restore the brightness to the previous dim level. Example light on Turn the backlight on Tip: this can be used in conjunction with the idle event, e.g. to turn the backlight off after a long period of inactivity. Important dim and light commands will work only if a Backlight GPIO pin is configured to the pin required to control the display backlight. wakeup Clears the idle state of the device and publishes a state/idle = OFF status message. It resets the idle counter as if a touch event occurred on the device. This is helpful e.g. when you want to wake up the display when an external event has occurred, like a PIR motion sensor.","title":"Backlight"},{"location":"commands/#system-commands","text":"calibrate Start on-screen touch calibration. You need to issue a soft reboot command to save the new calibration settings. If you do a hard reset of the device, the calibration settings will be lost. screenshot Saves a picture of the current screen to the flash filesystem. You can retrieve it via http://<ip-address>/screenshot.bmp. This can be handy for bug reporting or documentation. The previous screenshot is overwritten. statusupdate Reports the status of the MCU. The response will be posted to the state topic: \"statusupdate\": { \"status\": \"available\", \"espVersion\": \"0.0.6\", \"espUptime\": 124, \"signalStrength\": -72, \"haspIP\": \"10.1.0.148\", \"heapFree\": 5912, \"heapFragmentation\": 7, \"espCore\": \"2_6_3\" } reboot or restart Saves any changes in the configuration file and reboots the device. update value: [url] Update the firmware from the url provided. Reboots when update was successful. factoryreset Clear the filesystem and EEPROM and reboot the device in its initial state. Warning There is no confirmation prompt nor an undo function!","title":"System Commands"},{"location":"commands/#output-commands-gpio","text":"output<x> where <x> is number of the group values: 1 or 0 , on or off , true or false Sets all GPIO's assigned to the group number <x> in Configuration -> GPIO Configuration to \"0\" or \"1\". GUI objects that are assigned to that group will also change state accordingly.","title":"Output Commands (GPIO)"},{"location":"commands/#configuration-settings","text":"","title":"Configuration Settings"},{"location":"commands/#wi-fi","text":"ssid Set network name of the access point to connect to. pass Set the optional password for the access point to connect to.","title":"Wi-FI"},{"location":"commands/#mqtt","text":"hostname Set the hostname of the device and mqtt topic for the node to hasp/<hostname>/ mqtthost Set the IP address or hostname of the mqtt broker. mqttport Set the port of the mqtt broker. mqttuser Set the optional username for the mqtt broker. mqttpass Set the optional password for the mqtt broker.","title":"MQTT"},{"location":"commands/#configsubmodule","text":"You can get or set the configuration of a hasp-lvgl submodule in json format. To get the configuration, use the command config/<submodule> . The result will be published to hasp/<hostname>/state/config . Passwords will be omitted from the result. config/wifi config/mqtt config/http config/mdns config/hasp config/gui config/debug To update the configuration simply issue the same command config/<submodule> with updated json payload.","title":"Config/submodule"},{"location":"commands/#multiple-commands","text":"json When you want to execute multiple commands in one payload, you can use the json command to create an array of commands in a json payload Each command is an element in this array of strings: [\"page 5\",\"dim 50\",\"light on\",\"statusupdate\"] The commands are interpreted and processed sequentially. jsonl (json lines) This command can be used to create new objects or update the properties of an existing object. When updating an existing object objid is not required and will be ignored. Each line in the jsonl payload defines one object and has to be in the json format. For details see Pages and Objects","title":"Multiple Commands"},{"location":"compiling/","text":"Compiling Clone from GitHub ~ Make sure to add the --recursive parameter when cloning the project from GitHub. Otherwise git will not download the required submodules in the /lib subdirectory. git clone --recursive https://github.com/fvanroie/hasp-lvgl If you already cloned hasp-lvgl without the submodules, you can fetch the submodules seperately using: git submodule update --init --recursive To switch to a different branch use: git clone --recursive https://github.com/fvanroie/hasp-lvgl cd hasp-lvgl git checkout 0.2.0 git submodule update --init --recursive Open in PlatformIO ~ Open the project folder in Visual Studio Code , make sure you have the PlatformIO IDE extension installed. This will automatically install all PlatformIO dependencies and the compiler frameworks needed. Restart Visual Studio Code when the PIO installation completes. Create a configuration ~ Copy platformio_override-template.ini to platformio_override.ini and uncomment the platforms for esp32 and esp8266 : [platformio] extra_configs = ; Uncomment or edit the lines to show more User Setups in the PIO sidebar user_setups/esp32/*.ini user_setups/esp8266/*.ini ; user_setups/stm32f4xx/*.ini Then Click on the \"Refresh Project tasks\" icon in PlatformIO to list all the configured environments. Compile Environment ~ You can now run \"Build\" or \"Build All\" in PlatformIO to compile (all) the firmware. Development ~ Block Diagram ~","title":"Compiling"},{"location":"compiling/#clone-from-github","text":"Make sure to add the --recursive parameter when cloning the project from GitHub. Otherwise git will not download the required submodules in the /lib subdirectory. git clone --recursive https://github.com/fvanroie/hasp-lvgl If you already cloned hasp-lvgl without the submodules, you can fetch the submodules seperately using: git submodule update --init --recursive To switch to a different branch use: git clone --recursive https://github.com/fvanroie/hasp-lvgl cd hasp-lvgl git checkout 0.2.0 git submodule update --init --recursive","title":"Clone from GitHub"},{"location":"compiling/#open-in-platformio","text":"Open the project folder in Visual Studio Code , make sure you have the PlatformIO IDE extension installed. This will automatically install all PlatformIO dependencies and the compiler frameworks needed. Restart Visual Studio Code when the PIO installation completes.","title":"Open in PlatformIO"},{"location":"compiling/#create-a-configuration","text":"Copy platformio_override-template.ini to platformio_override.ini and uncomment the platforms for esp32 and esp8266 : [platformio] extra_configs = ; Uncomment or edit the lines to show more User Setups in the PIO sidebar user_setups/esp32/*.ini user_setups/esp8266/*.ini ; user_setups/stm32f4xx/*.ini Then Click on the \"Refresh Project tasks\" icon in PlatformIO to list all the configured environments.","title":"Create a configuration"},{"location":"compiling/#compile-environment","text":"You can now run \"Build\" or \"Build All\" in PlatformIO to compile (all) the firmware.","title":"Compile Environment"},{"location":"compiling/#development","text":"","title":"Development"},{"location":"compiling/#block-diagram","text":"","title":"Block Diagram"},{"location":"example-0/","text":"Example 0 Code ~ This is a real-world example of a pages.jsonl file: {\"page\":0,\"comment\":\"---------- Page 0 ----------\"} {\"objid\":10,\"id\":1,\"x\":10,\"y\":45,\"w\":220,\"h\":55,\"toggle\":\"TRUE\",\"txt\":\"Push Me \\uf0a6\"} {\"objid\":11,\"id\":2,\"x\":10,\"y\":100,\"w\":220,\"h\":55,\"txt\":\"A Checkbox\"} {\"objid\":12,\"id\":3,\"x\":10,\"y\":10,\"w\":220,\"h\":30,\"txt\":\"My Label\",\"align\":1,\"padh\":50} {\"objid\":40,\"id\":4,\"x\":70,\"y\":205,\"w\":100,\"h\":55} {\"objid\":41,\"id\":5,\"x\":10,\"y\":205,\"w\":55,\"h\":55} {\"objid\":50,\"id\":6,\"x\":10,\"y\":150,\"w\":150,\"options\":\"\\uf007 Line 1\\n\\uf007 Line 2\\n\\uf007 Line 3\"} {\"objid\":21,\"id\":7,\"x\":165,\"y\":140,\"w\":70,\"h\":70} {\"page\":1,\"comment\":\"---------- Page 1 ----------\"} {\"objid\":30,\"id\":1,\"x\":10,\"y\":170,\"w\":200,\"h\":50} {\"objid\":31,\"id\":3,\"x\":13,\"y\":10,\"w\":100,\"h\":100} {\"objid\":32,\"id\":4,\"x\":10,\"y\":110,\"w\":200,\"h\":50} {\"objid\":33,\"id\":5,\"x\":127,\"y\":10,\"w\":100,\"h\":100} {\"objid\":12,\"id\":10,\"x\":0,\"y\":0,\"w\":70,\"h\":50,\"parentid\":5,\"txt\":\"\\uf00c OK\"} {\"comment\":\"---------- Page 2 ----------\"} {\"objid\":20,\"id\":1,\"page\":2,\"x\":20,\"y\":0,\"w\":200,\"h\":200} {\"objid\":20,\"id\":2,\"page\":2,\"x\":20,\"y\":210,\"w\":200,\"h\":50,\"rect\":\"TRUE\"} {\"page\":3,\"comment\":\"---------- Page 3 ----------\"} {\"objid\":50,\"id\":1,\"x\":10,\"y\":10,\"w\":220,\"options\":\"Spring\\nSummer\\nAutumn\\nWinter\"} {\"objid\":51,\"id\":2,\"x\":40,\"y\":50,\"w\":160,\"rows\":3,\"options\":\"2020\\n2021\\n2022\\n2023\\n2024\"} {\"page\":254,\"comment\":\"---------- Page 254 ----------\"} {\"objid\":10,\"id\":1,\"x\":0,\"y\":270,\"w\":75,\"h\":50,\"opacity\":100,\"txt\":\"\\uF053 Prev\"} {\"objid\":10,\"id\":2,\"x\":75,\"y\":270,\"w\":90,\"h\":50,\"opacity\":100,\"txt\":\"\\uF015 Home\"} {\"objid\":10,\"id\":3,\"x\":165,\"y\":270,\"w\":75,\"h\":50,\"opacity\":100,\"txt\":\"Next \\uF054\"} Result ~","title":"Demo Widgets"},{"location":"example-0/#code","text":"This is a real-world example of a pages.jsonl file: {\"page\":0,\"comment\":\"---------- Page 0 ----------\"} {\"objid\":10,\"id\":1,\"x\":10,\"y\":45,\"w\":220,\"h\":55,\"toggle\":\"TRUE\",\"txt\":\"Push Me \\uf0a6\"} {\"objid\":11,\"id\":2,\"x\":10,\"y\":100,\"w\":220,\"h\":55,\"txt\":\"A Checkbox\"} {\"objid\":12,\"id\":3,\"x\":10,\"y\":10,\"w\":220,\"h\":30,\"txt\":\"My Label\",\"align\":1,\"padh\":50} {\"objid\":40,\"id\":4,\"x\":70,\"y\":205,\"w\":100,\"h\":55} {\"objid\":41,\"id\":5,\"x\":10,\"y\":205,\"w\":55,\"h\":55} {\"objid\":50,\"id\":6,\"x\":10,\"y\":150,\"w\":150,\"options\":\"\\uf007 Line 1\\n\\uf007 Line 2\\n\\uf007 Line 3\"} {\"objid\":21,\"id\":7,\"x\":165,\"y\":140,\"w\":70,\"h\":70} {\"page\":1,\"comment\":\"---------- Page 1 ----------\"} {\"objid\":30,\"id\":1,\"x\":10,\"y\":170,\"w\":200,\"h\":50} {\"objid\":31,\"id\":3,\"x\":13,\"y\":10,\"w\":100,\"h\":100} {\"objid\":32,\"id\":4,\"x\":10,\"y\":110,\"w\":200,\"h\":50} {\"objid\":33,\"id\":5,\"x\":127,\"y\":10,\"w\":100,\"h\":100} {\"objid\":12,\"id\":10,\"x\":0,\"y\":0,\"w\":70,\"h\":50,\"parentid\":5,\"txt\":\"\\uf00c OK\"} {\"comment\":\"---------- Page 2 ----------\"} {\"objid\":20,\"id\":1,\"page\":2,\"x\":20,\"y\":0,\"w\":200,\"h\":200} {\"objid\":20,\"id\":2,\"page\":2,\"x\":20,\"y\":210,\"w\":200,\"h\":50,\"rect\":\"TRUE\"} {\"page\":3,\"comment\":\"---------- Page 3 ----------\"} {\"objid\":50,\"id\":1,\"x\":10,\"y\":10,\"w\":220,\"options\":\"Spring\\nSummer\\nAutumn\\nWinter\"} {\"objid\":51,\"id\":2,\"x\":40,\"y\":50,\"w\":160,\"rows\":3,\"options\":\"2020\\n2021\\n2022\\n2023\\n2024\"} {\"page\":254,\"comment\":\"---------- Page 254 ----------\"} {\"objid\":10,\"id\":1,\"x\":0,\"y\":270,\"w\":75,\"h\":50,\"opacity\":100,\"txt\":\"\\uF053 Prev\"} {\"objid\":10,\"id\":2,\"x\":75,\"y\":270,\"w\":90,\"h\":50,\"opacity\":100,\"txt\":\"\\uF015 Home\"} {\"objid\":10,\"id\":3,\"x\":165,\"y\":270,\"w\":75,\"h\":50,\"opacity\":100,\"txt\":\"Next \\uF054\"}","title":"Code"},{"location":"example-0/#result","text":"","title":"Result"},{"location":"example-1/","text":"Example 1 Code ~ This is an example of a pages.jsonl file: {\"page\":0,\"comment\":\"---------- Page 0 ----------\"} {\"objid\":10,\"id\":4,\"page\":0,\"x\":5,\"y\":5,\"w\":230,\"h\":58,\"bg_color\":\"#000000\",\"border_color\":\"#FFAC00\",\"border_width\":2,\"radius\":10,\"radius1\":10,\"radius2\":10,\"txt\":\"Lights On\",\"value_ofs_x\":-85,\"value_font\":1,\"value_str\":\"\\uf205\",\"value_color\":\"#B6B6B6\",\"text_color\":\"#B6B6B6\",\"text_font\":22} {\"objid\":10,\"id\":5,\"page\":0,\"x\":5,\"y\":68,\"w\":230,\"h\":58,\"bg_color\":\"#000000\",\"border_color\":\"#FFAC00\",\"border_width\":2,\"radius\":10,\"radius1\":10,\"radius2\":10,\"txt\":\"Daylight\",\"value_ofs_x\":-85,\"value_font\":1,\"value_str\":\"\\uf185\",\"value_color\":\"#B6B6B6\",\"text_color\":\"#B6B6B6\",\"text_font\":22} {\"objid\":10,\"id\":6,\"page\":0,\"x\":5,\"y\":131,\"w\":230,\"h\":58,\"bg_color\":\"#000000\",\"border_color\":\"#FFAC00\",\"border_width\":2,\"radius\":10,\"radius1\":10,\"radius2\":10,\"txt\":\"Night\",\"value_ofs_x\":-85,\"value_font\":1,\"value_str\":\"\\uf186\",\"value_color\":\"#B6B6B6\",\"text_color\":\"#B6B6B6\",\"text_font\":22} {\"objid\":10,\"id\":7,\"page\":0,\"x\":5,\"y\":194,\"w\":230,\"h\":58,\"bg_color\":\"#000000\",\"border_color\":\"#FFAC00\",\"border_width\":2,\"radius\":10,\"radius1\":10,\"radius2\":10,\"txt\":\"Lights Off\",\"value_ofs_x\":-85,\"value_font\":1,\"value_str\":\"\\uf204\",\"value_color\":\"#B6B6B6\",\"text_color\":\"#B6B6B6\",\"text_font\":22} {\"page\":1,\"comment\":\"---------- Page 1 ----------\"} {\"objid\":12,\"id\":8,\"page\":1,\"x\":5,\"y\":5,\"w\":230,\"h\":30,\"bg_color\":\"#000000\",\"border_color\":\"#C7BAA7\",\"border_width\":0,\"radius\":10,\"radius1\":10,\"radius2\":10,\"txt\":\"Kitchen Dimmer\",\"text_color\":\"#B6B6B6\",\"text_font\":22} {\"objid\":12,\"id\":9,\"page\":1,\"x\":5,\"y\":80,\"w\":230,\"h\":30,\"bg_color\":\"#000000\",\"border_color\":\"#C7BAA7\",\"border_width\":0,\"radius\":10,\"radius1\":10,\"radius2\":10,\"txt\":\"Dining Dimmer\",\"text_color\":\"#B6B6B6\",\"text_font\":22} {\"objid\":12,\"id\":10,\"page\":1,\"x\":5,\"y\":165,\"w\":230,\"h\":30,\"bg_color\":\"#000000\",\"border_color\":\"#C7BAA7\",\"border_width\":0,\"radius\":10,\"radius1\":10,\"radius2\":10,\"txt\":\"Front Blinds\",\"text_color\":\"#B6B6B6\",\"text_font\":22} {\"objid\":30,\"id\":11,\"page\":1,\"x\":20,\"y\":40,\"w\":200,\"h\":30,\"bg_color\":\"#C7BAA7\",\"border_color\":\"#C7BAA7\",\"border_width\":0,\"radius\":15,\"radius1\":15,\"radius2\":20,\"text_font\":1,\"val\":80,\"bg_color1\":\"#FFAC00\",\"bg_color2\":\"#DC5C05\"} {\"objid\":30,\"id\":12,\"page\":1,\"x\":20,\"y\":120,\"w\":200,\"h\":30,\"bg_color\":\"#C7BAA7\",\"border_color\":\"#C7BAA7\",\"border_width\":0,\"radius\":15,\"radius1\":15,\"radius2\":20,\"text_font\":1,\"val\":65,\"bg_color1\":\"#FFAC00\",\"bg_color2\":\"#DC5C05\"} {\"objid\":30,\"id\":13,\"page\":1,\"x\":20,\"y\":205,\"w\":200,\"h\":30,\"bg_color\":\"#C7BAA7\",\"border_color\":\"#C7BAA7\",\"border_width\":0,\"radius\":15,\"radius1\":15,\"radius2\":20,\"text_font\":1,\"val\":25,\"bg_color1\":\"#FFAC00\",\"bg_color2\":\"#DC5C05\"} {\"page\":2,\"comment\":\"---------- Page 2 ----------\"} {\"objid\":12,\"id\":14,\"page\":2,\"x\":42,\"y\":10,\"w\":236,\"h\":30,\"bg_color\":\"#000000\",\"border_color\":\"#C7BAA7\",\"border_width\":0,\"txt\":\"Gold\",\"text_color\":\"#C7BAA7\",\"text_font\":22} {\"objid\":12,\"id\":15,\"page\":2,\"x\":42,\"y\":60,\"mode\":\"scroll\",\"w\":236,\"h\":30,\"bg_color\":\"#000000\",\"border_color\":\"#C7BAA7\",\"border_width\":0,\"txt\":\"Chet Faker\",\"text_color\":\"#C7BAA7\",\"text_font\":22} {\"objid\":10,\"id\":16,\"page\":2,\"x\":2,\"y\":140,\"w\":76,\"h\":61,\"bg_color\":\"#000000\",\"border_color\":\"#FFAC00\",\"border_width\":2,\"radius\":10,\"radius1\":10,\"radius2\":10,\"txt\":\"\\uf048\",\"text_color\":\"#C7BAA7\",\"text_font\":1} {\"objid\":10,\"id\":17,\"page\":2,\"x\":82,\"y\":140,\"w\":76,\"h\":61,\"bg_color\":\"#000000\",\"border_color\":\"#FFAC00\",\"border_width\":2,\"radius\":10,\"radius1\":10,\"radius2\":10,\"txt\":\"\\uf04c\",\"text_color\":\"#C7BAA7\",\"text_font\":1} {\"objid\":10,\"id\":18,\"page\":2,\"x\":162,\"y\":140,\"w\":76,\"h\":61,\"bg_color\":\"#000000\",\"border_color\":\"#FFAC00\",\"border_width\":2,\"radius\":10,\"radius1\":10,\"radius2\":10,\"txt\":\"\\uf051\",\"text_color\":\"#C7BAA7\",\"text_font\":1} {\"objid\":32,\"id\":19,\"page\":2,\"x\":2,\"y\":105,\"w\":236,\"h\":20,\"bg_color\":\"#C7BAA7\",\"border_color\":\"#C7BAA7\",\"border_width\":0,\"radius\":15,\"radius1\":15,\"radius2\":15,\"text_font\":1,\"val\":65,\"bg_color1\":\"#FFAC00\"} {\"objid\":30,\"id\":20,\"page\":2,\"x\":35,\"y\":220,\"w\":170,\"h\":30,\"bg_color\":\"#C7BAA7\",\"border_color\":\"#C7BAA7\",\"border_width\":0,\"radius\":15,\"radius1\":15,\"radius2\":20,\"text_font\":1,\"val\":30,\"bg_color1\":\"#FFAC00\",\"bg_color2\":\"#DC5C05\"} {\"objid\":12,\"id\":21,\"page\":2,\"x\":2,\"y\":2,\"w\":40,\"h\":61,\"bg_color\":\"#000000\",\"border_color\":\"#C7BAA7\",\"border_width\":0,\"txt\":\"\\uf001\",\"text_color\":\"#C7BAA7\",\"text_font\":1} {\"objid\":12,\"id\":22,\"page\":2,\"x\":10,\"y\":51,\"w\":36,\"h\":61,\"bg_color\":\"#000000\",\"border_color\":\"#C7BAA7\",\"border_width\":0,\"txt\":\"\\uf3e0\",\"text_color\":\"#C7BAA7\",\"text_font\":1} {\"objid\":12,\"id\":23,\"page\":2,\"x\":5,\"y\":224,\"w\":25,\"h\":40,\"bg_color\":\"#000000\",\"border_color\":\"#C7BAA7\",\"border_width\":0,\"txt\":\"\\uf026\",\"text_color\":\"#C7BAA7\",\"text_font\":22} {\"objid\":12,\"id\":24,\"page\":2,\"x\":210,\"y\":224,\"w\":25,\"h\":40,\"bg_color\":\"#000000\",\"border_color\":\"#C7BAA7\",\"border_width\":0,\"txt\":\"\\uf028\",\"text_color\":\"#C7BAA7\",\"text_font\":22} {\"page\":254,\"comment\":\"---------- Page 254 ----------\"} {\"objid\":10,\"id\":1,\"page\":254,\"x\":5,\"y\":257,\"w\":73,\"h\":58,\"bg_color\":\"#000000\",\"border_color\":\"#C7BAA7\",\"border_width\":0,\"radius\":10,\"radius1\":10,\"radius2\":10,\"txt\":\"\\uf060\",\"text_color\":\"#978B7D\",\"text_font\":1} {\"objid\":10,\"id\":2,\"page\":254,\"x\":83,\"y\":257,\"w\":73,\"h\":58,\"bg_color\":\"#000000\",\"border_color\":\"#C7BAA7\",\"border_width\":0,\"radius\":10,\"radius1\":10,\"radius2\":10,\"txt\":\"\\uf039\",\"text_color\":\"#978B7D\",\"text_font\":1} {\"objid\":10,\"id\":3,\"page\":254,\"x\":161,\"y\":257,\"w\":73,\"h\":58,\"bg_color\":\"#000000\",\"border_color\":\"#C7BAA7\",\"border_width\":0,\"radius\":10,\"radius1\":10,\"radius2\":10,\"txt\":\"\\uf061\",\"text_color\":\"#978B7D\",\"text_font\":1} Result ~","title":"Jaffa Sunrise"},{"location":"example-1/#code","text":"This is an example of a pages.jsonl file: {\"page\":0,\"comment\":\"---------- Page 0 ----------\"} {\"objid\":10,\"id\":4,\"page\":0,\"x\":5,\"y\":5,\"w\":230,\"h\":58,\"bg_color\":\"#000000\",\"border_color\":\"#FFAC00\",\"border_width\":2,\"radius\":10,\"radius1\":10,\"radius2\":10,\"txt\":\"Lights On\",\"value_ofs_x\":-85,\"value_font\":1,\"value_str\":\"\\uf205\",\"value_color\":\"#B6B6B6\",\"text_color\":\"#B6B6B6\",\"text_font\":22} {\"objid\":10,\"id\":5,\"page\":0,\"x\":5,\"y\":68,\"w\":230,\"h\":58,\"bg_color\":\"#000000\",\"border_color\":\"#FFAC00\",\"border_width\":2,\"radius\":10,\"radius1\":10,\"radius2\":10,\"txt\":\"Daylight\",\"value_ofs_x\":-85,\"value_font\":1,\"value_str\":\"\\uf185\",\"value_color\":\"#B6B6B6\",\"text_color\":\"#B6B6B6\",\"text_font\":22} {\"objid\":10,\"id\":6,\"page\":0,\"x\":5,\"y\":131,\"w\":230,\"h\":58,\"bg_color\":\"#000000\",\"border_color\":\"#FFAC00\",\"border_width\":2,\"radius\":10,\"radius1\":10,\"radius2\":10,\"txt\":\"Night\",\"value_ofs_x\":-85,\"value_font\":1,\"value_str\":\"\\uf186\",\"value_color\":\"#B6B6B6\",\"text_color\":\"#B6B6B6\",\"text_font\":22} {\"objid\":10,\"id\":7,\"page\":0,\"x\":5,\"y\":194,\"w\":230,\"h\":58,\"bg_color\":\"#000000\",\"border_color\":\"#FFAC00\",\"border_width\":2,\"radius\":10,\"radius1\":10,\"radius2\":10,\"txt\":\"Lights Off\",\"value_ofs_x\":-85,\"value_font\":1,\"value_str\":\"\\uf204\",\"value_color\":\"#B6B6B6\",\"text_color\":\"#B6B6B6\",\"text_font\":22} {\"page\":1,\"comment\":\"---------- Page 1 ----------\"} {\"objid\":12,\"id\":8,\"page\":1,\"x\":5,\"y\":5,\"w\":230,\"h\":30,\"bg_color\":\"#000000\",\"border_color\":\"#C7BAA7\",\"border_width\":0,\"radius\":10,\"radius1\":10,\"radius2\":10,\"txt\":\"Kitchen Dimmer\",\"text_color\":\"#B6B6B6\",\"text_font\":22} {\"objid\":12,\"id\":9,\"page\":1,\"x\":5,\"y\":80,\"w\":230,\"h\":30,\"bg_color\":\"#000000\",\"border_color\":\"#C7BAA7\",\"border_width\":0,\"radius\":10,\"radius1\":10,\"radius2\":10,\"txt\":\"Dining Dimmer\",\"text_color\":\"#B6B6B6\",\"text_font\":22} {\"objid\":12,\"id\":10,\"page\":1,\"x\":5,\"y\":165,\"w\":230,\"h\":30,\"bg_color\":\"#000000\",\"border_color\":\"#C7BAA7\",\"border_width\":0,\"radius\":10,\"radius1\":10,\"radius2\":10,\"txt\":\"Front Blinds\",\"text_color\":\"#B6B6B6\",\"text_font\":22} {\"objid\":30,\"id\":11,\"page\":1,\"x\":20,\"y\":40,\"w\":200,\"h\":30,\"bg_color\":\"#C7BAA7\",\"border_color\":\"#C7BAA7\",\"border_width\":0,\"radius\":15,\"radius1\":15,\"radius2\":20,\"text_font\":1,\"val\":80,\"bg_color1\":\"#FFAC00\",\"bg_color2\":\"#DC5C05\"} {\"objid\":30,\"id\":12,\"page\":1,\"x\":20,\"y\":120,\"w\":200,\"h\":30,\"bg_color\":\"#C7BAA7\",\"border_color\":\"#C7BAA7\",\"border_width\":0,\"radius\":15,\"radius1\":15,\"radius2\":20,\"text_font\":1,\"val\":65,\"bg_color1\":\"#FFAC00\",\"bg_color2\":\"#DC5C05\"} {\"objid\":30,\"id\":13,\"page\":1,\"x\":20,\"y\":205,\"w\":200,\"h\":30,\"bg_color\":\"#C7BAA7\",\"border_color\":\"#C7BAA7\",\"border_width\":0,\"radius\":15,\"radius1\":15,\"radius2\":20,\"text_font\":1,\"val\":25,\"bg_color1\":\"#FFAC00\",\"bg_color2\":\"#DC5C05\"} {\"page\":2,\"comment\":\"---------- Page 2 ----------\"} {\"objid\":12,\"id\":14,\"page\":2,\"x\":42,\"y\":10,\"w\":236,\"h\":30,\"bg_color\":\"#000000\",\"border_color\":\"#C7BAA7\",\"border_width\":0,\"txt\":\"Gold\",\"text_color\":\"#C7BAA7\",\"text_font\":22} {\"objid\":12,\"id\":15,\"page\":2,\"x\":42,\"y\":60,\"mode\":\"scroll\",\"w\":236,\"h\":30,\"bg_color\":\"#000000\",\"border_color\":\"#C7BAA7\",\"border_width\":0,\"txt\":\"Chet Faker\",\"text_color\":\"#C7BAA7\",\"text_font\":22} {\"objid\":10,\"id\":16,\"page\":2,\"x\":2,\"y\":140,\"w\":76,\"h\":61,\"bg_color\":\"#000000\",\"border_color\":\"#FFAC00\",\"border_width\":2,\"radius\":10,\"radius1\":10,\"radius2\":10,\"txt\":\"\\uf048\",\"text_color\":\"#C7BAA7\",\"text_font\":1} {\"objid\":10,\"id\":17,\"page\":2,\"x\":82,\"y\":140,\"w\":76,\"h\":61,\"bg_color\":\"#000000\",\"border_color\":\"#FFAC00\",\"border_width\":2,\"radius\":10,\"radius1\":10,\"radius2\":10,\"txt\":\"\\uf04c\",\"text_color\":\"#C7BAA7\",\"text_font\":1} {\"objid\":10,\"id\":18,\"page\":2,\"x\":162,\"y\":140,\"w\":76,\"h\":61,\"bg_color\":\"#000000\",\"border_color\":\"#FFAC00\",\"border_width\":2,\"radius\":10,\"radius1\":10,\"radius2\":10,\"txt\":\"\\uf051\",\"text_color\":\"#C7BAA7\",\"text_font\":1} {\"objid\":32,\"id\":19,\"page\":2,\"x\":2,\"y\":105,\"w\":236,\"h\":20,\"bg_color\":\"#C7BAA7\",\"border_color\":\"#C7BAA7\",\"border_width\":0,\"radius\":15,\"radius1\":15,\"radius2\":15,\"text_font\":1,\"val\":65,\"bg_color1\":\"#FFAC00\"} {\"objid\":30,\"id\":20,\"page\":2,\"x\":35,\"y\":220,\"w\":170,\"h\":30,\"bg_color\":\"#C7BAA7\",\"border_color\":\"#C7BAA7\",\"border_width\":0,\"radius\":15,\"radius1\":15,\"radius2\":20,\"text_font\":1,\"val\":30,\"bg_color1\":\"#FFAC00\",\"bg_color2\":\"#DC5C05\"} {\"objid\":12,\"id\":21,\"page\":2,\"x\":2,\"y\":2,\"w\":40,\"h\":61,\"bg_color\":\"#000000\",\"border_color\":\"#C7BAA7\",\"border_width\":0,\"txt\":\"\\uf001\",\"text_color\":\"#C7BAA7\",\"text_font\":1} {\"objid\":12,\"id\":22,\"page\":2,\"x\":10,\"y\":51,\"w\":36,\"h\":61,\"bg_color\":\"#000000\",\"border_color\":\"#C7BAA7\",\"border_width\":0,\"txt\":\"\\uf3e0\",\"text_color\":\"#C7BAA7\",\"text_font\":1} {\"objid\":12,\"id\":23,\"page\":2,\"x\":5,\"y\":224,\"w\":25,\"h\":40,\"bg_color\":\"#000000\",\"border_color\":\"#C7BAA7\",\"border_width\":0,\"txt\":\"\\uf026\",\"text_color\":\"#C7BAA7\",\"text_font\":22} {\"objid\":12,\"id\":24,\"page\":2,\"x\":210,\"y\":224,\"w\":25,\"h\":40,\"bg_color\":\"#000000\",\"border_color\":\"#C7BAA7\",\"border_width\":0,\"txt\":\"\\uf028\",\"text_color\":\"#C7BAA7\",\"text_font\":22} {\"page\":254,\"comment\":\"---------- Page 254 ----------\"} {\"objid\":10,\"id\":1,\"page\":254,\"x\":5,\"y\":257,\"w\":73,\"h\":58,\"bg_color\":\"#000000\",\"border_color\":\"#C7BAA7\",\"border_width\":0,\"radius\":10,\"radius1\":10,\"radius2\":10,\"txt\":\"\\uf060\",\"text_color\":\"#978B7D\",\"text_font\":1} {\"objid\":10,\"id\":2,\"page\":254,\"x\":83,\"y\":257,\"w\":73,\"h\":58,\"bg_color\":\"#000000\",\"border_color\":\"#C7BAA7\",\"border_width\":0,\"radius\":10,\"radius1\":10,\"radius2\":10,\"txt\":\"\\uf039\",\"text_color\":\"#978B7D\",\"text_font\":1} {\"objid\":10,\"id\":3,\"page\":254,\"x\":161,\"y\":257,\"w\":73,\"h\":58,\"bg_color\":\"#000000\",\"border_color\":\"#C7BAA7\",\"border_width\":0,\"radius\":10,\"radius1\":10,\"radius2\":10,\"txt\":\"\\uf061\",\"text_color\":\"#978B7D\",\"text_font\":1}","title":"Code"},{"location":"example-1/#result","text":"","title":"Result"},{"location":"example-2/","text":"Dash UI Code ~ pages.jsonl file: {\"page\":0,\"comment\":\"---------- Page 0 ----------\"} {\"id\":0,\"bg_color\":\"#FFFFFF\",\"text_color\":\"#000000\",\"radius\":0,\"border_side\":0} {\"objid\":10,\"id\":1,\"x\":0,\"y\":0,\"w\":240,\"h\":30,\"txt\":\"LIVING ROOM\",\"value_font\":22,\"bg_color\":\"#2C3E50\",\"text_color\":\"#FFFFFF\",\"radius\":0,\"border_side\":0} {\"objid\":22,\"id\":2,\"x\":5,\"y\":45,\"w\":140,\"h\":100,\"max\":40,\"border_side\":0,\"type\":0,\"rotation\":0,\"start_angle\":180,\"end_angle\":0,\"start_angle1\":180,\"value_font\":12,\"value_ofs_x\":-19,\"value_ofs_y\":-4,\"bg_opa\":0} {\"objid\":22,\"id\":3,\"x\":130,\"y\":45,\"w\":140,\"h\":100,\"max\":100,\"border_side\":0,\"type\":0,\"start_angle\":180,\"end_angle\":0,\"start_angle1\":180,\"value_font\":12,\"value_color\":\"#000000\",\"value_ofs_x\":-19,\"value_ofs_y\":-4,\"bg_opa\":0} {\"objid\":10,\"id\":4,\"x\":0,\"y\":120,\"w\":240,\"h\":20,\"val\":0,\"txt\":\"CO2 levels: \",\"radius\":0,\"border_side\":0} {\"objid\":12,\"id\":5,\"x\":2,\"y\":35,\"w\":140,\"txt\":\"Temperature\"} {\"objid\":12,\"id\":6,\"x\":140,\"y\":35,\"w\":140,\"txt\":\"Humidity\"} {\"objid\":10,\"id\":7,\"x\":0,\"y\":160,\"w\":240,\"h\":20,\"txt\":\"LIGHTS\",\"bg_color\":\"#F1C40F\",\"text_color\":\"#FFFFFF\",\"radius\":0,\"border_side\":0} {\"objid\":12,\"id\":8,\"x\":20,\"y\":190,\"w\":140,\"h\":20,\"txt\":\"Ceiling Light\"} {\"objid\":40,\"id\":9,\"x\":160,\"y\":190,\"w\":40,\"h\":20,\"toggle\":\"TRUE\"} {\"objid\":12,\"id\":10,\"x\":20,\"y\":215,\"w\":140,\"h\":20,\"txt\":\"Wall Light\"} {\"objid\":40,\"id\":11,\"x\":160,\"y\":215,\"w\":40,\"h\":20,\"toggle\":\"TRUE\"} {\"objid\":12,\"id\":12,\"x\":20,\"y\":240,\"w\":200,\"h\":20,\"txt\":\"Ambient Light\"} {\"objid\":30,\"id\":13,\"x\":30,\"y\":265,\"w\":200,\"h\":10} {\"page\":254,\"comment\":\"---------- Page 254 ----------\"} {\"page\":254,\"objid\":10,\"id\":1,\"x\":0,\"y\":290,\"w\":76,\"h\":30,\"opacity\":50,\"txt\":\"\\uF053\",\"radius\":0,\"bg_color\":\"#34495E\",\"text_color\":\"#000000\"} {\"page\":254,\"objid\":10,\"id\":2,\"x\":75,\"y\":290,\"w\":90,\"h\":30,\"opacity\":100,\"txt\":\"\\uF015\",\"radius\":0,\"bg_color\":\"#34495E\",\"text_color\":\"#000000\"} {\"page\":254,\"objid\":10,\"id\":3,\"x\":164,\"y\":290,\"w\":76,\"h\":30,\"opacity\":100,\"txt\":\"\\uF054\",\"radius\":0,\"bg_color\":\"#34495E\",\"text_color\":\"#000000\"} Result ~ Values for Temperature, Humidity and CO2 Sensor are sent from another device by publishing to the appropriate command topic: hasp/lanbon/command/p[0].b[2].val %value% - update Temperature arc value hasp/lanbon/command/p[0].b[2].value_str %value%\u00b0C - update Temperature text value hasp/lanbon/command/p[0].b[3].val %value% - update Humidity arc value hasp/lanbon/command/p[0].b[3].value_str %value% % - update Humidity text value hasp/lanbon/command/p[0].b[4].txt CO2 levels: %value% - update CO2 level value","title":"Dash UI"},{"location":"example-2/#code","text":"pages.jsonl file: {\"page\":0,\"comment\":\"---------- Page 0 ----------\"} {\"id\":0,\"bg_color\":\"#FFFFFF\",\"text_color\":\"#000000\",\"radius\":0,\"border_side\":0} {\"objid\":10,\"id\":1,\"x\":0,\"y\":0,\"w\":240,\"h\":30,\"txt\":\"LIVING ROOM\",\"value_font\":22,\"bg_color\":\"#2C3E50\",\"text_color\":\"#FFFFFF\",\"radius\":0,\"border_side\":0} {\"objid\":22,\"id\":2,\"x\":5,\"y\":45,\"w\":140,\"h\":100,\"max\":40,\"border_side\":0,\"type\":0,\"rotation\":0,\"start_angle\":180,\"end_angle\":0,\"start_angle1\":180,\"value_font\":12,\"value_ofs_x\":-19,\"value_ofs_y\":-4,\"bg_opa\":0} {\"objid\":22,\"id\":3,\"x\":130,\"y\":45,\"w\":140,\"h\":100,\"max\":100,\"border_side\":0,\"type\":0,\"start_angle\":180,\"end_angle\":0,\"start_angle1\":180,\"value_font\":12,\"value_color\":\"#000000\",\"value_ofs_x\":-19,\"value_ofs_y\":-4,\"bg_opa\":0} {\"objid\":10,\"id\":4,\"x\":0,\"y\":120,\"w\":240,\"h\":20,\"val\":0,\"txt\":\"CO2 levels: \",\"radius\":0,\"border_side\":0} {\"objid\":12,\"id\":5,\"x\":2,\"y\":35,\"w\":140,\"txt\":\"Temperature\"} {\"objid\":12,\"id\":6,\"x\":140,\"y\":35,\"w\":140,\"txt\":\"Humidity\"} {\"objid\":10,\"id\":7,\"x\":0,\"y\":160,\"w\":240,\"h\":20,\"txt\":\"LIGHTS\",\"bg_color\":\"#F1C40F\",\"text_color\":\"#FFFFFF\",\"radius\":0,\"border_side\":0} {\"objid\":12,\"id\":8,\"x\":20,\"y\":190,\"w\":140,\"h\":20,\"txt\":\"Ceiling Light\"} {\"objid\":40,\"id\":9,\"x\":160,\"y\":190,\"w\":40,\"h\":20,\"toggle\":\"TRUE\"} {\"objid\":12,\"id\":10,\"x\":20,\"y\":215,\"w\":140,\"h\":20,\"txt\":\"Wall Light\"} {\"objid\":40,\"id\":11,\"x\":160,\"y\":215,\"w\":40,\"h\":20,\"toggle\":\"TRUE\"} {\"objid\":12,\"id\":12,\"x\":20,\"y\":240,\"w\":200,\"h\":20,\"txt\":\"Ambient Light\"} {\"objid\":30,\"id\":13,\"x\":30,\"y\":265,\"w\":200,\"h\":10} {\"page\":254,\"comment\":\"---------- Page 254 ----------\"} {\"page\":254,\"objid\":10,\"id\":1,\"x\":0,\"y\":290,\"w\":76,\"h\":30,\"opacity\":50,\"txt\":\"\\uF053\",\"radius\":0,\"bg_color\":\"#34495E\",\"text_color\":\"#000000\"} {\"page\":254,\"objid\":10,\"id\":2,\"x\":75,\"y\":290,\"w\":90,\"h\":30,\"opacity\":100,\"txt\":\"\\uF015\",\"radius\":0,\"bg_color\":\"#34495E\",\"text_color\":\"#000000\"} {\"page\":254,\"objid\":10,\"id\":3,\"x\":164,\"y\":290,\"w\":76,\"h\":30,\"opacity\":100,\"txt\":\"\\uF054\",\"radius\":0,\"bg_color\":\"#34495E\",\"text_color\":\"#000000\"}","title":"Code"},{"location":"example-2/#result","text":"Values for Temperature, Humidity and CO2 Sensor are sent from another device by publishing to the appropriate command topic: hasp/lanbon/command/p[0].b[2].val %value% - update Temperature arc value hasp/lanbon/command/p[0].b[2].value_str %value%\u00b0C - update Temperature text value hasp/lanbon/command/p[0].b[3].val %value% - update Humidity arc value hasp/lanbon/command/p[0].b[3].value_str %value% % - update Humidity text value hasp/lanbon/command/p[0].b[4].txt CO2 levels: %value% - update CO2 level value","title":"Result"},{"location":"faq/","text":"Frequently Asked Questions The font looks tiny ~ On ESP8266, the out-of-the box font is Unscii 8pt because this font takes up very little space in memory and on flash. This default font is just intended to get the device setup, then you can Upload your own .zi font. On ESP32, the default font is Monserrat 12. How to use Fontawesome icons? ~ Upload another .zi file named fontawesome xx .zi of the same point size as the normal text .zi font. e.g. If your custom font is arial24.zi\u00b4, you should also add a fontawesome24.zi` file. You can download fontawesome.zip from the HMI Font Pack repository. Is there a file browser built-in? ~ A: There is no native file browser included yet, as this currently is low on the priority list. However, you can upload the edit.htm.gz (3kB) file to the SPIFFS partition from the ESP32 FSBrowser repository. Download it from: https://github.com/espressif/arduino-esp32/blob/master/libraries/WebServer/examples/FSBrowser/data/edit.htm.gz When the edit.htm.gz file is present on Spiffs you will see an additional File Browser button on the Main Webpage: Using that webpage, you can right-click and delete files: How to delete files from flash? ~ See: Is there a file browser built-in?","title":"FAQ"},{"location":"faq/#the-font-looks-tiny","text":"On ESP8266, the out-of-the box font is Unscii 8pt because this font takes up very little space in memory and on flash. This default font is just intended to get the device setup, then you can Upload your own .zi font. On ESP32, the default font is Monserrat 12.","title":"The font looks tiny"},{"location":"faq/#how-to-use-fontawesome-icons","text":"Upload another .zi file named fontawesome xx .zi of the same point size as the normal text .zi font. e.g. If your custom font is arial24.zi\u00b4, you should also add a fontawesome24.zi` file. You can download fontawesome.zip from the HMI Font Pack repository.","title":"How to use Fontawesome icons?"},{"location":"faq/#is-there-a-file-browser-built-in","text":"A: There is no native file browser included yet, as this currently is low on the priority list. However, you can upload the edit.htm.gz (3kB) file to the SPIFFS partition from the ESP32 FSBrowser repository. Download it from: https://github.com/espressif/arduino-esp32/blob/master/libraries/WebServer/examples/FSBrowser/data/edit.htm.gz When the edit.htm.gz file is present on Spiffs you will see an additional File Browser button on the Main Webpage: Using that webpage, you can right-click and delete files:","title":"Is there a file browser built-in?"},{"location":"faq/#how-to-delete-files-from-flash","text":"See: Is there a file browser built-in?","title":"How to delete files from flash?"},{"location":"firmware-update/","text":"Firmware Update ESP Firmware Update ~ Serial Upload ~ Either use Tasmotizer or esptool.py to upload a new firmware file to the ESP. This procedure is the same as the initial installation. HTTP Upload ~ When the ESP has previously been flashed via serial, you can upload a new firmware file using the internal webserver. HTTP Update ~ When the ESP has previously been flashed via serial you can download and install new firmware directly from an external webserver. OTA Upload ~ When the ESP has previously been flashed via serial, subsequent updates can be performed Over-the-Air from within PlatformIO. STM32F4xx Firmware Update ~","title":"Firmware update"},{"location":"firmware-update/#esp-firmware-update","text":"","title":"ESP Firmware Update"},{"location":"firmware-update/#serial-upload","text":"Either use Tasmotizer or esptool.py to upload a new firmware file to the ESP. This procedure is the same as the initial installation.","title":"Serial Upload"},{"location":"firmware-update/#http-upload","text":"When the ESP has previously been flashed via serial, you can upload a new firmware file using the internal webserver.","title":"HTTP Upload"},{"location":"firmware-update/#http-update","text":"When the ESP has previously been flashed via serial you can download and install new firmware directly from an external webserver.","title":"HTTP Update"},{"location":"firmware-update/#ota-upload","text":"When the ESP has previously been flashed via serial, subsequent updates can be performed Over-the-Air from within PlatformIO.","title":"OTA Upload"},{"location":"firmware-update/#stm32f4xx-firmware-update","text":"","title":"STM32F4xx Firmware Update"},{"location":"fonts/","text":"Fonts Built-in Fonts ~ The ESP8266 firmware only has 1 built-in font: Unscii with font size 8pt. The ESP32 additionally contains the Montserrat font in these font sizes: 12, 16, 22 and 28pt. The built-in fonts can be set by using the pointsize as parameter: for example: p[0].b[1].text_font=16 p[0].b[1].value_font=8 Built-in Icons ~ These icons are included in the built-in font sizes: Icon UTF-8 Desciption Icon UTF-8 Description F001 music F074 random F008 film F077 chevron-up F00B th-list F078 chevron-down F00C check F079 retweet F00D times F07B folder F011 power-off F093 upload F013 cog F095 phone F015 home F0C4 cut F019 download F0C5 copy F01C inbox F0C7 save F021 sync F0E7 bolt F026 volume-off F0EA paste F027 volume-down F0F3 bell F028 volume-up F11C keyboard F03E image F124 location-arrow F048 step-backward F15B file F04B play F1EB wifi F04C pause F240 battery-full F04D stop F241 battery-three-quarters F051 step-forward F242 battery-half F052 eject F243 battery-quarter F053 chevron-left F244 battery-empty F054 chevron-right F287 usb F067 plus F293 bluetooth F068 minus F304 pen F06E eye F2ED trash-alt F070 eye-slash F55A backspace F071 exclamation-triangle F7C2 sd-card To use an icon in a text you need to prefix the UTF-8 value with \\u . To ensure proper decoding the payload should be used with a json or jsonl command. jsonl example: {\"objid\":12,\"id\":10,\"x\":0,\"y\":0,\"w\":70,\"h\":50,\"parentid\":5,\"txt\":\"\\uf00c OK\"} json example: [\"p[0].b[10].txt=\\uf00c OK\"] Custom Fonts ~ You can add a custom font by uploading it to the internal flash. Apply it as the default font on the Configuration > HASP Settings page. FontAwesome Icons ~","title":"Fonts"},{"location":"fonts/#built-in-fonts","text":"The ESP8266 firmware only has 1 built-in font: Unscii with font size 8pt. The ESP32 additionally contains the Montserrat font in these font sizes: 12, 16, 22 and 28pt. The built-in fonts can be set by using the pointsize as parameter: for example: p[0].b[1].text_font=16 p[0].b[1].value_font=8","title":"Built-in Fonts"},{"location":"fonts/#built-in-icons","text":"These icons are included in the built-in font sizes: Icon UTF-8 Desciption Icon UTF-8 Description F001 music F074 random F008 film F077 chevron-up F00B th-list F078 chevron-down F00C check F079 retweet F00D times F07B folder F011 power-off F093 upload F013 cog F095 phone F015 home F0C4 cut F019 download F0C5 copy F01C inbox F0C7 save F021 sync F0E7 bolt F026 volume-off F0EA paste F027 volume-down F0F3 bell F028 volume-up F11C keyboard F03E image F124 location-arrow F048 step-backward F15B file F04B play F1EB wifi F04C pause F240 battery-full F04D stop F241 battery-three-quarters F051 step-forward F242 battery-half F052 eject F243 battery-quarter F053 chevron-left F244 battery-empty F054 chevron-right F287 usb F067 plus F293 bluetooth F068 minus F304 pen F06E eye F2ED trash-alt F070 eye-slash F55A backspace F071 exclamation-triangle F7C2 sd-card To use an icon in a text you need to prefix the UTF-8 value with \\u . To ensure proper decoding the payload should be used with a json or jsonl command. jsonl example: {\"objid\":12,\"id\":10,\"x\":0,\"y\":0,\"w\":70,\"h\":50,\"parentid\":5,\"txt\":\"\\uf00c OK\"} json example: [\"p[0].b[10].txt=\\uf00c OK\"]","title":"Built-in Icons"},{"location":"fonts/#custom-fonts","text":"You can add a custom font by uploading it to the internal flash. Apply it as the default font on the Configuration > HASP Settings page.","title":"Custom Fonts"},{"location":"fonts/#fontawesome-icons","text":"","title":"FontAwesome Icons"},{"location":"getting-started/","text":"Getting Started hasp-lvgl supports the ESP32, ESP8266 and STM32F4 families of microcontrollers. It needs a compatible micro-controller with drivers supporting the attached display, touch controller, storage and network. Below is a list of recommended development boards and a TFT touchscreen to get you up-and-running in no time. Recommended Boards ~ table th:first-of-type { width: 12%; } table th:nth-of-type(2) { width: 22%; } table th:nth-of-type(3) { width: 22%; } table th:nth-of-type(4) { width: 22%; } table th:last-of-type { width: 22%; } Basic Standard Pro MCU ESP8266 ESP32-WROOM ESP32-WROVER CPU Freq. 80Mhz 240Mhz 240Mhz Ram 80Kb 520Kb 520Kb PSRam no no yes Minimal Flash 4MB 4MB 4MB Display ILI9341 SPI ILI9341 SPI ILI9341 SPI Touch XPT2046 SPI XPT2046 SPI XPT2046 SPI Network Wi-Fi Wi-Fi Wi-Fi Dev. Board* D1 mini ESP8266 D1 mini ESP32 TTGO T7 v1.4 Mini32 Firmware Download Download Download Due to the large number of possible hardware options a selection of 3 popular ESP development boards has been made for the precompiled binaries. Advanced users can build and compile custom configurations using PlatformIO, however this is not currently supported. Recommended Display ~ Lolin TFT 2.4\" ~ ILI9341 SPI touchscreens with backlight dimming via PWM are quite cheap to get. An ILI9341 TFT display with SPI is required when using a pre-built binary. The touch controller needs to be the XPT2046 Resistive Touch driver. The Lolin TFT 2.4\" is plug-and-play with the 3 recommended ESP development boards. If you have another ESP or MCU, you can still use this display using jumper cables. You can also solder a row of headers at the bottom of the display to plug it into a breadboard. Therefor the Lolin TFT 2.4 Touch Shield is used as the development display of choice. Backlight Control To use PWM dimming on the Lolin TFT 2.4\" you must connect the TFT-LED pin to either D1, D2 or D4. D1 is recommended for backlight control and configured by default. Do not use D3 for backlight control because it is already in use for touch! It is not recommended to use D4 for backlight control because it is already in use for PSram on the ESP32-Wrover. Compatible ESP boards ~ The Lolin TFT 2.4\" header is plug-and-play compatible with these development boards, no need to use any jumper cables: ESP32: Wemos D1 Mini ESP32 ( only solder the inner row of pin headers) TTGO T7 V1.4 MINI32 ESP32 ( only solder the inner row of pin headers) LOLIN D32 Pro V2.0.0 using an additional TFT cable ESP8266: Wemos D1 Mini ESP8266 Lolin D1 Mini Pro ESP8266 V2.0.0 Note If you have a Lolin TFT 2.4\" Display and a compatible ESP development board, you have all the hardware that is needed. In that case you can skip ahead to the Firmware Installation . Alternative SPI Display ~ Any common ILI9341 320x240 4-wire SPI touchscreen with XPT2046 Resistive Touch driver can be used, like: 2.4\" SKU: MSP2402 2.8\" SKU: MSP2807 3.2\" SKU: MSP3218 You will need to connect the GPIO pins using jumper wires.","title":"Getting Started"},{"location":"getting-started/#recommended-boards","text":"table th:first-of-type { width: 12%; } table th:nth-of-type(2) { width: 22%; } table th:nth-of-type(3) { width: 22%; } table th:nth-of-type(4) { width: 22%; } table th:last-of-type { width: 22%; } Basic Standard Pro MCU ESP8266 ESP32-WROOM ESP32-WROVER CPU Freq. 80Mhz 240Mhz 240Mhz Ram 80Kb 520Kb 520Kb PSRam no no yes Minimal Flash 4MB 4MB 4MB Display ILI9341 SPI ILI9341 SPI ILI9341 SPI Touch XPT2046 SPI XPT2046 SPI XPT2046 SPI Network Wi-Fi Wi-Fi Wi-Fi Dev. Board* D1 mini ESP8266 D1 mini ESP32 TTGO T7 v1.4 Mini32 Firmware Download Download Download Due to the large number of possible hardware options a selection of 3 popular ESP development boards has been made for the precompiled binaries. Advanced users can build and compile custom configurations using PlatformIO, however this is not currently supported.","title":"Recommended Boards"},{"location":"getting-started/#recommended-display","text":"","title":"Recommended Display"},{"location":"getting-started/#lolin-tft-24","text":"ILI9341 SPI touchscreens with backlight dimming via PWM are quite cheap to get. An ILI9341 TFT display with SPI is required when using a pre-built binary. The touch controller needs to be the XPT2046 Resistive Touch driver. The Lolin TFT 2.4\" is plug-and-play with the 3 recommended ESP development boards. If you have another ESP or MCU, you can still use this display using jumper cables. You can also solder a row of headers at the bottom of the display to plug it into a breadboard. Therefor the Lolin TFT 2.4 Touch Shield is used as the development display of choice.","title":"Lolin TFT 2.4\""},{"location":"getting-started/#compatible-esp-boards","text":"The Lolin TFT 2.4\" header is plug-and-play compatible with these development boards, no need to use any jumper cables: ESP32: Wemos D1 Mini ESP32 ( only solder the inner row of pin headers) TTGO T7 V1.4 MINI32 ESP32 ( only solder the inner row of pin headers) LOLIN D32 Pro V2.0.0 using an additional TFT cable ESP8266: Wemos D1 Mini ESP8266 Lolin D1 Mini Pro ESP8266 V2.0.0 Note If you have a Lolin TFT 2.4\" Display and a compatible ESP development board, you have all the hardware that is needed. In that case you can skip ahead to the Firmware Installation .","title":"Compatible ESP boards"},{"location":"getting-started/#alternative-spi-display","text":"Any common ILI9341 320x240 4-wire SPI touchscreen with XPT2046 Resistive Touch driver can be used, like: 2.4\" SKU: MSP2402 2.8\" SKU: MSP2807 3.2\" SKU: MSP3218 You will need to connect the GPIO pins using jumper wires.","title":"Alternative SPI Display"},{"location":"installation/","text":"Installation Download the firmware ~ Go to the releases page on GitHub to download the latest hasp-lvgl binaries. There are currently 2 download options, pick the one appropriate for your hardware: hasp-lvgl-0.2.0-esp32_ili9341_spi.bin + boot files hasp-lvgl-0.2.0-esp8266_ili9341_spi.bin Note If no precompiled firmware file is available for your board you can configure, compile and upload the firmware yourself using PlatformIO. Install the firmware ~ Flash ESP32 ~ When flashing the ESP32 for the first time, you need to install a bootloader, partition scheme and application loader: esptool.py --port \"COM1\" erase_flash esptool.py --port \"COM1\" write_flash 0x1000 bootloader_dio_40m.bin --flash_mode dio --flash_freq 40m esptool.py --port \"COM1\" write_flash 0x8000 partitions.bin esptool.py --port \"COM1\" write_flash 0xe000 boot_app0.bin Change COM1 to the correct port on your computer. then flash the actual firmware: esptool.py -p \"COM1\" --baud 921600 write_flash 0x10000 d1-mini-esp32_ili9341_<version>.bin or all previous steps in one long command line: esptool.py -p \"COM1\" --baud 921600 --before default_reset --after hard_reset write_flash --flash_mode dio --flash_freq 40m --flash_size detect 0x1000 bootloader_dio_40m.bin 0x8000 partitions.bin 0xe000 boot_app0.bin 0x10000 d1-mini-esp32_ili9341_<version>.bin Flash ESP8266 ~ Unlike the ESP32, for ESP8266 you only need one single .bin file: Using Tasmotizer (Windows) Using esp-tool.py esptool.py -p \"COM1\" write_flash --flash_mode qio --flash_size 4m 0x0 d1-mini-esp8266_ili9341_<version>.bin Change COM1 to the correct port on your computer and 4m to the correct size of the internal flash chip. STM32F407 devEbox ~ Note There is no precompiled firmware file available for STM32F4 boards. You will need to configure, compile and upload the firmware yourself using PlatformIO. Using Serial Connect your serial TTL adapter RX and TX pins to PA9 and PA10 of the devEbox. Place the boot jumpers into programming mode Reset the board. Upload the firmware using: Using DFU (USB) Connect your serial TTL adapter RX and TX pins to PA9 and PA10 of the devEbox. Place the boot jumpers into programming mode Reset the board. Upload the firmware using: Using ST Link (USB) Install ST Link software Connect the devEbox using the USB port Launch ST Link Select the hasp-lvgl-0.2.0-stm32f407_devEbox_3.2_ili9341_fsmc.bin file Flash the firmware to the board","title":"Installation"},{"location":"installation/#download-the-firmware","text":"Go to the releases page on GitHub to download the latest hasp-lvgl binaries. There are currently 2 download options, pick the one appropriate for your hardware: hasp-lvgl-0.2.0-esp32_ili9341_spi.bin + boot files hasp-lvgl-0.2.0-esp8266_ili9341_spi.bin Note If no precompiled firmware file is available for your board you can configure, compile and upload the firmware yourself using PlatformIO.","title":"Download the firmware"},{"location":"installation/#install-the-firmware","text":"","title":"Install the firmware"},{"location":"installation/#flash-esp32","text":"When flashing the ESP32 for the first time, you need to install a bootloader, partition scheme and application loader: esptool.py --port \"COM1\" erase_flash esptool.py --port \"COM1\" write_flash 0x1000 bootloader_dio_40m.bin --flash_mode dio --flash_freq 40m esptool.py --port \"COM1\" write_flash 0x8000 partitions.bin esptool.py --port \"COM1\" write_flash 0xe000 boot_app0.bin Change COM1 to the correct port on your computer. then flash the actual firmware: esptool.py -p \"COM1\" --baud 921600 write_flash 0x10000 d1-mini-esp32_ili9341_<version>.bin or all previous steps in one long command line: esptool.py -p \"COM1\" --baud 921600 --before default_reset --after hard_reset write_flash --flash_mode dio --flash_freq 40m --flash_size detect 0x1000 bootloader_dio_40m.bin 0x8000 partitions.bin 0xe000 boot_app0.bin 0x10000 d1-mini-esp32_ili9341_<version>.bin","title":"Flash ESP32"},{"location":"installation/#flash-esp8266","text":"Unlike the ESP32, for ESP8266 you only need one single .bin file:","title":"Flash ESP8266"},{"location":"installation/#stm32f407-devebox","text":"Note There is no precompiled firmware file available for STM32F4 boards. You will need to configure, compile and upload the firmware yourself using PlatformIO.","title":"STM32F407 devEbox"},{"location":"license/","text":"License The MIT License (MIT) ~ Hasp-lvgl is Copyright\u00a9 2019-2021 fvanroie, netwize.be and contributors Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Components ~ Hasp-lvgl is based on the existing work of the following open source developers: HASwitchPlate , the original Arduino project, Copyright\u00a9 2019 Allen Derusha. HASwitchPlate is distributed under the terms of the MIT License . LVGL graphics library, Copyright\u00a9 2016 G\u00e1bor Kiss-V\u00e1mosi and Copyright (c) 2020 LVGL LLC. LVGL is distributed under the terms of the MIT License . TFT_eSPI display library, Copyright\u00a9 2020 Bodmer (https://github.com/Bodmer) All rights reserved. TFT_eSPI is distributed under the terms of the FreeBSD License and includes parts from the Adafruit_GFX library , Copyright\u00a9 2012 Adafruit Industries. All rights reserved. Adafruit_GFX is distributed under the terms of the BSD License zi Font Engine Copyright\u00a9 2020 fvanroie, netwize.be MIT License . ArduinoJson Copyright\u00a9 2014-2020 Benoit BLANCHON MIT License . PubSubClient Copyright\u00a9 2008-2015 Nicholas O'Leary MIT License . Logging engine is based on ArduinoLog , Copyright\u00a9 2017,2018 Thijs Elenbaas, MrRobot62, rahuldeo2047, NOX73, dhylands, Josha blemasle, mfalkvidd with modifications by fvanroie, netwize.be. ArduinoLog is distributed under the terms of the MIT License . QR Code generator Copyright\u00a9 Project Nayuki MIT License . AceButton Copyright\u00a9 2018 Brian T. Park MIT License . Custom zi Fonts incorporate Font Awesome , Copyright\u00a9 2017 Dave Gandy. Font Awesome is distributed under the terms of the SIL OFL 1.1 and MIT License . The bootscreen uses the MaterialDesign Icons font, Copyright\u00a9 2014, Austin Andrews. MaterialDesign Icons font is licensed under the SIL Open Font License, Version 1.1.","title":"License"},{"location":"license/#the-mit-license-mit","text":"Hasp-lvgl is Copyright\u00a9 2019-2021 fvanroie, netwize.be and contributors Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"The MIT License (MIT)"},{"location":"license/#components","text":"Hasp-lvgl is based on the existing work of the following open source developers: HASwitchPlate , the original Arduino project, Copyright\u00a9 2019 Allen Derusha. HASwitchPlate is distributed under the terms of the MIT License . LVGL graphics library, Copyright\u00a9 2016 G\u00e1bor Kiss-V\u00e1mosi and Copyright (c) 2020 LVGL LLC. LVGL is distributed under the terms of the MIT License . TFT_eSPI display library, Copyright\u00a9 2020 Bodmer (https://github.com/Bodmer) All rights reserved. TFT_eSPI is distributed under the terms of the FreeBSD License and includes parts from the Adafruit_GFX library , Copyright\u00a9 2012 Adafruit Industries. All rights reserved. Adafruit_GFX is distributed under the terms of the BSD License zi Font Engine Copyright\u00a9 2020 fvanroie, netwize.be MIT License . ArduinoJson Copyright\u00a9 2014-2020 Benoit BLANCHON MIT License . PubSubClient Copyright\u00a9 2008-2015 Nicholas O'Leary MIT License . Logging engine is based on ArduinoLog , Copyright\u00a9 2017,2018 Thijs Elenbaas, MrRobot62, rahuldeo2047, NOX73, dhylands, Josha blemasle, mfalkvidd with modifications by fvanroie, netwize.be. ArduinoLog is distributed under the terms of the MIT License . QR Code generator Copyright\u00a9 Project Nayuki MIT License . AceButton Copyright\u00a9 2018 Brian T. Park MIT License . Custom zi Fonts incorporate Font Awesome , Copyright\u00a9 2017 Dave Gandy. Font Awesome is distributed under the terms of the SIL OFL 1.1 and MIT License . The bootscreen uses the MaterialDesign Icons font, Copyright\u00a9 2014, Austin Andrews. MaterialDesign Icons font is licensed under the SIL Open Font License, Version 1.1.","title":"Components"},{"location":"objects/","text":"Objects There are two ways to create an object on the screen: Uploading a pages.jsonl file onto the internal flash Use the jsonl command (via MQTT, serial or telnet console) Common Properties ~ These are the common properties shared among all objects, but only the id and objid properties are required to create an object: Property Value Required Default Description id 0-255 yes n/a ID of the object on this page objid 0-255 yes n/a ID of the object type (see below) page 0-255 no n/a ID of the page the object appears on x int16 no 0 horizontal position on the page y int16 no 0 vertical position on the page w int16 no 0 width of the object h int16 no 0 height of the object enabled true/false no true object is clickable hidden true/false no false object is hidden opacity 0-255 no 255 how much the the object is opaque radius uint16 no dep. on theme the radius of the rounded corners of the object, 0 = no round corners If the page parameter is not present, the object is placed on the same page as the previous object . If page is not specified for the first object either, the current page being displayed is used. The maximum number of pages and objects is limited by the memory available in the MCU. \"page\":254 indicates that the object is visible on every page. It can be used for example to specify a static menu bar. You can still hide the object on select pages if needed. Objects on this page appear on top of any objects on the underlying page. Object Types ~ Each object type is an ID that indicates which object type that line represents. Besides the common properties listed above, each object type can have specific properties. Cheatsheet ~ objid Type 10 Button 11 Checkbox 12 Label 20 Colorpicker 21 Spinner 22 Arc 30 Slider 31 Gauge 32 Progress Bar 33 Line Meter 40 Switch 41 LED 50 Dropdown List 51 Roller 91 Base Object Button ~ objid:10 Show Jsonl Code (Click to expand) {\"page\":0,\"comment\":\"---------- Page 0 ----------\"} {\"objid\":10,\"id\":1,\"x\":10,\"y\":45,\"w\":220,\"h\":55,\"toggle\":\"TRUE\",\"txt\":\"Push Me \\uf0a6\"} Property Value Required Default Description toggle boolean no false When enabled, creates a toggle-on/toggle-off button. If false, creates a normal button val int16 no 0 The value: 1 for toggled, 0 for untoggled txt string no \"\" The text of the label mode string no expand The wrapping mode of long text labels. Modes expand, break, dots, scroll, loop, crop Normal Switches send touch events out as they occur. The possible events are: DOWN : Occurs when a button goes from depressed to pressed SHORT : The button was released within a short time i.e. a short click has occurred LONG : Event is send when the button is still being pressed after the threshold time UP : The button is released after being pressing for a LONG threshold time. LOST : This event occurs when the object looses the focus while the screen is still being touched Toggle Switches only send out their new value ( 0 or 1 ) when toggled. Checkbox ~ objid:11 Property Value Required Default Description val int16 no 0 1 for checked, 0 for unchecked txt string no \"Checkbox\" The label of the checkbox Text Label ~ objid:12 Property Value Required Default Description txt string no \"Text\" The text of the label mode string no crop The wrapping mode of long text labels. Modes expand, break, dots, scroll, loop, crop {\"page\":2,\"id\":1,\"objid\":12,\"h\":24,\"w\":120,\"txt\":\"\\ufe05 Icon Demo\"} Arc ~ objid:22 Property Value Required Default Description min int16 no 0 minimum value of the indicator max int16 no 100 maximum value of the indicator val int16 no 0 current value of the indicator rotation int16 no 0 offset to the 0 degree position type 0-2 no 0 0 = normal, 1 = symmetrical, 2 = reverse adjustable bool no false Add indicator that the user can operate to change the value start_angle 0-360 no start angle of the arc background (see note) end_angle 0-360 no end angle of the arc background (see note) start_angle1 0-360 no start angle of the arc indicator (see note) end_angle1 0-360 no end angle of the arc indicator (see note) Note Zero degree is at the middle right (3 o'clock) of the object and the degrees are increasing in a clockwise direction. The angles should be in the [0-360] range. Spinner ~ objid:21 Property Value Required Default Description speed int16 no 1000 The time for 1 turn in ms direction int16 no 100 0 for clockwise, 1 for counter-clockwise thickness int16 no dep. on theme The width of the arc line Colorpicker ~ objid:20 Property Value Required Default Description val uint16 no 0 The selected color in RBG565 format color hex string no 0 The selected color in html format #rrggbb rect boolean no false true = color picker has a rectangular shape like a slider. false = circular shape. Slider ~ objid:30 Property Value Required Default Description min int16 no 0 minimum value of the indicator max int16 no 100 maximum value of the indicator val int16 no 0 current value of the indicator Double Slider ~ objid:30 Property Value Required Default Description min int16 no 0 minimum value of the indicator max int16 no 100 maximum value of the indicator val int16 no 0 current value of the indicator Line Meter ~ objid:33 Property Value Required Default Description min int16 no 0 minimum value of the indicator max int16 no 100 maximum value of the indicator val int16 no 0 current value of the indicator angle 0-360 no 240 angle between start and end of the scale line_count uint16 no 31 tick count of the scale rotation 0-360 no 0 offset for the scale angles to rotate it type 0-1 no 0 0 = indicator lines are activated clock-wise 1 = indicator lines are activated counter-clock-wise Use line properties to customise. Gauge ~ objid:31 Property Value Required Default Description min int16 no 0 minimum value of the indicator max int16 no 100 maximum value of the indicator val int16 no 0 current value of the indicator critical_value int16 no 80 scale color will be changed to scale_end_color after this value angle 0-360 no 240 angle between start and end of the scale label_count uint8 no number of labels (and minor tick count) of the scale line_count uint16 no 31 minor tick count of the scale rotation 0-360 no 0 offset for the gauge's angles to rotate it format uint16 no 0 divider for major tick values To strip trailing zero's of major tick labels the format divider can be used to scale the values before printing: 0 : print the major tick value as is 1 : strip 1 zero, i.e. divide tick value by 10 before printing the major tick label 2 : strip 2 zeros, i.e. divide tick value by 100 before printing the major tick label 3 : strip 3 zeros, i.e. divide tick value by 1000 before printing the major tick label 4 : strip 4 zeros, i.e. divide tick value by 10000 before printing the major tick label Only these values are allowed, arbitrary numbers are not supported. Progress Bar ~ objid:32 Property Value Required Default Description min int16 no 0 minimum value of the indicator max int16 no 100 maximum value of the indicator val int16 no 0 current value of the indicator Switch ~ objid:40 Property Value Required Default Description val int16 no 0 1 for on, 0 for off bg_color1 changes indicator color and bg_color2 changes knob color LED Indicator ~ objid:41 Property Value Required Default Description val byte no 0 The brightness of the indicator [0..255] Dropdown List ~ objid:50 Property Value Required Default Description options string no \"\" List of items separated by \\n val int16 no 0 The number of the selected item txt string no \"\" Read-only The text of the selected item To change the currently selected item, use the val attribute. To change the items in the list, use the options attribute. When the item is changed both val and txt of the newly selected item are send out. Roller ~ objid:51 Property Value Required Default Description options string no \"\" List of items separated by \\n val int16 no 0 The number of the selected item txt string no \"\" Read-only The text of the selected item rows int8 no 3 The number ow rows that are visible Note A roller does not use the h attribute to set its height but uses the rows attribute instead. To change the currently selected item, use the val attribute. To change the items in the list, use the options attribute. When the item is changed both val and txt of the newly selected item are send out. Base Object ~ objid:91 The Base Object can be directly used as a simple widget. It is nothing more then a (rounded) rectangle.","title":"Objects"},{"location":"objects/#common-properties","text":"These are the common properties shared among all objects, but only the id and objid properties are required to create an object: Property Value Required Default Description id 0-255 yes n/a ID of the object on this page objid 0-255 yes n/a ID of the object type (see below) page 0-255 no n/a ID of the page the object appears on x int16 no 0 horizontal position on the page y int16 no 0 vertical position on the page w int16 no 0 width of the object h int16 no 0 height of the object enabled true/false no true object is clickable hidden true/false no false object is hidden opacity 0-255 no 255 how much the the object is opaque radius uint16 no dep. on theme the radius of the rounded corners of the object, 0 = no round corners If the page parameter is not present, the object is placed on the same page as the previous object . If page is not specified for the first object either, the current page being displayed is used. The maximum number of pages and objects is limited by the memory available in the MCU. \"page\":254 indicates that the object is visible on every page. It can be used for example to specify a static menu bar. You can still hide the object on select pages if needed. Objects on this page appear on top of any objects on the underlying page.","title":"Common Properties"},{"location":"objects/#object-types","text":"Each object type is an ID that indicates which object type that line represents. Besides the common properties listed above, each object type can have specific properties.","title":"Object Types"},{"location":"objects/#cheatsheet","text":"objid Type 10 Button 11 Checkbox 12 Label 20 Colorpicker 21 Spinner 22 Arc 30 Slider 31 Gauge 32 Progress Bar 33 Line Meter 40 Switch 41 LED 50 Dropdown List 51 Roller 91 Base Object","title":"Cheatsheet"},{"location":"objects/#button","text":"objid:10 Show Jsonl Code (Click to expand) {\"page\":0,\"comment\":\"---------- Page 0 ----------\"} {\"objid\":10,\"id\":1,\"x\":10,\"y\":45,\"w\":220,\"h\":55,\"toggle\":\"TRUE\",\"txt\":\"Push Me \\uf0a6\"} Property Value Required Default Description toggle boolean no false When enabled, creates a toggle-on/toggle-off button. If false, creates a normal button val int16 no 0 The value: 1 for toggled, 0 for untoggled txt string no \"\" The text of the label mode string no expand The wrapping mode of long text labels. Modes expand, break, dots, scroll, loop, crop Normal Switches send touch events out as they occur. The possible events are: DOWN : Occurs when a button goes from depressed to pressed SHORT : The button was released within a short time i.e. a short click has occurred LONG : Event is send when the button is still being pressed after the threshold time UP : The button is released after being pressing for a LONG threshold time. LOST : This event occurs when the object looses the focus while the screen is still being touched Toggle Switches only send out their new value ( 0 or 1 ) when toggled.","title":"Button"},{"location":"objects/#checkbox","text":"objid:11 Property Value Required Default Description val int16 no 0 1 for checked, 0 for unchecked txt string no \"Checkbox\" The label of the checkbox","title":"Checkbox"},{"location":"objects/#text-label","text":"objid:12 Property Value Required Default Description txt string no \"Text\" The text of the label mode string no crop The wrapping mode of long text labels. Modes expand, break, dots, scroll, loop, crop {\"page\":2,\"id\":1,\"objid\":12,\"h\":24,\"w\":120,\"txt\":\"\\ufe05 Icon Demo\"}","title":"Text Label"},{"location":"objects/#arc","text":"objid:22 Property Value Required Default Description min int16 no 0 minimum value of the indicator max int16 no 100 maximum value of the indicator val int16 no 0 current value of the indicator rotation int16 no 0 offset to the 0 degree position type 0-2 no 0 0 = normal, 1 = symmetrical, 2 = reverse adjustable bool no false Add indicator that the user can operate to change the value start_angle 0-360 no start angle of the arc background (see note) end_angle 0-360 no end angle of the arc background (see note) start_angle1 0-360 no start angle of the arc indicator (see note) end_angle1 0-360 no end angle of the arc indicator (see note) Note Zero degree is at the middle right (3 o'clock) of the object and the degrees are increasing in a clockwise direction. The angles should be in the [0-360] range.","title":"Arc"},{"location":"objects/#spinner","text":"objid:21 Property Value Required Default Description speed int16 no 1000 The time for 1 turn in ms direction int16 no 100 0 for clockwise, 1 for counter-clockwise thickness int16 no dep. on theme The width of the arc line","title":"Spinner"},{"location":"objects/#colorpicker","text":"objid:20 Property Value Required Default Description val uint16 no 0 The selected color in RBG565 format color hex string no 0 The selected color in html format #rrggbb rect boolean no false true = color picker has a rectangular shape like a slider. false = circular shape.","title":"Colorpicker"},{"location":"objects/#slider","text":"objid:30 Property Value Required Default Description min int16 no 0 minimum value of the indicator max int16 no 100 maximum value of the indicator val int16 no 0 current value of the indicator","title":"Slider"},{"location":"objects/#double-slider","text":"objid:30 Property Value Required Default Description min int16 no 0 minimum value of the indicator max int16 no 100 maximum value of the indicator val int16 no 0 current value of the indicator","title":"Double Slider"},{"location":"objects/#line-meter","text":"objid:33 Property Value Required Default Description min int16 no 0 minimum value of the indicator max int16 no 100 maximum value of the indicator val int16 no 0 current value of the indicator angle 0-360 no 240 angle between start and end of the scale line_count uint16 no 31 tick count of the scale rotation 0-360 no 0 offset for the scale angles to rotate it type 0-1 no 0 0 = indicator lines are activated clock-wise 1 = indicator lines are activated counter-clock-wise Use line properties to customise.","title":"Line Meter"},{"location":"objects/#gauge","text":"objid:31 Property Value Required Default Description min int16 no 0 minimum value of the indicator max int16 no 100 maximum value of the indicator val int16 no 0 current value of the indicator critical_value int16 no 80 scale color will be changed to scale_end_color after this value angle 0-360 no 240 angle between start and end of the scale label_count uint8 no number of labels (and minor tick count) of the scale line_count uint16 no 31 minor tick count of the scale rotation 0-360 no 0 offset for the gauge's angles to rotate it format uint16 no 0 divider for major tick values To strip trailing zero's of major tick labels the format divider can be used to scale the values before printing: 0 : print the major tick value as is 1 : strip 1 zero, i.e. divide tick value by 10 before printing the major tick label 2 : strip 2 zeros, i.e. divide tick value by 100 before printing the major tick label 3 : strip 3 zeros, i.e. divide tick value by 1000 before printing the major tick label 4 : strip 4 zeros, i.e. divide tick value by 10000 before printing the major tick label Only these values are allowed, arbitrary numbers are not supported.","title":"Gauge"},{"location":"objects/#progress-bar","text":"objid:32 Property Value Required Default Description min int16 no 0 minimum value of the indicator max int16 no 100 maximum value of the indicator val int16 no 0 current value of the indicator","title":"Progress Bar"},{"location":"objects/#switch","text":"objid:40 Property Value Required Default Description val int16 no 0 1 for on, 0 for off bg_color1 changes indicator color and bg_color2 changes knob color","title":"Switch"},{"location":"objects/#led-indicator","text":"objid:41 Property Value Required Default Description val byte no 0 The brightness of the indicator [0..255]","title":"LED Indicator"},{"location":"objects/#dropdown-list","text":"objid:50 Property Value Required Default Description options string no \"\" List of items separated by \\n val int16 no 0 The number of the selected item txt string no \"\" Read-only The text of the selected item To change the currently selected item, use the val attribute. To change the items in the list, use the options attribute. When the item is changed both val and txt of the newly selected item are send out.","title":"Dropdown List"},{"location":"objects/#roller","text":"objid:51 Property Value Required Default Description options string no \"\" List of items separated by \\n val int16 no 0 The number of the selected item txt string no \"\" Read-only The text of the selected item rows int8 no 3 The number ow rows that are visible Note A roller does not use the h attribute to set its height but uses the rows attribute instead. To change the currently selected item, use the val attribute. To change the items in the list, use the options attribute. When the item is changed both val and txt of the newly selected item are send out.","title":"Roller"},{"location":"objects/#base-object","text":"objid:91 The Base Object can be directly used as a simple widget. It is nothing more then a (rounded) rectangle.","title":"Base Object"},{"location":"pages/","text":"Pages The initial layout of the pages is defined by creating a special file on the SPIFFS file system. This layout is displayed each time HASP starts up. Upload this file (and other resource assets like fonts and images) in the web interface Configuration -> HASP Settings menu. pages.jsonl ~ The location of this file is /pages.jsonl in the root of the filesystem. It uses the JSON Lines format with one json object per line. Each line should contain exactly one valid json object and end with a line-break \\n (not a comma) . The file is interpreted line-by-line . When a malformed line is encountered, the processing of the rest of the file stops. If you are missing objects, check the logs to see which line was processed last. You probably have a typo in the following line which blocks parsing the rest of the file. The complete file in its entirety is not a valid json file. Each individual line however must be a valid json object. The file extension is .jsonl and not .json . Objects ~ Each line in pages.jsonl creates one object on a page and has to be in the json format. The order of objects dictates the layer on the page from bottom to top. Example Objects {\"page\":2,\"id\":1,\"objid\":12,\"x\":5,\"y\":20,\"h\":50,\"w\":50,\"enabled\":\"true\",\"hidden\":\"false\"} {\"page\":2,\"id\":2,\"objid\":50,\"x\":5,\"y\":120,\"h\":90,\"w\":50,\"enabled\":\"false\",\"hidden\":\"false\"} Once the object is created, you can reference it with p[x].b[y] where x is the page number and y is the id of the object. for example: p[2].b[1].w=100 p[2].b[2].hidden=true Comments ~ If any of the required id or objid properties are missing - and the line is still valid json - then it is interpreted as a comment. You can also use the page parameter in a comment to set the default page for new objects that don't have a page parameter. Example 1: Add a comment on a single line that is ignored. {\"comment\":\" ----------- Page 2 layout ------------\"} Example 2: Set the default page for next object(s) to 3 besides adding a comment as well. {\"page\":3,\"comment\":\" ---- My Awesome Color Picker Layout ----\"} If you then omit the page parameter in the lines below this comment, those objects will appear by default on page 3 . If the line is not valid json, the parsing of the rest of the file is also stopped. Blank Lines ~ Blank lines are allowed for readability and are ignored.","title":"Pages"},{"location":"pages/#pagesjsonl","text":"The location of this file is /pages.jsonl in the root of the filesystem. It uses the JSON Lines format with one json object per line. Each line should contain exactly one valid json object and end with a line-break \\n (not a comma) . The file is interpreted line-by-line . When a malformed line is encountered, the processing of the rest of the file stops. If you are missing objects, check the logs to see which line was processed last. You probably have a typo in the following line which blocks parsing the rest of the file. The complete file in its entirety is not a valid json file. Each individual line however must be a valid json object. The file extension is .jsonl and not .json .","title":"pages.jsonl"},{"location":"pages/#objects","text":"Each line in pages.jsonl creates one object on a page and has to be in the json format. The order of objects dictates the layer on the page from bottom to top. Example Objects {\"page\":2,\"id\":1,\"objid\":12,\"x\":5,\"y\":20,\"h\":50,\"w\":50,\"enabled\":\"true\",\"hidden\":\"false\"} {\"page\":2,\"id\":2,\"objid\":50,\"x\":5,\"y\":120,\"h\":90,\"w\":50,\"enabled\":\"false\",\"hidden\":\"false\"} Once the object is created, you can reference it with p[x].b[y] where x is the page number and y is the id of the object. for example: p[2].b[1].w=100 p[2].b[2].hidden=true","title":"Objects"},{"location":"pages/#comments","text":"If any of the required id or objid properties are missing - and the line is still valid json - then it is interpreted as a comment. You can also use the page parameter in a comment to set the default page for new objects that don't have a page parameter. Example 1: Add a comment on a single line that is ignored. {\"comment\":\" ----------- Page 2 layout ------------\"} Example 2: Set the default page for next object(s) to 3 besides adding a comment as well. {\"page\":3,\"comment\":\" ---- My Awesome Color Picker Layout ----\"} If you then omit the page parameter in the lines below this comment, those objects will appear by default on page 3 . If the line is not valid json, the parsing of the rest of the file is also stopped.","title":"Comments"},{"location":"pages/#blank-lines","text":"Blank lines are allowed for readability and are ignored.","title":"Blank Lines"},{"location":"stm32/","text":"Experimental MCUs ~ Recommended Boards ~ table th:first-of-type { width: 12%; } table th:nth-of-type(2) { width: 22%; } table th:nth-of-type(3) { width: 22%; } table th:nth-of-type(4) { width: 22%; } table th:last-of-type { width: 22%; } Basic Standard Pro Experimental MCU ESP8266 ESP32-WROOM ESP32-WROVER STM32F4 CPU Freq. 80Mhz 240Mhz 240Mhz 168 MHz Ram 80Kb 520Kb 520Kb 192Kb PSRam no no yes no Minimal Flash 4MB 4MB 4MB 512Kb Display ILI9341 SPI ILI9341 SPI ILI9341 SPI ILI9341 FSMC Touch XPT2046 SPI XPT2046 SPI XPT2046 SPI XPT2046 SPI Network Wi-Fi Wi-Fi Wi-Fi Ethernet / Wi-Fi Dev. Board* [D1 mini ESP8266][3] [D1 mini ESP32][4] [TTGO T7 v1.4 Mini32][5] STM32F407VET/ZGT Black Firmware Download Download Download STM32F407xxT Black Combo There are several cheap STM32F407xx Black boards available on the market with a TFT display header and accompanying 3.2\" ILI9341 FSMC screen (320x240). This hardware is experimental and not fully supported. Selection of STM32F407 boards. Make sure to purchase a compatible screen, preferably from the same vendor. There are multiple FSMC interfaces: e.g. One is marked TFT , another is marked New-TFT and a third has no markings. The pinout of each header & display is different and are not interchangeable! You can however use jumper cables instead, but it won't be plug-and-plug anymore. The following boards are being tested: STM32F407VET6 Black (v2.1) with 512 KB flash STM32F407VET6 Black (v2.0 and v2.1) Purchase Links: AliExpress AliExpress AliExpress (! V2.0 !) Documentation can be found on GitHub STM32F407ZGT6 Black (V3.0) with 1 MB flash STM32F407ZGT6 Black (v3.0) Purchase Link: Documentation can be found on GitHub Attention The STM32F4 boards do not have network connectivity. You can use a compatible network adapter and configure it in PlatformIO. Images of STM32 boards are CC BY-NC 4.0 from https://stm32-base.org/","title":"Stm32"},{"location":"stm32/#experimental-mcus","text":"","title":"Experimental MCUs"},{"location":"stm32/#recommended-boards","text":"table th:first-of-type { width: 12%; } table th:nth-of-type(2) { width: 22%; } table th:nth-of-type(3) { width: 22%; } table th:nth-of-type(4) { width: 22%; } table th:last-of-type { width: 22%; } Basic Standard Pro Experimental MCU ESP8266 ESP32-WROOM ESP32-WROVER STM32F4 CPU Freq. 80Mhz 240Mhz 240Mhz 168 MHz Ram 80Kb 520Kb 520Kb 192Kb PSRam no no yes no Minimal Flash 4MB 4MB 4MB 512Kb Display ILI9341 SPI ILI9341 SPI ILI9341 SPI ILI9341 FSMC Touch XPT2046 SPI XPT2046 SPI XPT2046 SPI XPT2046 SPI Network Wi-Fi Wi-Fi Wi-Fi Ethernet / Wi-Fi Dev. Board* [D1 mini ESP8266][3] [D1 mini ESP32][4] [TTGO T7 v1.4 Mini32][5] STM32F407VET/ZGT Black Firmware Download Download Download","title":"Recommended Boards"},{"location":"styling/","text":"Styling Properties You can adjust the appearance of objects by changing the foreground, background and/or border color of each object. Some objects allow for more complex syling, effectively changing its appearance or its sub-components. Colors ~ Color values can be: Short names (from table) RGB hex code ( #rrggbb ) Number format ( 0..65353 ) Short Name Hex Code aqua #00FFFF azure #F0FFFF beige #F5F5DC bisque #FFE4C4 black #000000 blue #0000FF blush #B00000 brown #A52A2A coral #FF7F50 cyan #00FFFF fuchsia #FF00FF gold #FFD700 gray #808080 green #008000 indigo #4B0082 ivory #FFFFF0 khaki #F0E68C lime #00FF00 linen #FAF0E6 maroon #800000 navy #000080 olive #808000 orange #FFA500 orchid #DA70D6 peru #CD853F pink #FFC0CB plum #DDA0DD purple #800080 red #FF0000 salmon #FA8072 sienna #A0522D silver #C0C0C0 snow #FFFAFA tan #D2B48C teal #008080 tomato #FF6347 violet #EE82EE wheat #F5DEB3 white #FFFFFF yellow #FFFF00 Padding and Margin ~ Padding sets the space on the inner sides of the edges. It means \"I don't want my children too close to my sides, so keep this space\". Padding inner sets the \"gap\" between the children. Margin sets the space on the outer side of the edges. It means \"I want this space around me\". Objects use them to set spacing. See the documentation of the objects for the details. Property Type Description Default pad_top int Set the padding on the top 0 pad_bottom int Set the padding on the bottom 0 pad_left int Set the padding on the left 0 pad_right int Set the padding on the right 0 pad_inner int Set the padding inside the object between children 0 margin_top int Set the margin on the top 0 margin_bottom int Set the margin on the bottom 0 margin_left int Set the margin on the left 0 margin_right int Set the margin on the right 0 Background ~ The color and gradient used for drawing the background of an object. Property Type Req. Description Default bg_opa byte no The background opacity level bg_color color no The background color bg_grad_color color no The background gradient color bg_grad_dir [0..2] no 0 = none 1 = horizontal 2 = vertical 0 bg_grad_stop byte no Specifies where the gradient should stop. 0 = at left/top most position 255= at right/bottom most position 255 bg_main_stop byte no Specifies where should the gradient start 0 = at left/top most position 255= at right/bottom most position 0 To adjust the background style of a page use p[x].b[0] where x is the page number. Border ~ The border is drawn on top of the background. It has radius rounding. Property Type Description border_color color Specifies the color of the border border_opa byte Specifies opacity of the border border_width byte Set the width of the border border_side byte Specifies which sides of the border to draw. 0 = none 1 = left 2 = right 4 = top 8 = bottom 15 = full A sum of these values is also possible to select specific sides. border_post bool If true the border will be drawn after all children have been drawn. Shadow ~ The shadow is a blurred area under the object. Property Type Description shadow_color color Specifies the color of the shadow shadow_opa byte Specifies opacity of the shadow shadow_width int16 Set the width (blur size) of the outline shadow_ofs_x int16 Set the an X offset for the shadow shadow_ofs_y int16 Set the an Y offset for the shadow shadow_spread byte make the shadow larger than the background in every direction by this value Value ~ Value is an arbitrary text drawn on top of an object. It can be a lightweight replacement for creating label objects. Property Type Description Default value_str string Text to display. Only the pointer is saved! (Don't use local variable with lv_style_set_value_str, instead use static, global or dynamically allocated data) value_color color Color of the text value_opa byte Opacity level of the text [0-255] value_font byte The Font ID value_letter_space int Letter space of the text value_line_space int Line space of the text value_align align Alignment of the text. Can be: none, left, right, top, bottom, full center value_ofs_x int X offset from the original position of the alignment value_ofs_y int Y offset from the original position of the alignment Text ~ Properties for textual objects only. Property Type Description Default text_color color Color of the text text_opa byte Opacity level of the text [0-255] text_font byte The Font ID text_letter_space int Letter space of the text text_line_space int Line space of the text text_decor byte Add text decoration. 0 = none 1 = underline 2 = strikethrough 3 = underline and strikethrough 0 text_sel_color color Set background color of text selection Line ~ Properties for line objects only. Property Type Description Default line_color color Color of the line line_opa byte Opacity level of the line [0-255] line_width int Width of the line. 0 line_dash_width int Width of dash. Dashing is drawn only for horizontal or vertical lines. 0 = disable dash 0 line_dash_gap int Gap between two dash line. Dashing is drawn only for horizontal or vertical lines. 0 = disable dash 0 line_rounded bool true = draw rounded line endings false","title":"Styling"},{"location":"styling/#colors","text":"Color values can be: Short names (from table) RGB hex code ( #rrggbb ) Number format ( 0..65353 ) Short Name Hex Code aqua #00FFFF azure #F0FFFF beige #F5F5DC bisque #FFE4C4 black #000000 blue #0000FF blush #B00000 brown #A52A2A coral #FF7F50 cyan #00FFFF fuchsia #FF00FF gold #FFD700 gray #808080 green #008000 indigo #4B0082 ivory #FFFFF0 khaki #F0E68C lime #00FF00 linen #FAF0E6 maroon #800000 navy #000080 olive #808000 orange #FFA500 orchid #DA70D6 peru #CD853F pink #FFC0CB plum #DDA0DD purple #800080 red #FF0000 salmon #FA8072 sienna #A0522D silver #C0C0C0 snow #FFFAFA tan #D2B48C teal #008080 tomato #FF6347 violet #EE82EE wheat #F5DEB3 white #FFFFFF yellow #FFFF00","title":"Colors"},{"location":"styling/#padding-and-margin","text":"Padding sets the space on the inner sides of the edges. It means \"I don't want my children too close to my sides, so keep this space\". Padding inner sets the \"gap\" between the children. Margin sets the space on the outer side of the edges. It means \"I want this space around me\". Objects use them to set spacing. See the documentation of the objects for the details. Property Type Description Default pad_top int Set the padding on the top 0 pad_bottom int Set the padding on the bottom 0 pad_left int Set the padding on the left 0 pad_right int Set the padding on the right 0 pad_inner int Set the padding inside the object between children 0 margin_top int Set the margin on the top 0 margin_bottom int Set the margin on the bottom 0 margin_left int Set the margin on the left 0 margin_right int Set the margin on the right 0","title":"Padding and Margin"},{"location":"styling/#background","text":"The color and gradient used for drawing the background of an object. Property Type Req. Description Default bg_opa byte no The background opacity level bg_color color no The background color bg_grad_color color no The background gradient color bg_grad_dir [0..2] no 0 = none 1 = horizontal 2 = vertical 0 bg_grad_stop byte no Specifies where the gradient should stop. 0 = at left/top most position 255= at right/bottom most position 255 bg_main_stop byte no Specifies where should the gradient start 0 = at left/top most position 255= at right/bottom most position 0 To adjust the background style of a page use p[x].b[0] where x is the page number.","title":"Background"},{"location":"styling/#border","text":"The border is drawn on top of the background. It has radius rounding. Property Type Description border_color color Specifies the color of the border border_opa byte Specifies opacity of the border border_width byte Set the width of the border border_side byte Specifies which sides of the border to draw. 0 = none 1 = left 2 = right 4 = top 8 = bottom 15 = full A sum of these values is also possible to select specific sides. border_post bool If true the border will be drawn after all children have been drawn.","title":"Border"},{"location":"styling/#shadow","text":"The shadow is a blurred area under the object. Property Type Description shadow_color color Specifies the color of the shadow shadow_opa byte Specifies opacity of the shadow shadow_width int16 Set the width (blur size) of the outline shadow_ofs_x int16 Set the an X offset for the shadow shadow_ofs_y int16 Set the an Y offset for the shadow shadow_spread byte make the shadow larger than the background in every direction by this value","title":"Shadow"},{"location":"styling/#value","text":"Value is an arbitrary text drawn on top of an object. It can be a lightweight replacement for creating label objects. Property Type Description Default value_str string Text to display. Only the pointer is saved! (Don't use local variable with lv_style_set_value_str, instead use static, global or dynamically allocated data) value_color color Color of the text value_opa byte Opacity level of the text [0-255] value_font byte The Font ID value_letter_space int Letter space of the text value_line_space int Line space of the text value_align align Alignment of the text. Can be: none, left, right, top, bottom, full center value_ofs_x int X offset from the original position of the alignment value_ofs_y int Y offset from the original position of the alignment","title":"Value"},{"location":"styling/#text","text":"Properties for textual objects only. Property Type Description Default text_color color Color of the text text_opa byte Opacity level of the text [0-255] text_font byte The Font ID text_letter_space int Letter space of the text text_line_space int Line space of the text text_decor byte Add text decoration. 0 = none 1 = underline 2 = strikethrough 3 = underline and strikethrough 0 text_sel_color color Set background color of text selection","title":"Text"},{"location":"styling/#line","text":"Properties for line objects only. Property Type Description Default line_color color Color of the line line_opa byte Opacity level of the line [0-255] line_width int Width of the line. 0 line_dash_width int Width of dash. Dashing is drawn only for horizontal or vertical lines. 0 = disable dash 0 line_dash_gap int Gap between two dash line. Dashing is drawn only for horizontal or vertical lines. 0 = disable dash 0 line_rounded bool true = draw rounded line endings false","title":"Line"},{"location":"wifi-setup/","text":"Wi-Fi Setup At first boot, when no Wi-Fi setup is found, the device will create an initial Access Point for configuring the device. If the touchscreen is properly connected it will display a QR code, along with a temporary SSID and password, to connect to the device. Either use the touchscreen interface or connect via a web browser to setup the credentials for your local Wi-Fi access point: Using Touchscreen ~ Tap on the screen to start a Touch Calibration sequence: Precisely touch the 4 corners as indicated Use the on-screen keyboard to enter your local SSID and password Tap on the Checkmark button in the lower righthand corner to save the settings The device will validate the entered credentials and reboot if they are correct. Using Wi-Fi Access-Point ~ Connect to the temporary Access Point by scanning the QR on the display, if available. Or Check the serial log for the SSID and password to connect. Browse to http://192.168.4.1 Enter your local SSID and password for joining the device to your wireless network Click Save Settings The device will automatically reboot and connect to your wireless LAN Using Command line ~ You can also directly configure the Wi-Fi settings via the serial console: ssid myAccessPointName pass myWifiPassword reboot To skip this step, Wi-Fi credentials can be saved into the .bin file when you compile the firmware yourself. Rename user_config_override-template.h to user_config_override.h , enter your credentials and use flag -DUSE_CONFIG_OVERRIDE when compiling","title":"Wi-Fi Setup"},{"location":"wifi-setup/#using-touchscreen","text":"Tap on the screen to start a Touch Calibration sequence: Precisely touch the 4 corners as indicated Use the on-screen keyboard to enter your local SSID and password Tap on the Checkmark button in the lower righthand corner to save the settings The device will validate the entered credentials and reboot if they are correct.","title":"Using Touchscreen"},{"location":"wifi-setup/#using-wi-fi-access-point","text":"Connect to the temporary Access Point by scanning the QR on the display, if available. Or Check the serial log for the SSID and password to connect. Browse to http://192.168.4.1 Enter your local SSID and password for joining the device to your wireless network Click Save Settings The device will automatically reboot and connect to your wireless LAN","title":"Using Wi-Fi Access-Point"},{"location":"wifi-setup/#using-command-line","text":"You can also directly configure the Wi-Fi settings via the serial console: ssid myAccessPointName pass myWifiPassword reboot To skip this step, Wi-Fi credentials can be saved into the .bin file when you compile the firmware yourself. Rename user_config_override-template.h to user_config_override.h , enter your credentials and use flag -DUSE_CONFIG_OVERRIDE when compiling","title":"Using Command line"},{"location":"configuration/debug/","text":"Debug Settings ~ Web UI ~ With the upload function you can upload 2 types of files * .jsonl This file contains the layout for the pages See 'pages' section for more information on this file * .zi These are font files used in the Nextion/TJC HMI disp. Serial Speed ~ Select one of the built-in themes to select the general style for the HASP interface. With the Hue slider you can select the base color for the built-in theme. Syslog Server ~ Enter the filename of the .jsonl you have uploaded to enables the layout on startup. Syslog Port ~ Select to what page the display should switch on startup. Syslog Protocol ~ Select the brightness level of the display on startup. Please note that the display must support dim feature and GPIO for dim is set in display setup. Click 'Save Settings' to save you settings to the device. A restart is required to make the settings active. Navigate back to the Main Menu and click Restart to activate the settings.","title":"Debug Settings"},{"location":"configuration/debug/#debug-settings","text":"","title":"Debug Settings"},{"location":"configuration/debug/#web-ui","text":"With the upload function you can upload 2 types of files * .jsonl This file contains the layout for the pages See 'pages' section for more information on this file * .zi These are font files used in the Nextion/TJC HMI disp.","title":"Web UI"},{"location":"configuration/debug/#serial-speed","text":"Select one of the built-in themes to select the general style for the HASP interface. With the Hue slider you can select the base color for the built-in theme.","title":"Serial Speed"},{"location":"configuration/debug/#syslog-server","text":"Enter the filename of the .jsonl you have uploaded to enables the layout on startup.","title":"Syslog Server"},{"location":"configuration/debug/#syslog-port","text":"Select to what page the display should switch on startup.","title":"Syslog Port"},{"location":"configuration/debug/#syslog-protocol","text":"Select the brightness level of the display on startup. Please note that the display must support dim feature and GPIO for dim is set in display setup. Click 'Save Settings' to save you settings to the device. A restart is required to make the settings active. Navigate back to the Main Menu and click Restart to activate the settings.","title":"Syslog Protocol"},{"location":"configuration/display/","text":"Display Settings ~ Define the overal settings of the display driver. Web UI ~ Short Idle ~ When the display has not been touched for the Short Idle amount of seconds, an idle = SHORT event will be sent out. Long Idle ~ When the display has not been touched for Long + Short Idle amount of seconds, an idle = LONG event will be sent out. The Long Idle period begins to count after the Short Idle period. Orientation ~ Rotate the display by the set number of degrees and optionally mirror the display as well. Show Pointer ~ Enable this option to show a mouse pointer. This helps with checking if the touches are correctly detected. Backlight Control ~ Sets the GPIO pin which is used for PWM dimming of the backlight. Calibrate ~ Only available with XPT2046 resistive touchscreen controllers. Starts an onscreen calibration sequence. Click 'Save Settings' to save you settings to the device. A restart is required to make the settings active. Navigate back to the Main Menu and click Restart to activate the settings.","title":"Display Settings"},{"location":"configuration/display/#display-settings","text":"Define the overal settings of the display driver.","title":"Display Settings"},{"location":"configuration/display/#web-ui","text":"","title":"Web UI"},{"location":"configuration/display/#short-idle","text":"When the display has not been touched for the Short Idle amount of seconds, an idle = SHORT event will be sent out.","title":"Short Idle"},{"location":"configuration/display/#long-idle","text":"When the display has not been touched for Long + Short Idle amount of seconds, an idle = LONG event will be sent out. The Long Idle period begins to count after the Short Idle period.","title":"Long Idle"},{"location":"configuration/display/#orientation","text":"Rotate the display by the set number of degrees and optionally mirror the display as well.","title":"Orientation"},{"location":"configuration/display/#show-pointer","text":"Enable this option to show a mouse pointer. This helps with checking if the touches are correctly detected.","title":"Show Pointer"},{"location":"configuration/display/#backlight-control","text":"Sets the GPIO pin which is used for PWM dimming of the backlight.","title":"Backlight Control"},{"location":"configuration/display/#calibrate","text":"Only available with XPT2046 resistive touchscreen controllers. Starts an onscreen calibration sequence. Click 'Save Settings' to save you settings to the device. A restart is required to make the settings active. Navigate back to the Main Menu and click Restart to activate the settings.","title":"Calibrate"},{"location":"configuration/gpio/","text":"GPIO Settings ~ Web UI ~ You can configure the general look and feel for the interface by uploading you favorite fonts and selecting your favorite theme and color. Click 'Save Settings' to save you settings to the device. A restart is required to make the settings active. Navigate back to the Main Menu and click Restart to activate the settings.","title":"GPIO Settings"},{"location":"configuration/gpio/#gpio-settings","text":"","title":"GPIO Settings"},{"location":"configuration/gpio/#web-ui","text":"You can configure the general look and feel for the interface by uploading you favorite fonts and selecting your favorite theme and color. Click 'Save Settings' to save you settings to the device. A restart is required to make the settings active. Navigate back to the Main Menu and click Restart to activate the settings.","title":"Web UI"},{"location":"configuration/hasp/","text":"HASP Settings ~ You can configure the general look and feel for the interface by uploading you favorite fonts and selecting your favorite theme and color. Web UI ~ Upload With the upload function you can upload 2 types of files * .jsonl This file contains the layout for the pages See 'pages' section for more information on this file * .zi These are font files used in the Nextion/TJC HMI disp. UI Theme and Hue Select one of the built-in themes to select the general style for the HASP interface. With the Hue slider you can select the base color for the built-in theme. Startup layout Enter the filename of the .jsonl you have uploaded to enables the layout on startup. Startup Page Select to what page the display should switch on startup. Startup brightness Select the brightness level of the display on startup. Please note that the display must support dim feature and GPIO for dim is set in display setup. Click 'Save Settings' to save you settings to the device. A restart is required to make the settings active. Navigate back to the Main Menu and click Restart to activate the settings.","title":"HASP Settings"},{"location":"configuration/hasp/#hasp-settings","text":"You can configure the general look and feel for the interface by uploading you favorite fonts and selecting your favorite theme and color.","title":"HASP Settings"},{"location":"configuration/hasp/#web-ui","text":"","title":"Web UI"},{"location":"configuration/http/","text":"HTTP Settings ~ To restrict access to the web user interface you can set a Username and Password. Web UI ~ Click 'Save Settings' to activate immediately. If the username and/or password have been changed you need to enter the new values. Note Please note that all http communication is unencrypted and that this is only a simple security measure","title":"HTTP Settings"},{"location":"configuration/http/#http-settings","text":"To restrict access to the web user interface you can set a Username and Password.","title":"HTTP Settings"},{"location":"configuration/http/#web-ui","text":"Click 'Save Settings' to activate immediately. If the username and/or password have been changed you need to enter the new values. Note Please note that all http communication is unencrypted and that this is only a simple security measure","title":"Web UI"},{"location":"configuration/mqtt/","text":"MQTT Settings ~ All communication between HASP Open Display and your Home Automation service is done over MQTT. You will need an already working MQTT Broker. If you do not know what MQTT is you can find more about the protocol on MQTT Essentials Web UI ~ HASP Node Name ~ The Node Name is the unique identifier of your device on your MQTT Broker. For example, setting the Node Name to plate35 will make the device listen and communicate on the main topic hasp/plate35/ Group Name ~ The Group Name is the unique identifier for a Group of devices. For example, the default Group Name is plates . This will make all devices in this group listen on the main topic hasp/plates/ This way you can send a command to all devices in the group at the same moment. Each devices will only respond on their own main Node Name topic. MQTT Broker ~ Set the IP or hostname of your MQTT Broker MQTT Port ~ Set the port for your MQTT Broker MQTT User and Password ~ Enter credentials if your MQTT Broker requires a Username and Password. Click 'Save Settings' to save you settings to the device. A restart is required to make the settings active. Navigate back to the Main Menu and click Restart to activate the settings. Commandline ~ You can also configure the mqtt settings via the serial or telnet console: hostname myPlateName mqtthost 192.168.0.123 mqttport 1883 mqttuser myUsername mqttpass myPassword reboot","title":"MQTT Settings"},{"location":"configuration/mqtt/#mqtt-settings","text":"All communication between HASP Open Display and your Home Automation service is done over MQTT. You will need an already working MQTT Broker. If you do not know what MQTT is you can find more about the protocol on MQTT Essentials","title":"MQTT Settings"},{"location":"configuration/mqtt/#web-ui","text":"","title":"Web UI"},{"location":"configuration/mqtt/#hasp-node-name","text":"The Node Name is the unique identifier of your device on your MQTT Broker. For example, setting the Node Name to plate35 will make the device listen and communicate on the main topic hasp/plate35/","title":"HASP Node Name"},{"location":"configuration/mqtt/#group-name","text":"The Group Name is the unique identifier for a Group of devices. For example, the default Group Name is plates . This will make all devices in this group listen on the main topic hasp/plates/ This way you can send a command to all devices in the group at the same moment. Each devices will only respond on their own main Node Name topic.","title":"Group Name"},{"location":"configuration/mqtt/#mqtt-broker","text":"Set the IP or hostname of your MQTT Broker","title":"MQTT Broker"},{"location":"configuration/mqtt/#mqtt-port","text":"Set the port for your MQTT Broker","title":"MQTT Port"},{"location":"configuration/mqtt/#mqtt-user-and-password","text":"Enter credentials if your MQTT Broker requires a Username and Password. Click 'Save Settings' to save you settings to the device. A restart is required to make the settings active. Navigate back to the Main Menu and click Restart to activate the settings.","title":"MQTT User and Password"},{"location":"configuration/mqtt/#commandline","text":"You can also configure the mqtt settings via the serial or telnet console: hostname myPlateName mqtthost 192.168.0.123 mqttport 1883 mqttuser myUsername mqttpass myPassword reboot","title":"Commandline"},{"location":"configuration/wifi/","text":"Wifi Settings ~ When using a wireless network adapter, you need to configure the SSID to connect. Web UI ~ SSID ~ The name of the access point to connect to. Password ~ Optional password for the access point, if required. Click 'Save Settings' to save you settings to the device. A restart is required to make the settings active. Navigate back to the Main Menu and click Restart to activate the settings. Commandline ~ You can also configure the wifi settings via the serial or telnet console: ssid myAccessPointName pass myWifiPassword reboot","title":"Wifi Settings"},{"location":"configuration/wifi/#wifi-settings","text":"When using a wireless network adapter, you need to configure the SSID to connect.","title":"Wifi Settings"},{"location":"configuration/wifi/#web-ui","text":"","title":"Web UI"},{"location":"configuration/wifi/#ssid","text":"The name of the access point to connect to.","title":"SSID"},{"location":"configuration/wifi/#password","text":"Optional password for the access point, if required. Click 'Save Settings' to save you settings to the device. A restart is required to make the settings active. Navigate back to the Main Menu and click Restart to activate the settings.","title":"Password"},{"location":"configuration/wifi/#commandline","text":"You can also configure the wifi settings via the serial or telnet console: ssid myAccessPointName pass myWifiPassword reboot","title":"Commandline"},{"location":"displays/ILI9341_IPS/","text":"ILI9341 IPS Panel A 240x320 IPS TFT display with an ILI9341 controller and XPT2046 touch controller. Improvement over TN versions of the display with amazing view angles. Pin Configuration ~ Pin Function ESP Pin Config Name Display Pin 1 Module Ground GND GND 2 Module Power 3.3v 3V3 VCC 3 SPI Clock GPIO19 TFT_SCLK CLK 4 Data Input GPIO23 TFT_MOSI MOSI 5 LCD Reset line GPIO15 TFT_RST RES 6 Data Command control GPIO5 TFT_DC DC 7 Backlight GPIO21 TFT_BCKL BLK 8 Data Output GPIO19 TFT_MISO MISO 9 Chip Select GPIO26 TFT_CS CS1 10 Touch Select GPIO22 TOUCH_CS CS2 11 Touch Interrupt SPI MISO, MOSI and SCLK are shared between the touch controller and the LCD controller. Custom build ~ Define a custom environment in platformio_override.ini and add a new esp32_ili9341_spi entry under extra_default_envs = If you've wired pins differently, change the values below. ;-- ILI9341 SPI version ------------------------ [env:esp32_ili9341_spi] platform = espressif32 platform_packages = framework-arduinoespressif32 framework = arduino board = esp32dev monitor_port = COM4 upload_port = ${env:esp32_ili9341_spi.monitor_port} monitor_filters = esp32_exception_decoder board_build.partitions = user_setups/esp32_partition_app1300k_spiffs1216k.csv build_flags = ${env.build_flags} ${esp32.build_flags} -D ILI9341_DRIVER=1 -D TFT_WIDTH=240 -D TFT_HEIGHT=320 -D TFT_ROTATION=0 ; see TFT_ROTATION values -D TFT_INVERSION_ON ; to fix colors -D SPI_FREQUENCY=80000000 -D SPI_TOUCH_FREQUENCY=2500000 -D SPI_READ_FREQUENCY=20000000 -D USER_SETUP_LOADED=1 -D TOUCH_DRIVER=2046 ; XPT2046 Resistive SPI touch panel driver -D SUPPORT_TRANSACTIONS ${esp32.vspi} ; Use VSPI hardware SPI bus: ; TFT_MISO=19 | TFT_MOSI=23 | TFT_SCLK=18 ; MISO = 8 | MOSI = 4 | CLK = 3 ; wiring recommendations, change pins according to your wiring -D TFT_DC=5 ; DC, lcd pin 3 -D TFT_RST=15 ; RES, lcd pin 5 -D TFT_BCKL=-1 ; BLK, lcd pin 7 (configurable via web UI (e.g. 21)) -D TFT_CS=26 ; CS1, lcd pin 9 -D TOUCH_CS=22 ; CS2, lcd pin 10 lib_deps = ${env.lib_deps} ${esp32.lib_deps} lib_ignore = ${env.lib_ignore} ${esp32.lib_ignore} extra_scripts = ${env.extra_scripts} ${esp32.extra_scripts}","title":"ILI9341 IPS"},{"location":"displays/ILI9341_IPS/#pin-configuration","text":"Pin Function ESP Pin Config Name Display Pin 1 Module Ground GND GND 2 Module Power 3.3v 3V3 VCC 3 SPI Clock GPIO19 TFT_SCLK CLK 4 Data Input GPIO23 TFT_MOSI MOSI 5 LCD Reset line GPIO15 TFT_RST RES 6 Data Command control GPIO5 TFT_DC DC 7 Backlight GPIO21 TFT_BCKL BLK 8 Data Output GPIO19 TFT_MISO MISO 9 Chip Select GPIO26 TFT_CS CS1 10 Touch Select GPIO22 TOUCH_CS CS2 11 Touch Interrupt SPI MISO, MOSI and SCLK are shared between the touch controller and the LCD controller.","title":"Pin Configuration"},{"location":"displays/ILI9341_IPS/#custom-build","text":"Define a custom environment in platformio_override.ini and add a new esp32_ili9341_spi entry under extra_default_envs = If you've wired pins differently, change the values below. ;-- ILI9341 SPI version ------------------------ [env:esp32_ili9341_spi] platform = espressif32 platform_packages = framework-arduinoespressif32 framework = arduino board = esp32dev monitor_port = COM4 upload_port = ${env:esp32_ili9341_spi.monitor_port} monitor_filters = esp32_exception_decoder board_build.partitions = user_setups/esp32_partition_app1300k_spiffs1216k.csv build_flags = ${env.build_flags} ${esp32.build_flags} -D ILI9341_DRIVER=1 -D TFT_WIDTH=240 -D TFT_HEIGHT=320 -D TFT_ROTATION=0 ; see TFT_ROTATION values -D TFT_INVERSION_ON ; to fix colors -D SPI_FREQUENCY=80000000 -D SPI_TOUCH_FREQUENCY=2500000 -D SPI_READ_FREQUENCY=20000000 -D USER_SETUP_LOADED=1 -D TOUCH_DRIVER=2046 ; XPT2046 Resistive SPI touch panel driver -D SUPPORT_TRANSACTIONS ${esp32.vspi} ; Use VSPI hardware SPI bus: ; TFT_MISO=19 | TFT_MOSI=23 | TFT_SCLK=18 ; MISO = 8 | MOSI = 4 | CLK = 3 ; wiring recommendations, change pins according to your wiring -D TFT_DC=5 ; DC, lcd pin 3 -D TFT_RST=15 ; RES, lcd pin 5 -D TFT_BCKL=-1 ; BLK, lcd pin 7 (configurable via web UI (e.g. 21)) -D TFT_CS=26 ; CS1, lcd pin 9 -D TOUCH_CS=22 ; CS2, lcd pin 10 lib_deps = ${env.lib_deps} ${esp32.lib_deps} lib_ignore = ${env.lib_ignore} ${esp32.lib_ignore} extra_scripts = ${env.extra_scripts} ${esp32.extra_scripts}","title":"Custom build"},{"location":"displays/MHS4001/","text":"MHS4001 6 GPIOs are required to drive the SPI display. One additional GPIO is needed for the XPT2046 touch sensor. Including the Vcc and Gnd pins, a total of 12 connections need to be made to the MCU: Pin Configuration ~ Pin Function ESP32 Pin Config Name Display Pin 1 Module Power 3.3V 3.3V 3.3V 2 Module Power 5v 5V 5V 3 Not connected NC 4 LED Backlight PWM 5V TFT_BCKL 5V 5-10 Not connected NC 11 Touch Interrupt NC TP_IRQ 12-13 Not connected NC 14 Module Ground GND GND 15-16 Not connected NC 17 Module Power 3.3V 3.3V 18 Data Command control pin GPIO4 TFT_DC LCD_RS 19 SPI Master Out Slave In GPIO23 TFT_MOSI LCD/SI/TP_SI 20 Not connected NC 21 Touch Panel Slave Out GPIO19 TFT_MISO TP_SO 22 LCD Reset pin GPIO32 TFT_RST RST 23 SPI Clock GPIO18 TFT_SCLK LCD_SCK/TP_SCK 24 Chip select control pin GPIO15 TFT_CS LCD_CS 25 Module Ground GND GND 26 Touch Chip Select GPIO22 TOUCH_CS TP_CS By default, pin 4 is normally connected to 5V. This turns the display backlight LED on all time. In order to control the backlight you can drive pin 4 of the display using a PNP transistor. The electronics circuit needed is not part of this diagram. SPI MISO, MOSI and SCLK are shared between the touch controller and the LCD controller. LCD Configuration ~ The lcd_config.ini file specifies the different properties of the display, except for the actual pin configuration: raspberrypi = -D RPI_DISPLAY_TYPE=1 -D ST7796_DRIVER=1 -D TFT_WIDTH=320 -D TFT_HEIGHT=480 -D TFT_ROTATION=0 ; 0=0, 1=90, 2=180 or 3=270 degree -D SPI_FREQUENCY=80000000 -D SPI_TOUCH_FREQUENCY=2500000 -D USER_SETUP_LOADED=1 -D TOUCH_DRIVER=2046 ; XPT2046 Resistive touch panel driver -D SUPPORT_TRANSACTIONS HASP build_flags ~ Specify the LCD Configuration to use and define the 7 GPIOs in the environment build flags: build_flags = ${flags.esp32_flags} ; -- TFT_eSPI build options ------------------------ ${lcd.raspberrypi} ${esp32.vspi} ; Use VSPI hardware SPI bus -D TFT_CS=15 -D TFT_DC=4 -D TFT_RST=32 -D TFT_BCKL=-1 ; None -D TOUCH_CS=22","title":"MHS4001"},{"location":"displays/MHS4001/#pin-configuration","text":"Pin Function ESP32 Pin Config Name Display Pin 1 Module Power 3.3V 3.3V 3.3V 2 Module Power 5v 5V 5V 3 Not connected NC 4 LED Backlight PWM 5V TFT_BCKL 5V 5-10 Not connected NC 11 Touch Interrupt NC TP_IRQ 12-13 Not connected NC 14 Module Ground GND GND 15-16 Not connected NC 17 Module Power 3.3V 3.3V 18 Data Command control pin GPIO4 TFT_DC LCD_RS 19 SPI Master Out Slave In GPIO23 TFT_MOSI LCD/SI/TP_SI 20 Not connected NC 21 Touch Panel Slave Out GPIO19 TFT_MISO TP_SO 22 LCD Reset pin GPIO32 TFT_RST RST 23 SPI Clock GPIO18 TFT_SCLK LCD_SCK/TP_SCK 24 Chip select control pin GPIO15 TFT_CS LCD_CS 25 Module Ground GND GND 26 Touch Chip Select GPIO22 TOUCH_CS TP_CS By default, pin 4 is normally connected to 5V. This turns the display backlight LED on all time. In order to control the backlight you can drive pin 4 of the display using a PNP transistor. The electronics circuit needed is not part of this diagram. SPI MISO, MOSI and SCLK are shared between the touch controller and the LCD controller.","title":"Pin Configuration"},{"location":"displays/MHS4001/#lcd-configuration","text":"The lcd_config.ini file specifies the different properties of the display, except for the actual pin configuration: raspberrypi = -D RPI_DISPLAY_TYPE=1 -D ST7796_DRIVER=1 -D TFT_WIDTH=320 -D TFT_HEIGHT=480 -D TFT_ROTATION=0 ; 0=0, 1=90, 2=180 or 3=270 degree -D SPI_FREQUENCY=80000000 -D SPI_TOUCH_FREQUENCY=2500000 -D USER_SETUP_LOADED=1 -D TOUCH_DRIVER=2046 ; XPT2046 Resistive touch panel driver -D SUPPORT_TRANSACTIONS","title":"LCD Configuration"},{"location":"displays/MHS4001/#hasp-build_flags","text":"Specify the LCD Configuration to use and define the 7 GPIOs in the environment build flags: build_flags = ${flags.esp32_flags} ; -- TFT_eSPI build options ------------------------ ${lcd.raspberrypi} ${esp32.vspi} ; Use VSPI hardware SPI bus -D TFT_CS=15 -D TFT_DC=4 -D TFT_RST=32 -D TFT_BCKL=-1 ; None -D TOUCH_CS=22","title":"HASP build_flags"},{"location":"displays/MRB3511/","text":"MRB3511 14 GPIOs are required to drive the 8-bit parallel display. Another 3 GPIOs are needed for the I\u00b2C touch sensor. Including the Vcc, Gnd an Rst pins, a total of 23 connections need to be made to the MCU: Pin Configuration ~ Pin Function ESP32 Pin Config Name Display Pin 1 Chip select control pin GPIO33 TFT_CS CS 2 Data Command control pin GPIO15 TFT_DC RS 3 Write control pin GPIO04 TFT_WR WR 4 Read control pin GPIO02 TFT_RD RD 5 LCD Reset pin GPIO32 TFT_RST RST 6 GPIO12 TFT_D0 D0 7 GPIO13 TFT_D1 D1 8 GPIO26 TFT_D2 D2 9 8-bit parallel data GPIO25 TFT_D3 D3 10 GPIO17 TFT_D4 D4 11 GPIO16 TFT_D5 D5 12 GPIO27 TFT_D6 D6 13 GPIO14 TFT_D7 D7 14-21 Not used, don't connect NC D8-15 22 Module Ground GND GND 23 LED Backlight PWM GPIO5 TFT_BCKL BL 24-25 Module Power - VDD 26-27 Module Ground GND GND 28-29 Not connected NC 30 IO, I\u00b2C SDA GPIO21 TOUCH_SDA SDA 31 Touch Chip Interrupt GPIO34 TOUCH_IRQ INT 32 Not connected NC 33 Touch IC Reset 3.3V CRST 34 IO, I\u00b2C SCL GPIO22 TOUCH_SCL SCL You need to desolder the 0R resistor on the back side of the panel from the 16-bit position. Then solder back the 0R resistor in the 8-bit position. There are no pins shared between the touch controller and the LCD controller. LCD Configuration ~ The lcd_config.ini file specifies the different properties of the display, except for the actual pin configuration: mrb3511 = -D ESP32_PARALLEL=1 -D ILI9488_DRIVER=1 -D TFT_WIDTH=320 -D TFT_HEIGHT=480 -D TFT_ROTATION=0 ; 0=0, 1=90, 2=180 or 3=270 degree -D USER_SETUP_LOADED=1 -D TOUCH_DRIVER=911 ; GT911 Capacitive touch panel driver -D SUPPORT_TRANSACTIONS HASP build_flags ~ Specify the LCD Configuration to use and define the 17 GPIOs in the environment build flags: build_flags = ${flags.esp32_flags} ; -- TFT_eSPI build options ------------------------ ${lcd.mrb3511} -D TFT_BCKL=5 ;None, configurable via web UI (e.g. 2 for D4) -D TFT_CS=33 ; Chip select control pin -D TFT_DC=15 ; =RS; Data Command control pin - must use a pin in the range 0-31 -D TFT_RST=32 ; Reset pin -D TFT_WR=4 ; Write strobe control pin - must use a pin in the range 0-31 -D TFT_RD=2 -D TFT_D0=12 ; Must use pins in the range 0-31 for the data bus -D TFT_D1=13 ; so a single register write sets/clears all bits -D TFT_D2=26 -D TFT_D3=25 -D TFT_D4=17 -D TFT_D5=16 -D TFT_D6=27 -D TFT_D7=14 -D TOUCH_SDA=21 -D TOUCH_SCL=22 -D TOUCH_IRQ=34 ; use 34-39 as these are input only pins -D TOUCH_RST=-1 ; not used, connected to 3.3V","title":"MRB3511"},{"location":"displays/MRB3511/#pin-configuration","text":"Pin Function ESP32 Pin Config Name Display Pin 1 Chip select control pin GPIO33 TFT_CS CS 2 Data Command control pin GPIO15 TFT_DC RS 3 Write control pin GPIO04 TFT_WR WR 4 Read control pin GPIO02 TFT_RD RD 5 LCD Reset pin GPIO32 TFT_RST RST 6 GPIO12 TFT_D0 D0 7 GPIO13 TFT_D1 D1 8 GPIO26 TFT_D2 D2 9 8-bit parallel data GPIO25 TFT_D3 D3 10 GPIO17 TFT_D4 D4 11 GPIO16 TFT_D5 D5 12 GPIO27 TFT_D6 D6 13 GPIO14 TFT_D7 D7 14-21 Not used, don't connect NC D8-15 22 Module Ground GND GND 23 LED Backlight PWM GPIO5 TFT_BCKL BL 24-25 Module Power - VDD 26-27 Module Ground GND GND 28-29 Not connected NC 30 IO, I\u00b2C SDA GPIO21 TOUCH_SDA SDA 31 Touch Chip Interrupt GPIO34 TOUCH_IRQ INT 32 Not connected NC 33 Touch IC Reset 3.3V CRST 34 IO, I\u00b2C SCL GPIO22 TOUCH_SCL SCL You need to desolder the 0R resistor on the back side of the panel from the 16-bit position. Then solder back the 0R resistor in the 8-bit position. There are no pins shared between the touch controller and the LCD controller.","title":"Pin Configuration"},{"location":"displays/MRB3511/#lcd-configuration","text":"The lcd_config.ini file specifies the different properties of the display, except for the actual pin configuration: mrb3511 = -D ESP32_PARALLEL=1 -D ILI9488_DRIVER=1 -D TFT_WIDTH=320 -D TFT_HEIGHT=480 -D TFT_ROTATION=0 ; 0=0, 1=90, 2=180 or 3=270 degree -D USER_SETUP_LOADED=1 -D TOUCH_DRIVER=911 ; GT911 Capacitive touch panel driver -D SUPPORT_TRANSACTIONS","title":"LCD Configuration"},{"location":"displays/MRB3511/#hasp-build_flags","text":"Specify the LCD Configuration to use and define the 17 GPIOs in the environment build flags: build_flags = ${flags.esp32_flags} ; -- TFT_eSPI build options ------------------------ ${lcd.mrb3511} -D TFT_BCKL=5 ;None, configurable via web UI (e.g. 2 for D4) -D TFT_CS=33 ; Chip select control pin -D TFT_DC=15 ; =RS; Data Command control pin - must use a pin in the range 0-31 -D TFT_RST=32 ; Reset pin -D TFT_WR=4 ; Write strobe control pin - must use a pin in the range 0-31 -D TFT_RD=2 -D TFT_D0=12 ; Must use pins in the range 0-31 for the data bus -D TFT_D1=13 ; so a single register write sets/clears all bits -D TFT_D2=26 -D TFT_D3=25 -D TFT_D4=17 -D TFT_D5=16 -D TFT_D6=27 -D TFT_D7=14 -D TOUCH_SDA=21 -D TOUCH_SCL=22 -D TOUCH_IRQ=34 ; use 34-39 as these are input only pins -D TOUCH_RST=-1 ; not used, connected to 3.3V","title":"HASP build_flags"},{"location":"displays/Waveshare_40RPi_LCD%28C%29/","text":"Waveshare 4.0\" RPi LCD (C) 6 GPIOs are required to drive the SPI display. One additional GPIO is needed for the XPT2046 touch sensor and one extra GPIO for backlight dimming. Including the VCC and GND pins, a total of 13 connections need to be made to the MCU: Pin Configuration ~ Pin Function ESP32 Pin Config Name Display Pin 1 Module Power 3.3V 3.3V 3.3V 2 Module Power 5v 5V 5V 3 Not connected NC 4 5V 5-10 Not connected NC 11 Touch Interrupt NC TP_IRQ 12 (*) LED Backlight PWM TFT_BCKL LCD_LED 13 Not connected NC 14 Module Ground GND GND 15-16 Not connected NC 17 Module Power 3.3V 3.3V 18 Data Command control pin GPIO4 TFT_DC LCD_RS 19 SPI Master Out Slave In GPIO23 TFT_MOSI LCD/SI/TP_SI 20 Not connected NC 21 Touch Panel Slave Out GPIO19 TFT_MISO TP_SO 22 LCD Reset pin GPIO32 TFT_RST RST 23 SPI Clock GPIO18 TFT_SCLK LCD_SCK/TP_SCK 24 Chip select control pin GPIO15 TFT_CS LCD_CS 25 Module Ground GND GND 26 Touch Chip Select GPIO22 TOUCH_CS TP_CS Warning Only the WaveShare 4.0\" RPi LCD Revision C has a solder jumper on the back to enable PWM backlight dimming. Other revisions of this board do not have this feature. SPI MISO, MOSI and SCLK are shared between the touch controller and the LCD controller. LCD Configuration ~ The lcd_config.ini file specifies the different properties of the display, except for the actual pin configuration: raspberrypi = -D RPI_DISPLAY_TYPE=1 -D ST7796_DRIVER=1 -D TFT_WIDTH=320 -D TFT_HEIGHT=480 -D TFT_ROTATION=0 ; 0=0, 1=90, 2=180 or 3=270 degree -D SPI_FREQUENCY=80000000 -D SPI_TOUCH_FREQUENCY=2500000 -D USER_SETUP_LOADED=1 -D TOUCH_DRIVER=2046 ; XPT2046 Resistive touch panel driver -D SUPPORT_TRANSACTIONS HASP build_flags ~ Specify the LCD Configuration to use and define the 7 GPIOs in the environment build flags: build_flags = ${flags.esp32_flags} ; -- TFT_eSPI build options ------------------------ ${lcd.raspberrypi} ${esp32.vspi} ; Use VSPI hardware SPI bus -D TFT_CS=15 -D TFT_DC=4 -D TFT_RST=32 -D TFT_BCKL=-1 ; None, configurable via web UI (e.g. 21) -D TOUCH_CS=22","title":"Waveshare 40RPi LCD(C)"},{"location":"displays/Waveshare_40RPi_LCD%28C%29/#pin-configuration","text":"Pin Function ESP32 Pin Config Name Display Pin 1 Module Power 3.3V 3.3V 3.3V 2 Module Power 5v 5V 5V 3 Not connected NC 4 5V 5-10 Not connected NC 11 Touch Interrupt NC TP_IRQ 12 (*) LED Backlight PWM TFT_BCKL LCD_LED 13 Not connected NC 14 Module Ground GND GND 15-16 Not connected NC 17 Module Power 3.3V 3.3V 18 Data Command control pin GPIO4 TFT_DC LCD_RS 19 SPI Master Out Slave In GPIO23 TFT_MOSI LCD/SI/TP_SI 20 Not connected NC 21 Touch Panel Slave Out GPIO19 TFT_MISO TP_SO 22 LCD Reset pin GPIO32 TFT_RST RST 23 SPI Clock GPIO18 TFT_SCLK LCD_SCK/TP_SCK 24 Chip select control pin GPIO15 TFT_CS LCD_CS 25 Module Ground GND GND 26 Touch Chip Select GPIO22 TOUCH_CS TP_CS Warning Only the WaveShare 4.0\" RPi LCD Revision C has a solder jumper on the back to enable PWM backlight dimming. Other revisions of this board do not have this feature. SPI MISO, MOSI and SCLK are shared between the touch controller and the LCD controller.","title":"Pin Configuration"},{"location":"displays/Waveshare_40RPi_LCD%28C%29/#lcd-configuration","text":"The lcd_config.ini file specifies the different properties of the display, except for the actual pin configuration: raspberrypi = -D RPI_DISPLAY_TYPE=1 -D ST7796_DRIVER=1 -D TFT_WIDTH=320 -D TFT_HEIGHT=480 -D TFT_ROTATION=0 ; 0=0, 1=90, 2=180 or 3=270 degree -D SPI_FREQUENCY=80000000 -D SPI_TOUCH_FREQUENCY=2500000 -D USER_SETUP_LOADED=1 -D TOUCH_DRIVER=2046 ; XPT2046 Resistive touch panel driver -D SUPPORT_TRANSACTIONS","title":"LCD Configuration"},{"location":"displays/Waveshare_40RPi_LCD%28C%29/#hasp-build_flags","text":"Specify the LCD Configuration to use and define the 7 GPIOs in the environment build flags: build_flags = ${flags.esp32_flags} ; -- TFT_eSPI build options ------------------------ ${lcd.raspberrypi} ${esp32.vspi} ; Use VSPI hardware SPI bus -D TFT_CS=15 -D TFT_DC=4 -D TFT_RST=32 -D TFT_BCKL=-1 ; None, configurable via web UI (e.g. 21) -D TOUCH_CS=22","title":"HASP build_flags"}]}