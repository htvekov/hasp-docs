{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"HASP - Open Hardware edition Control your home-automation devices from a customizable touchscreen UI connected via MQTT. hasp-lvgl is a re-implementation of the popular HASwitchPlate sketch created by aderusha. The original HASwitchPlate project uses a Wemos D1 mini and requires a Nextion/TJC HMI display. This rewrite removes the Nextion/TJC requirement by using the Light and Versatile Graphics Library on the MCU to drive a cheap commodity display. This project also adds ESP32 and STM32F4 support to take advantage of the additional hardware capabilities. Demo Screens ~ Features ~ Feature ESP8266 ESP32 STM32F4 SPI display yes yes yes Parallel display no yes yes PWM Screen dimming yes yes yes Maximum Page Count 4 12 12 Object Types / Widgets 14 15 15 Dynamic Objects yes yes yes Theme Support yes yes yes Custom .zi V5 font yes (latin1) yes (latin1) no FontAwesome Icons 1300+ 1300+ no PNG images no tbd tbd Network Wi-Fi Wi-Fi Ethernet Support ~ For support using hasp-lvgl, please join the #hasp-lvgl channel on Discord or use Discussions on Github.","title":"Home"},{"location":"#demo-screens","text":"","title":"Demo Screens"},{"location":"#features","text":"Feature ESP8266 ESP32 STM32F4 SPI display yes yes yes Parallel display no yes yes PWM Screen dimming yes yes yes Maximum Page Count 4 12 12 Object Types / Widgets 14 15 15 Dynamic Objects yes yes yes Theme Support yes yes yes Custom .zi V5 font yes (latin1) yes (latin1) no FontAwesome Icons 1300+ 1300+ no PNG images no tbd tbd Network Wi-Fi Wi-Fi Ethernet","title":"Features"},{"location":"#support","text":"For support using hasp-lvgl, please join the #hasp-lvgl channel on Discord or use Discussions on Github.","title":"Support"},{"location":"ESP32/","text":"Installation Download the firmware ~ Go to the releases page on GitHub to download the latest hasp-lvgl binaries. Get the files required for ESP32: d1-mini-esp32_ili9341_v0.3.2.bin bootloader_dio_40m.bin boot_app0.bin partitions.bin Note You can also download the nightly hasp-lvgl firmware.zip file from the Actions tab on Github. Install the firmware ~ Flash ESP32 ~ When flashing the ESP32 for the first time, you need to install a bootloader, partition scheme and application loader: esptool.py --port \"COM1\" erase_flash esptool.py --port \"COM1\" write_flash 0x1000 bootloader_dio_40m.bin --flash_mode dio --flash_freq 40m esptool.py --port \"COM1\" write_flash 0x8000 partitions.bin esptool.py --port \"COM1\" write_flash 0xe000 boot_app0.bin Change COM1 to the correct port on your computer. then flash the actual firmware: esptool.py -p \"COM1\" --baud 921600 write_flash 0x10000 d1-mini-esp32_ili9341_<version>.bin or all previous steps in one long command line: esptool.py -p \"COM1\" --baud 921600 --before default_reset --after hard_reset write_flash --flash_mode dio --flash_freq 40m --flash_size detect 0x1000 bootloader_dio_40m.bin 0x8000 partitions.bin 0xe000 boot_app0.bin 0x10000 d1-mini-esp32_ili9341_<version>.bin","title":"ESP32 Installation"},{"location":"ESP32/#download-the-firmware","text":"Go to the releases page on GitHub to download the latest hasp-lvgl binaries. Get the files required for ESP32: d1-mini-esp32_ili9341_v0.3.2.bin bootloader_dio_40m.bin boot_app0.bin partitions.bin Note You can also download the nightly hasp-lvgl firmware.zip file from the Actions tab on Github.","title":"Download the firmware"},{"location":"ESP32/#install-the-firmware","text":"","title":"Install the firmware"},{"location":"ESP32/#flash-esp32","text":"When flashing the ESP32 for the first time, you need to install a bootloader, partition scheme and application loader: esptool.py --port \"COM1\" erase_flash esptool.py --port \"COM1\" write_flash 0x1000 bootloader_dio_40m.bin --flash_mode dio --flash_freq 40m esptool.py --port \"COM1\" write_flash 0x8000 partitions.bin esptool.py --port \"COM1\" write_flash 0xe000 boot_app0.bin Change COM1 to the correct port on your computer. then flash the actual firmware: esptool.py -p \"COM1\" --baud 921600 write_flash 0x10000 d1-mini-esp32_ili9341_<version>.bin or all previous steps in one long command line: esptool.py -p \"COM1\" --baud 921600 --before default_reset --after hard_reset write_flash --flash_mode dio --flash_freq 40m --flash_size detect 0x1000 bootloader_dio_40m.bin 0x8000 partitions.bin 0xe000 boot_app0.bin 0x10000 d1-mini-esp32_ili9341_<version>.bin","title":"Flash ESP32"},{"location":"ESP8266/","text":"Installation Download the firmware ~ Go to the releases page on GitHub to download the latest hasp-lvgl binaries. Pick the one appropriate for ESP8266: d1-mini-esp8266_ili9341_v0.3.2.bin Note You can also download the nightly hasp-lvgl firmware.zip file from the Actions tab on Github. Install the firmware ~ Flash ESP8266 ~ For ESP8266 you only need one single .bin file: Using Tasmotizer (Windows) ~ Using esp-tool.py ~ When flashing the ESP8266 for the first time, it is best to erase the flash before uploading the new firmware: esptool.py -p \"COM1\" erase_flash esptool.py -p \"COM1\" write_flash --flash_mode qio 0x0 d1-mini-esp8266_ili9341_v0.3.2.bin Change COM1 to the correct port on your computer and 4m to the correct size of the internal flash chip.","title":"ESP8266 Installation"},{"location":"ESP8266/#download-the-firmware","text":"Go to the releases page on GitHub to download the latest hasp-lvgl binaries. Pick the one appropriate for ESP8266: d1-mini-esp8266_ili9341_v0.3.2.bin Note You can also download the nightly hasp-lvgl firmware.zip file from the Actions tab on Github.","title":"Download the firmware"},{"location":"ESP8266/#install-the-firmware","text":"","title":"Install the firmware"},{"location":"ESP8266/#flash-esp8266","text":"For ESP8266 you only need one single .bin file:","title":"Flash ESP8266"},{"location":"characters/","text":"Languages Language Pack ~ UTF-8 Char Description CZ RO HR SL DE SV FI DA NO HU ES PT IT FR EN NL 00A0 Non-breaking space CZ RO HR SL DE SV FI DA NO HU ES PT IT FR EN NL 00A1 \u00a1 Inverted exclamation mark ES 00A2 \u00a2 Cent sign 00A3 \u00a3 Pound sign 00A4 \u00a4 Currency sign 00A5 \u00a5 Yen sign 00A6 \u00a6 Broken bar 00A7 \u00a7 Section sign 00A8 \u00a8 Diaeresis 00A9 \u00a9 Copyright sign 00AA \u00aa Feminine Ordinal Indicator 00AB \u00ab Left-pointing double angle quotation mark 00AC \u00ac Not sign 00AD \u00ad Soft hyphen 00AE \u00ae Registered sign 00AF \u00af Macron 00B0 \u00b0 Degree symbol CZ RO HR SL DE SV FI DA NO HU ES PT IT FR EN NL 00B1 \u00b1 Plus-minus sign CZ RO HR SL DE SV FI DA NO HU ES PT IT FR EN NL 00B2 \u00b2 Superscript two 00B3 \u00b3 Superscript three 00B4 \u00b4 Acute accent 00B5 \u00b5 Micro sign CZ RO HR SL DE SV FI DA NO HU ES PT IT FR EN NL 00B6 \u00b6 Pilcrow sign 00B7 \u00b7 Middle dot CZ RO HR SL DE SV FI DA NO HU ES PT IT FR EN NL 00B8 \u00b8 Cedilla 00B9 \u00b9 Superscript one 00BA \u00ba Masculine ordinal indicator 00BB \u00bb Right-pointing double-angle quotation mark 00BC \u00bc Vulgar fraction one quarter CZ RO HR SL DE SV FI DA NO HU ES PT IT FR EN NL 00BD \u00bd Vulgar fraction one half CZ RO HR SL DE SV FI DA NO HU ES PT IT FR EN NL 00BE \u00be Vulgar fraction three quarters CZ RO HR SL DE SV FI DA NO HU ES PT IT FR EN NL 00BF \u00bf Inverted question mark ES 00C0 \u00c0 Capital A with grave PT IT FR 00C1 \u00c1 Capital A with acute HU ES PT FR 00C2 \u00c2 Capital A with circumflex RO NO PT FR 00C3 \u00c3 Capital A with tilde PT 00C4 \u00c4 Capital A with diaeresis DE SV FI 00C5 \u00c5 Capital A with ring above SV FI DA NO 00C6 \u00c6 Capital AE DA NO 00C7 \u00c7 Capital C with cedilla PT FR 00C8 \u00c8 Capital E with grave NO IT FR 00C9 \u00c9 Capital E with acute NO HU ES PT IT FR 00CA \u00ca Capital E with circumflex NO PT FR 00CB \u00cb Capital E with diaeresis FR 00CC \u00cc Capital I with grave IT 00CD \u00cd Capital I with acute HU ES PT 00CE \u00ce Capital I with circumflex RO FR 00CF \u00cf Capital I with diaeresis FR 00D0 \u00d0 Capital Eth 00D1 \u00d1 Capital N with tilde ES 00D2 \u00d2 Capital O with grave NO IT 00D3 \u00d3 Capital O with acute NO HU ES PT 00D4 \u00d4 Capital O with circumflex NO PT FR 00D5 \u00d5 Capital O with tilde PT FR 00D6 \u00d6 Capital O with diaeresis DE SV FI HU 00D7 \u00d7 Multiplication sign CZ RO HR SL DE SV FI DA NO HU ES PT IT FR EN NL 00D8 \u00d8 Capital O with stroke DA NO 00D9 \u00d9 Capital U with grave IT 00DA \u00da Capital U with acute HU ES PT 00DB \u00db Capital U with circumflex 00DC \u00dc Capital U with diaeresis DE HU ES PT 00DD \u00dd Capital Y with acute CZ ES 00DE \u00de Capital Thorn 00DF \u00df Small sharp S DE 00E0 \u00e0 Small A with grave PT IT FR 00E1 \u00e1 Small A with acute HU ES PT FR 00E2 \u00e2 Small A with circumflex RO NO PT FR 00E3 \u00e3 Small A with tilde PT 00E4 \u00e4 Small A with diaeresis DE SV FI 00E5 \u00e5 Small A with ring above SV FI DA NO 00E6 \u00e6 Small AE DA NO 00E7 \u00e7 Small C with cedilla PT FR 00E8 \u00e8 Small E with grave NO IT FR 00E9 \u00e9 Small E with acute NO HU ES PT IT FR 00EA \u00ea Small E with circumflex NO PT FR 00EB \u00eb Small E with diaeresis 00EC \u00ec Small I with grave IT 00ED \u00ed Small I with acute HU ES PT FR 00EE \u00ee Small I with circumflex RO FR 00EF \u00ef Small I with diaeresis FR 00F0 \u00f0 Small Eth 00F1 \u00f1 Small N with tilde ES EN NL 00F2 \u00f2 Small O with grave NO IT 00F3 \u00f3 Small O with acute NO HU ES PT FR 00F4 \u00f4 Small O with circumflex NO PT FR 00F5 \u00f5 Small O with tilde PT 00F6 \u00f6 Small O with diaeresis DE SV FI HU 00F7 \u00f7 Division sign CZ RO HR SL DE SV FI DA NO HU ES PT IT FR EN NL 00F8 \u00f8 Small O with stroke DA NO 00F9 \u00f9 Small U with grave IT FR 00FA \u00fa Small U with acute HU ES PT FR 00FB \u00fb Small U with circumflex FR 00FC \u00fc Small U with diaeresis DE HU ES PT 00FD \u00fd Small Y with acute ES 00FE \u00fe Small Thorn 00FF \u00ff Small Y with diaeresis 0100 \u0100 Capital A with macron 0101 \u0101 Small A with macron 0102 \u0102 Capital A with breve RO 0103 \u0103 Small A with breve RO 0104 \u0104 Capital A with ogonek 0105 \u0105 Small A with ogonek 0106 \u0106 Capital C with acute 0107 \u0107 Small C with acute 0108 \u0108 Capital C with circumflex 0109 \u0109 Small C with circumflex 010A \u010a Capital C with dot above 010B \u010b Small C with dot above 010C \u010c Capital C with caron SL 010D \u010d Small C with caron SL 010E \u010e Capital D with caron 010F \u010f Small D with caron 0110 \u0110 Capital D with stroke 0111 \u0111 Small D with stroke 0112 \u0112 Capital E with macron 0113 \u0113 Small E with macron 0114 \u0114 Capital E with breve CZ 0115 \u0115 Small E with breve CZ 0116 \u0116 Capital E with dot above 0117 \u0117 Small E with dot above 0118 \u0118 Capital E with ogonek 0119 \u0119 Small E with ogonek 011A \u011a Capital E with caron 011B \u011b Small E with caron 011C \u011c Capital G with circumflex 011D \u011d Small G with circumflex 011E \u011e Capital G with breve 011F \u011f Small G with breve 0120 \u0120 Capital G with dot above 0121 \u0121 Small G with dot above 0122 \u0122 Capital G with cedilla 0123 \u0123 Small G with cedilla 0124 \u0124 Capital H with circumflex 0125 \u0125 Small H with circumflex 0126 \u0126 Capital H with stroke 0127 \u0127 Small H with stroke 0128 \u0128 Capital I with tilde 0129 \u0129 Small I with tilde 012A \u012a Capital I with macron 012B \u012b Small I with macron 012C \u012c Capital I with breve 012D \u012d Small I with breve 012E \u012e Capital I with ogonek 012F \u012f Small I with ogonek 0130 \u0130 Capital I with dot above 0131 \u0131 Small dotless I 0132 \u0132 Capital Ligature IJ 0133 \u0133 Small Ligature IJ 0134 \u0134 Capital J with circumflex 0135 \u0135 Small J with circumflex 0136 \u0136 Capital K with cedilla 0137 \u0137 Small K with cedilla 0138 \u0138 Small Kra 0139 \u0139 Capital L with acute 013A \u013a Small L with acute 013B \u013b Capital L with cedilla 013C \u013c Small L with cedilla 013D \u013d Capital L with caron 013E \u013e Small L with caron 013F \u013f Capital L with middle dot 0140 \u0140 Small L with middle dot 0141 \u0141 Capital L with stroke 0142 \u0142 Small L with stroke 0143 \u0143 Capital N with acute 0144 \u0144 Small N with acute 0145 \u0145 Capital N with cedilla 0146 \u0146 Small N with cedilla 0147 \u0147 Capital N with caron CZ 0148 \u0148 Small N with caron CZ 0149 \u0149 Small N preceded by apostrophe 014A \u014a Capital Eng 014B \u014b Small Eng 014C \u014c Capital O with macron 014D \u014d Small O with macron 014E \u014e Capital O with breve 014F \u014f Small O with breve 0150 \u0150 Capital O with double acute HU 0151 \u0151 Small O with double acute HU 0152 \u0152 Capital Ligature OE FR 0153 \u0153 Small Ligature OE FR 0154 \u0154 Capital R with acute 0155 \u0155 Small R with acute 0156 \u0156 Capital R with cedilla 0157 \u0157 Small R with cedilla 0158 \u0158 Capital R with caron 0159 \u0159 Small R with caron 015A \u015a Capital S with acute 015B \u015b Small S with acute 015C \u015c Capital S with circumflex 015D \u015d Small S with circumflex 015E \u015e Capital S with cedilla RO 015F \u015f Small S with cedilla RO 0160 \u0160 Capital S with caron SL FI 0161 \u0161 Small S with caron SL FI 0162 \u0162 Capital T with cedilla RO 0163 \u0163 Small T with cedilla RO 0164 \u0164 Capital T with caron 0165 \u0165 Small T with caron 0166 \u0166 Capital T with stroke 0167 \u0167 Small T with stroke 0168 \u0168 Capital U with tilde 0169 \u0169 Small U with tilde 016A \u016a Capital U with macron 016B \u016b Small U with macron 016C \u016c Capital U with breve 016D \u016d Small U with breve 016E \u016e Capital U with ring above CZ 016F \u016f Small U with ring above CZ 0170 \u0170 Capital U with double acute HU 0171 \u0171 Small U with double acute HU 0172 \u0172 Capital U with ogonek 0173 \u0173 Small U with ogonek 0174 \u0174 Capital W with circumflex 0175 \u0175 Small W with circumflex 0176 \u0176 Capital Y with circumflex 0177 \u0177 Small Y with circumflex 0178 \u0178 Capital Y with diaeresis 0179 \u0179 Capital Z with acute 017A \u017a Small Z with acute 017B \u017b Capital Z with dot above 017C \u017c Small Z with dot above 017D \u017d Capital Z with caron SL FI 017E \u017e Small Z with caron SL FI 017F \u017f Small long S 01C4 \u01c4 Capital DZ with Caron HR 01C5 \u01c5 Capital D with Small Z with Caron HR 01C6 \u01c6 Small DZ with Caron HR 01C7 \u01c7 Capital LJ HR 01C8 \u01c8 Capital L with Small J HR 01C9 \u01c9 Small LJ HR 01CA \u01ca Capital NJ HR 01CB \u01cb Capital N with Small J HR 01CC \u01cc Small NJ HR 01CD \u01cd Capital A with Caron RO 01CE \u01ce Small A with Caron RO 01CF \u01cf Capital I with Caron 01D0 \u01d0 Small I with Caron 01D1 \u01d1 Capital O with Caron 01D2 \u01d2 Small O with Caron 01D3 \u01d3 Capital U with Caron 01D4 \u01d4 Small U with Caron 01D5 \u01d5 Capital U with Diaeresis and Macron 01D6 \u01d6 Small U with Diaeresis and Macron 01D7 \u01d7 Capital U with Diaeresis and Acute 01D8 \u01d8 Small U with Diaeresis and Acute 01D9 \u01d9 Capital U with Diaeresis and Caron 01DA \u01da Small U with Diaeresis and Caron 01DB \u01db Capital U with Diaeresis and Grave 01DC \u01dc Small U with Diaeresis and Grave 01DD \u01dd Small Turned E 01DE \u01de Capital A with Diaeresis and Macron 01DF \u01df Small A with Diaeresis and Macron 01E0 \u01e0 Capital A with Dot Above and Macron 01E1 \u01e1 Small A with Dot Above and Macron 01E2 \u01e2 Capital AE with Macron 01E3 \u01e3 Small AE with Macron 01E4 \u01e4 Capital G with Stroke 01E5 \u01e5 Small G with Stroke 01E6 \u01e6 Capital G with Caron 01E7 \u01e7 Small G with Caron 01E8 \u01e8 Capital K with Caron 01E9 \u01e9 Small K with Caron 01EA \u01ea Capital O with Ogonek 01EB \u01eb Small O with Ogonek 01EC \u01ec Capital O with Ogonek and Macron 01ED \u01ed Small O with Ogonek and Macron 01EE \u01ee Capital Ezh with Caron 01EF \u01ef Small Ezh with Caron 01F0 \u01f0 Small J with Caron 01F1 \u01f1 Capital DZ 01F2 \u01f2 Capital D with Small Z 01F3 \u01f3 Small DZ 01F4 \u01f4 Capital G with Acute 01F5 \u01f5 Small G with Acute 01F6 \u01f6 Capital Hwair 01F7 \u01f7 Capital Wynn 01F8 \u01f8 Capital N with Grave 01F9 \u01f9 Small N with Grave 01FA \u01fa Capital A with Ring Above and Acute 01FB \u01fb Small A with Ring Above and Acute 01FC \u01fc Capital AE with Acute 01FD \u01fd Small AE with Acute 01FE \u01fe Capital O with Stroke and Acute 01FF \u01ff Small O with Stroke and Acute 0200 \u0200 Capital A with Double Grave HR SL 0201 \u0201 Small A with Double Grave HR SL 0202 \u0202 Capital A with Inverted Breve RO HR SL 0203 \u0203 Small A with Inverted Breve RO HR SL 0204 \u0204 Capital E with Double Grave HR SL 0205 \u0205 Small E with Double Grave HR SL 0206 \u0206 Capital E with Inverted Breve HR SL 0207 \u0207 Small E with Inverted Breve HR SL 0208 \u0208 Capital I with Double Grave HR SL 0209 \u0209 Small I with Double Grave HR SL 020A \u020a Capital I with Inverted Breve RO HR SL 020B \u020b Small I with Inverted Breve RO HR SL 020C \u020c Capital O with Double Grave HR SL 020D \u020d Small O with Double Grave HR SL 020E \u020e Capital O with Inverted Breve HR SL 020F \u020f Small O with Inverted Breve HR SL 0210 \u0210 Capital R with Double Grave HR SL 0211 \u0211 Small R with Double Grave HR SL 0212 \u0212 Capital R with Inverted Breve HR SL 0213 \u0213 Small R with Inverted Breve HR SL 0214 \u0214 Capital U with Double Grave HR SL 0215 \u0215 Small U with Double Grave HR SL 0216 \u0216 Capital U with Inverted Breve HR SL 0217 \u0217 Small U with Inverted Breve HR SL 0218 \u0218 Capital S with Comma Below RO 0219 \u0219 Small S with Comma Below RO 021A \u021a Capital T with Comma Below RO 021B \u021b Small T with Comma Below RO 021C \u021c Capital Yogh 021D \u021d Small Yogh 021E \u021e Capital H with Caron 021F \u021f Small H with Caron 0220 \u0220 Capital N with Long Right Leg 0221 \u0221 Small D with Curl 0222 \u0222 Capital OU 0223 \u0223 Small OU 0224 \u0224 Capital Z with Hook 0225 \u0225 Small Z with Hook 0226 \u0226 Capital A with Dot Above 0227 \u0227 Small A with Dot Above 0228 \u0228 Capital E with Cedilla 0229 \u0229 Small E with Cedilla 022A \u022a Capital O with Diaeresis and Macron 022B \u022b Small O with Diaeresis and Macron 022C \u022c Capital O with Tilde and Macron 022D \u022d Small O with Tilde and Macron 022E \u022e Capital O with Dot Above 022F \u022f Small O with Dot Above 0230 \u0230 Capital O with Dot Above and Macron 0231 \u0231 Small O with Dot Above and Macron 0232 \u0232 Capital Y with Macron 0233 \u0233 Small Y with Macron 0234 \u0234 Small L with Curl 0235 \u0235 Small N with Curl 0236 \u0236 Small T with Curl 0237 \u0237 Small Dotless J 0238 \u0238 Small DB Digraph 0239 \u0239 Small QP Digraph 023A \u023a Capital A with Stroke 023B \u023b Capital C with Stroke 023C \u023c Small C with Stroke 023D \u023d Capital L with Bar 023E \u023e Capital T with Diagonal Stroke 023F \u023f Small S with Swash Tail 0240 \u0240 Small Z with Swash Tail 0241 \u0241 Capital Glottal Stop 0242 \u0242 Small Glottal Stop 0243 \u0243 Capital B with Stroke 0244 \u0244 Capital U Bar 0245 \u0245 Capital Turned V 0246 \u0246 Capital E with Stroke 0247 \u0247 Small E with Stroke 0248 \u0248 Capital J with Stroke 0249 \u0249 Small J with Stroke 024A \u024a Capital Q with Hook Tail 024B \u024b Small Q with Hook Tail 024C \u024c Capital R with Stroke 024D \u024d Small R with Stroke 024E \u024e Capital Y with Stroke 024F \u024f Small Y with Stroke 1E9E \u1e9e Capital Letter Sharp S DE","title":"Characters"},{"location":"characters/#language-pack","text":"UTF-8 Char Description CZ RO HR SL DE SV FI DA NO HU ES PT IT FR EN NL 00A0 Non-breaking space CZ RO HR SL DE SV FI DA NO HU ES PT IT FR EN NL 00A1 \u00a1 Inverted exclamation mark ES 00A2 \u00a2 Cent sign 00A3 \u00a3 Pound sign 00A4 \u00a4 Currency sign 00A5 \u00a5 Yen sign 00A6 \u00a6 Broken bar 00A7 \u00a7 Section sign 00A8 \u00a8 Diaeresis 00A9 \u00a9 Copyright sign 00AA \u00aa Feminine Ordinal Indicator 00AB \u00ab Left-pointing double angle quotation mark 00AC \u00ac Not sign 00AD \u00ad Soft hyphen 00AE \u00ae Registered sign 00AF \u00af Macron 00B0 \u00b0 Degree symbol CZ RO HR SL DE SV FI DA NO HU ES PT IT FR EN NL 00B1 \u00b1 Plus-minus sign CZ RO HR SL DE SV FI DA NO HU ES PT IT FR EN NL 00B2 \u00b2 Superscript two 00B3 \u00b3 Superscript three 00B4 \u00b4 Acute accent 00B5 \u00b5 Micro sign CZ RO HR SL DE SV FI DA NO HU ES PT IT FR EN NL 00B6 \u00b6 Pilcrow sign 00B7 \u00b7 Middle dot CZ RO HR SL DE SV FI DA NO HU ES PT IT FR EN NL 00B8 \u00b8 Cedilla 00B9 \u00b9 Superscript one 00BA \u00ba Masculine ordinal indicator 00BB \u00bb Right-pointing double-angle quotation mark 00BC \u00bc Vulgar fraction one quarter CZ RO HR SL DE SV FI DA NO HU ES PT IT FR EN NL 00BD \u00bd Vulgar fraction one half CZ RO HR SL DE SV FI DA NO HU ES PT IT FR EN NL 00BE \u00be Vulgar fraction three quarters CZ RO HR SL DE SV FI DA NO HU ES PT IT FR EN NL 00BF \u00bf Inverted question mark ES 00C0 \u00c0 Capital A with grave PT IT FR 00C1 \u00c1 Capital A with acute HU ES PT FR 00C2 \u00c2 Capital A with circumflex RO NO PT FR 00C3 \u00c3 Capital A with tilde PT 00C4 \u00c4 Capital A with diaeresis DE SV FI 00C5 \u00c5 Capital A with ring above SV FI DA NO 00C6 \u00c6 Capital AE DA NO 00C7 \u00c7 Capital C with cedilla PT FR 00C8 \u00c8 Capital E with grave NO IT FR 00C9 \u00c9 Capital E with acute NO HU ES PT IT FR 00CA \u00ca Capital E with circumflex NO PT FR 00CB \u00cb Capital E with diaeresis FR 00CC \u00cc Capital I with grave IT 00CD \u00cd Capital I with acute HU ES PT 00CE \u00ce Capital I with circumflex RO FR 00CF \u00cf Capital I with diaeresis FR 00D0 \u00d0 Capital Eth 00D1 \u00d1 Capital N with tilde ES 00D2 \u00d2 Capital O with grave NO IT 00D3 \u00d3 Capital O with acute NO HU ES PT 00D4 \u00d4 Capital O with circumflex NO PT FR 00D5 \u00d5 Capital O with tilde PT FR 00D6 \u00d6 Capital O with diaeresis DE SV FI HU 00D7 \u00d7 Multiplication sign CZ RO HR SL DE SV FI DA NO HU ES PT IT FR EN NL 00D8 \u00d8 Capital O with stroke DA NO 00D9 \u00d9 Capital U with grave IT 00DA \u00da Capital U with acute HU ES PT 00DB \u00db Capital U with circumflex 00DC \u00dc Capital U with diaeresis DE HU ES PT 00DD \u00dd Capital Y with acute CZ ES 00DE \u00de Capital Thorn 00DF \u00df Small sharp S DE 00E0 \u00e0 Small A with grave PT IT FR 00E1 \u00e1 Small A with acute HU ES PT FR 00E2 \u00e2 Small A with circumflex RO NO PT FR 00E3 \u00e3 Small A with tilde PT 00E4 \u00e4 Small A with diaeresis DE SV FI 00E5 \u00e5 Small A with ring above SV FI DA NO 00E6 \u00e6 Small AE DA NO 00E7 \u00e7 Small C with cedilla PT FR 00E8 \u00e8 Small E with grave NO IT FR 00E9 \u00e9 Small E with acute NO HU ES PT IT FR 00EA \u00ea Small E with circumflex NO PT FR 00EB \u00eb Small E with diaeresis 00EC \u00ec Small I with grave IT 00ED \u00ed Small I with acute HU ES PT FR 00EE \u00ee Small I with circumflex RO FR 00EF \u00ef Small I with diaeresis FR 00F0 \u00f0 Small Eth 00F1 \u00f1 Small N with tilde ES EN NL 00F2 \u00f2 Small O with grave NO IT 00F3 \u00f3 Small O with acute NO HU ES PT FR 00F4 \u00f4 Small O with circumflex NO PT FR 00F5 \u00f5 Small O with tilde PT 00F6 \u00f6 Small O with diaeresis DE SV FI HU 00F7 \u00f7 Division sign CZ RO HR SL DE SV FI DA NO HU ES PT IT FR EN NL 00F8 \u00f8 Small O with stroke DA NO 00F9 \u00f9 Small U with grave IT FR 00FA \u00fa Small U with acute HU ES PT FR 00FB \u00fb Small U with circumflex FR 00FC \u00fc Small U with diaeresis DE HU ES PT 00FD \u00fd Small Y with acute ES 00FE \u00fe Small Thorn 00FF \u00ff Small Y with diaeresis 0100 \u0100 Capital A with macron 0101 \u0101 Small A with macron 0102 \u0102 Capital A with breve RO 0103 \u0103 Small A with breve RO 0104 \u0104 Capital A with ogonek 0105 \u0105 Small A with ogonek 0106 \u0106 Capital C with acute 0107 \u0107 Small C with acute 0108 \u0108 Capital C with circumflex 0109 \u0109 Small C with circumflex 010A \u010a Capital C with dot above 010B \u010b Small C with dot above 010C \u010c Capital C with caron SL 010D \u010d Small C with caron SL 010E \u010e Capital D with caron 010F \u010f Small D with caron 0110 \u0110 Capital D with stroke 0111 \u0111 Small D with stroke 0112 \u0112 Capital E with macron 0113 \u0113 Small E with macron 0114 \u0114 Capital E with breve CZ 0115 \u0115 Small E with breve CZ 0116 \u0116 Capital E with dot above 0117 \u0117 Small E with dot above 0118 \u0118 Capital E with ogonek 0119 \u0119 Small E with ogonek 011A \u011a Capital E with caron 011B \u011b Small E with caron 011C \u011c Capital G with circumflex 011D \u011d Small G with circumflex 011E \u011e Capital G with breve 011F \u011f Small G with breve 0120 \u0120 Capital G with dot above 0121 \u0121 Small G with dot above 0122 \u0122 Capital G with cedilla 0123 \u0123 Small G with cedilla 0124 \u0124 Capital H with circumflex 0125 \u0125 Small H with circumflex 0126 \u0126 Capital H with stroke 0127 \u0127 Small H with stroke 0128 \u0128 Capital I with tilde 0129 \u0129 Small I with tilde 012A \u012a Capital I with macron 012B \u012b Small I with macron 012C \u012c Capital I with breve 012D \u012d Small I with breve 012E \u012e Capital I with ogonek 012F \u012f Small I with ogonek 0130 \u0130 Capital I with dot above 0131 \u0131 Small dotless I 0132 \u0132 Capital Ligature IJ 0133 \u0133 Small Ligature IJ 0134 \u0134 Capital J with circumflex 0135 \u0135 Small J with circumflex 0136 \u0136 Capital K with cedilla 0137 \u0137 Small K with cedilla 0138 \u0138 Small Kra 0139 \u0139 Capital L with acute 013A \u013a Small L with acute 013B \u013b Capital L with cedilla 013C \u013c Small L with cedilla 013D \u013d Capital L with caron 013E \u013e Small L with caron 013F \u013f Capital L with middle dot 0140 \u0140 Small L with middle dot 0141 \u0141 Capital L with stroke 0142 \u0142 Small L with stroke 0143 \u0143 Capital N with acute 0144 \u0144 Small N with acute 0145 \u0145 Capital N with cedilla 0146 \u0146 Small N with cedilla 0147 \u0147 Capital N with caron CZ 0148 \u0148 Small N with caron CZ 0149 \u0149 Small N preceded by apostrophe 014A \u014a Capital Eng 014B \u014b Small Eng 014C \u014c Capital O with macron 014D \u014d Small O with macron 014E \u014e Capital O with breve 014F \u014f Small O with breve 0150 \u0150 Capital O with double acute HU 0151 \u0151 Small O with double acute HU 0152 \u0152 Capital Ligature OE FR 0153 \u0153 Small Ligature OE FR 0154 \u0154 Capital R with acute 0155 \u0155 Small R with acute 0156 \u0156 Capital R with cedilla 0157 \u0157 Small R with cedilla 0158 \u0158 Capital R with caron 0159 \u0159 Small R with caron 015A \u015a Capital S with acute 015B \u015b Small S with acute 015C \u015c Capital S with circumflex 015D \u015d Small S with circumflex 015E \u015e Capital S with cedilla RO 015F \u015f Small S with cedilla RO 0160 \u0160 Capital S with caron SL FI 0161 \u0161 Small S with caron SL FI 0162 \u0162 Capital T with cedilla RO 0163 \u0163 Small T with cedilla RO 0164 \u0164 Capital T with caron 0165 \u0165 Small T with caron 0166 \u0166 Capital T with stroke 0167 \u0167 Small T with stroke 0168 \u0168 Capital U with tilde 0169 \u0169 Small U with tilde 016A \u016a Capital U with macron 016B \u016b Small U with macron 016C \u016c Capital U with breve 016D \u016d Small U with breve 016E \u016e Capital U with ring above CZ 016F \u016f Small U with ring above CZ 0170 \u0170 Capital U with double acute HU 0171 \u0171 Small U with double acute HU 0172 \u0172 Capital U with ogonek 0173 \u0173 Small U with ogonek 0174 \u0174 Capital W with circumflex 0175 \u0175 Small W with circumflex 0176 \u0176 Capital Y with circumflex 0177 \u0177 Small Y with circumflex 0178 \u0178 Capital Y with diaeresis 0179 \u0179 Capital Z with acute 017A \u017a Small Z with acute 017B \u017b Capital Z with dot above 017C \u017c Small Z with dot above 017D \u017d Capital Z with caron SL FI 017E \u017e Small Z with caron SL FI 017F \u017f Small long S 01C4 \u01c4 Capital DZ with Caron HR 01C5 \u01c5 Capital D with Small Z with Caron HR 01C6 \u01c6 Small DZ with Caron HR 01C7 \u01c7 Capital LJ HR 01C8 \u01c8 Capital L with Small J HR 01C9 \u01c9 Small LJ HR 01CA \u01ca Capital NJ HR 01CB \u01cb Capital N with Small J HR 01CC \u01cc Small NJ HR 01CD \u01cd Capital A with Caron RO 01CE \u01ce Small A with Caron RO 01CF \u01cf Capital I with Caron 01D0 \u01d0 Small I with Caron 01D1 \u01d1 Capital O with Caron 01D2 \u01d2 Small O with Caron 01D3 \u01d3 Capital U with Caron 01D4 \u01d4 Small U with Caron 01D5 \u01d5 Capital U with Diaeresis and Macron 01D6 \u01d6 Small U with Diaeresis and Macron 01D7 \u01d7 Capital U with Diaeresis and Acute 01D8 \u01d8 Small U with Diaeresis and Acute 01D9 \u01d9 Capital U with Diaeresis and Caron 01DA \u01da Small U with Diaeresis and Caron 01DB \u01db Capital U with Diaeresis and Grave 01DC \u01dc Small U with Diaeresis and Grave 01DD \u01dd Small Turned E 01DE \u01de Capital A with Diaeresis and Macron 01DF \u01df Small A with Diaeresis and Macron 01E0 \u01e0 Capital A with Dot Above and Macron 01E1 \u01e1 Small A with Dot Above and Macron 01E2 \u01e2 Capital AE with Macron 01E3 \u01e3 Small AE with Macron 01E4 \u01e4 Capital G with Stroke 01E5 \u01e5 Small G with Stroke 01E6 \u01e6 Capital G with Caron 01E7 \u01e7 Small G with Caron 01E8 \u01e8 Capital K with Caron 01E9 \u01e9 Small K with Caron 01EA \u01ea Capital O with Ogonek 01EB \u01eb Small O with Ogonek 01EC \u01ec Capital O with Ogonek and Macron 01ED \u01ed Small O with Ogonek and Macron 01EE \u01ee Capital Ezh with Caron 01EF \u01ef Small Ezh with Caron 01F0 \u01f0 Small J with Caron 01F1 \u01f1 Capital DZ 01F2 \u01f2 Capital D with Small Z 01F3 \u01f3 Small DZ 01F4 \u01f4 Capital G with Acute 01F5 \u01f5 Small G with Acute 01F6 \u01f6 Capital Hwair 01F7 \u01f7 Capital Wynn 01F8 \u01f8 Capital N with Grave 01F9 \u01f9 Small N with Grave 01FA \u01fa Capital A with Ring Above and Acute 01FB \u01fb Small A with Ring Above and Acute 01FC \u01fc Capital AE with Acute 01FD \u01fd Small AE with Acute 01FE \u01fe Capital O with Stroke and Acute 01FF \u01ff Small O with Stroke and Acute 0200 \u0200 Capital A with Double Grave HR SL 0201 \u0201 Small A with Double Grave HR SL 0202 \u0202 Capital A with Inverted Breve RO HR SL 0203 \u0203 Small A with Inverted Breve RO HR SL 0204 \u0204 Capital E with Double Grave HR SL 0205 \u0205 Small E with Double Grave HR SL 0206 \u0206 Capital E with Inverted Breve HR SL 0207 \u0207 Small E with Inverted Breve HR SL 0208 \u0208 Capital I with Double Grave HR SL 0209 \u0209 Small I with Double Grave HR SL 020A \u020a Capital I with Inverted Breve RO HR SL 020B \u020b Small I with Inverted Breve RO HR SL 020C \u020c Capital O with Double Grave HR SL 020D \u020d Small O with Double Grave HR SL 020E \u020e Capital O with Inverted Breve HR SL 020F \u020f Small O with Inverted Breve HR SL 0210 \u0210 Capital R with Double Grave HR SL 0211 \u0211 Small R with Double Grave HR SL 0212 \u0212 Capital R with Inverted Breve HR SL 0213 \u0213 Small R with Inverted Breve HR SL 0214 \u0214 Capital U with Double Grave HR SL 0215 \u0215 Small U with Double Grave HR SL 0216 \u0216 Capital U with Inverted Breve HR SL 0217 \u0217 Small U with Inverted Breve HR SL 0218 \u0218 Capital S with Comma Below RO 0219 \u0219 Small S with Comma Below RO 021A \u021a Capital T with Comma Below RO 021B \u021b Small T with Comma Below RO 021C \u021c Capital Yogh 021D \u021d Small Yogh 021E \u021e Capital H with Caron 021F \u021f Small H with Caron 0220 \u0220 Capital N with Long Right Leg 0221 \u0221 Small D with Curl 0222 \u0222 Capital OU 0223 \u0223 Small OU 0224 \u0224 Capital Z with Hook 0225 \u0225 Small Z with Hook 0226 \u0226 Capital A with Dot Above 0227 \u0227 Small A with Dot Above 0228 \u0228 Capital E with Cedilla 0229 \u0229 Small E with Cedilla 022A \u022a Capital O with Diaeresis and Macron 022B \u022b Small O with Diaeresis and Macron 022C \u022c Capital O with Tilde and Macron 022D \u022d Small O with Tilde and Macron 022E \u022e Capital O with Dot Above 022F \u022f Small O with Dot Above 0230 \u0230 Capital O with Dot Above and Macron 0231 \u0231 Small O with Dot Above and Macron 0232 \u0232 Capital Y with Macron 0233 \u0233 Small Y with Macron 0234 \u0234 Small L with Curl 0235 \u0235 Small N with Curl 0236 \u0236 Small T with Curl 0237 \u0237 Small Dotless J 0238 \u0238 Small DB Digraph 0239 \u0239 Small QP Digraph 023A \u023a Capital A with Stroke 023B \u023b Capital C with Stroke 023C \u023c Small C with Stroke 023D \u023d Capital L with Bar 023E \u023e Capital T with Diagonal Stroke 023F \u023f Small S with Swash Tail 0240 \u0240 Small Z with Swash Tail 0241 \u0241 Capital Glottal Stop 0242 \u0242 Small Glottal Stop 0243 \u0243 Capital B with Stroke 0244 \u0244 Capital U Bar 0245 \u0245 Capital Turned V 0246 \u0246 Capital E with Stroke 0247 \u0247 Small E with Stroke 0248 \u0248 Capital J with Stroke 0249 \u0249 Small J with Stroke 024A \u024a Capital Q with Hook Tail 024B \u024b Small Q with Hook Tail 024C \u024c Capital R with Stroke 024D \u024d Small R with Stroke 024E \u024e Capital Y with Stroke 024F \u024f Small Y with Stroke 1E9E \u1e9e Capital Letter Sharp S DE","title":"Language Pack"},{"location":"commands/","text":"Commands Commands are not related to an object on the screen but can get or set global properties or invoke system commands on the device. Commands can be issued via the Serial Commandline, Telnet Commandline or MQTT. For MQTT, use the hasp/<hostname>/command topic with payload <keyword> <parameter(s)> Here is a list of all the recognized command keywords: Pages ~ page value: [0-12] , prev or next Switches the display to show the objects from a different page and return the page number in state/page . Calling the page command without a parameter will return the value of the current page in state/page . clearpage value: [0-12] Deletes all objects on a given page. If no page number is specified, it clears the current page. To delete individual objects, you can issue the pxby.delete command. Backlight ~ dim values: [0-100] Sets the level of the backlight from 0 to 100%, where 0% is off and 100% is full brightness. Example dim 50 sets the display to half the brightness. Tip This can be used in conjunction with the idle events , e.g. to turn the backlight off after a long period of inactivity. light values: on / off , true / false , 0 / 1 , yes / no Switches the backlight on or off, independent of the set dim level. Turning the backlight on will restore the brightness to the previous dim level. Example light on Turn the backlight on Note dim and light commands will work only if a Backlight GPIO pin is configured to the pin required to control the display backlight. wakeup Clears the idle state of the device and publishes a state/idle = OFF status message. It resets the idle counter as if a touch event occurred on the device. This is helpful e.g. when you want to wake up the display when an external event has occurred, like a PIR motion sensor. Moodlight ~ An RGB moodlight can be controlled by configuring 3 GPIO pins as type Mood Red , Mood Green and Mood blue . These leds can then be controlled together using the moodlight command: moodlight {\"power\":\"off\",\"color\":\"green\"} moodlight {\"power\":true,\"color\":\"#ff00e7\"} moodlight {\"color\":12345} moodlight {\"power\":\"on\",\"r\":255,\"g\":0,\"b\":255} The power key accepts boolean values to turn the moodlight on or off The color key accepts color values to set the RGB channels at once Individual r , g and b keys can also be used to set each channel seperately Calling the moodlight command without parameters returns the current state: \"hasp/<platename>/state/moodlight\" => { \"power\":\"on\", \"color\":\"#dea1de\", \"r\":222, \"g\":161, \"b\":222 } The color is returned both as hex-value and individual channels. System Commands ~ calibrate Start on-screen touch calibration. You need to issue a soft reboot command to save the new calibration settings. If you do a hard reset of the device, the calibration settings will be lost. screenshot Saves a picture of the current screen to the flash filesystem. You can retrieve it via http://<ip-address>/screenshot.bmp. This can be handy for bug reporting or documentation. The previous screenshot is overwritten. statusupdate Reports the status of the MCU. The response will be posted to the state topic: \"hasp/<platename>/state/statusupdate\" => { \"node\":\"plate35\", \"status\":\"available\", \"version\":\"0.3.3\", \"uptime\":1813, \"ssid\":\"network\", \"rssi\":-63, \"ip\":\"192.168.4.2\", \"heapFree\":125820, \"heapFrag\":35, \"espCore\":\"v3.2.3-14-gd3e562907\", \"espCanUpdate\":\"false\", \"page\":1, \"numPages\":12, \"tftDriver\":\"ILI9341\", \"tftWidth\":240, \"tftHeight\":320 } reboot or restart Saves any changes in the configuration file and reboots the device. update value: [url] Update the firmware from the url provided. Reboots when update was successful. factoryreset Clear the filesystem and EEPROM and reboot the device in its initial state. Warning There is no confirmation prompt nor an undo function! Output Commands (GPIO) ~ output<x> where <x> is number of the group values: 1 or 0 , on or off , true or false Sets all GPIO's assigned to the group number <x> in Configuration -> GPIO Configuration to \"0\" or \"1\". GUI objects that are assigned to the same group using groupid during object creation will change state accordingly. Configuration Settings ~ Wi-FI ~ ssid Set network name of the access point to connect to. pass Set the optional password for the access point to connect to. MQTT ~ hostname Set the hostname of the device and mqtt topic for the node to hasp/<hostname>/ mqtthost Set the IP address or hostname of the mqtt broker. mqttport Set the port of the mqtt broker. mqttuser Set the optional username for the mqtt broker. mqttpass Set the optional password for the mqtt broker. Config/submodule ~ You can get or set the configuration of a hasp-lvgl submodule in json format. To get the configuration, use the command config/<submodule> . The result will be published to hasp/<hostname>/state/config . Passwords will be omitted from the result. config/wifi config/mqtt config/http config/mdns config/hasp {\"startdim\":100} config/gui config/debug {\"tele\":300} To update the configuration simply issue the same command config/<submodule> with updated json payload. Multiple Commands ~ json When you want to execute multiple commands in one payload, you can use the json command to create an array of commands in a json payload Each command is an element in this array of strings: [\"page 5\",\"dim 50\",\"light on\",\"statusupdate\"] The commands are interpreted and processed sequentially. jsonl (json lines) This command can be used to create new objects or update the properties of an existing object. When updating an existing object objid is not required and will be ignored. Each line in the jsonl payload defines one object and has to be in the json format. For details see Pages and Objects","title":"Commands"},{"location":"commands/#pages","text":"page value: [0-12] , prev or next Switches the display to show the objects from a different page and return the page number in state/page . Calling the page command without a parameter will return the value of the current page in state/page . clearpage value: [0-12] Deletes all objects on a given page. If no page number is specified, it clears the current page. To delete individual objects, you can issue the pxby.delete command.","title":"Pages"},{"location":"commands/#backlight","text":"dim values: [0-100] Sets the level of the backlight from 0 to 100%, where 0% is off and 100% is full brightness. Example dim 50 sets the display to half the brightness. Tip This can be used in conjunction with the idle events , e.g. to turn the backlight off after a long period of inactivity. light values: on / off , true / false , 0 / 1 , yes / no Switches the backlight on or off, independent of the set dim level. Turning the backlight on will restore the brightness to the previous dim level. Example light on Turn the backlight on Note dim and light commands will work only if a Backlight GPIO pin is configured to the pin required to control the display backlight. wakeup Clears the idle state of the device and publishes a state/idle = OFF status message. It resets the idle counter as if a touch event occurred on the device. This is helpful e.g. when you want to wake up the display when an external event has occurred, like a PIR motion sensor.","title":"Backlight"},{"location":"commands/#moodlight","text":"An RGB moodlight can be controlled by configuring 3 GPIO pins as type Mood Red , Mood Green and Mood blue . These leds can then be controlled together using the moodlight command: moodlight {\"power\":\"off\",\"color\":\"green\"} moodlight {\"power\":true,\"color\":\"#ff00e7\"} moodlight {\"color\":12345} moodlight {\"power\":\"on\",\"r\":255,\"g\":0,\"b\":255} The power key accepts boolean values to turn the moodlight on or off The color key accepts color values to set the RGB channels at once Individual r , g and b keys can also be used to set each channel seperately Calling the moodlight command without parameters returns the current state: \"hasp/<platename>/state/moodlight\" => { \"power\":\"on\", \"color\":\"#dea1de\", \"r\":222, \"g\":161, \"b\":222 } The color is returned both as hex-value and individual channels.","title":"Moodlight"},{"location":"commands/#system-commands","text":"calibrate Start on-screen touch calibration. You need to issue a soft reboot command to save the new calibration settings. If you do a hard reset of the device, the calibration settings will be lost. screenshot Saves a picture of the current screen to the flash filesystem. You can retrieve it via http://<ip-address>/screenshot.bmp. This can be handy for bug reporting or documentation. The previous screenshot is overwritten. statusupdate Reports the status of the MCU. The response will be posted to the state topic: \"hasp/<platename>/state/statusupdate\" => { \"node\":\"plate35\", \"status\":\"available\", \"version\":\"0.3.3\", \"uptime\":1813, \"ssid\":\"network\", \"rssi\":-63, \"ip\":\"192.168.4.2\", \"heapFree\":125820, \"heapFrag\":35, \"espCore\":\"v3.2.3-14-gd3e562907\", \"espCanUpdate\":\"false\", \"page\":1, \"numPages\":12, \"tftDriver\":\"ILI9341\", \"tftWidth\":240, \"tftHeight\":320 } reboot or restart Saves any changes in the configuration file and reboots the device. update value: [url] Update the firmware from the url provided. Reboots when update was successful. factoryreset Clear the filesystem and EEPROM and reboot the device in its initial state. Warning There is no confirmation prompt nor an undo function!","title":"System Commands"},{"location":"commands/#output-commands-gpio","text":"output<x> where <x> is number of the group values: 1 or 0 , on or off , true or false Sets all GPIO's assigned to the group number <x> in Configuration -> GPIO Configuration to \"0\" or \"1\". GUI objects that are assigned to the same group using groupid during object creation will change state accordingly.","title":"Output Commands (GPIO)"},{"location":"commands/#configuration-settings","text":"","title":"Configuration Settings"},{"location":"commands/#wi-fi","text":"ssid Set network name of the access point to connect to. pass Set the optional password for the access point to connect to.","title":"Wi-FI"},{"location":"commands/#mqtt","text":"hostname Set the hostname of the device and mqtt topic for the node to hasp/<hostname>/ mqtthost Set the IP address or hostname of the mqtt broker. mqttport Set the port of the mqtt broker. mqttuser Set the optional username for the mqtt broker. mqttpass Set the optional password for the mqtt broker.","title":"MQTT"},{"location":"commands/#configsubmodule","text":"You can get or set the configuration of a hasp-lvgl submodule in json format. To get the configuration, use the command config/<submodule> . The result will be published to hasp/<hostname>/state/config . Passwords will be omitted from the result. config/wifi config/mqtt config/http config/mdns config/hasp {\"startdim\":100} config/gui config/debug {\"tele\":300} To update the configuration simply issue the same command config/<submodule> with updated json payload.","title":"Config/submodule"},{"location":"commands/#multiple-commands","text":"json When you want to execute multiple commands in one payload, you can use the json command to create an array of commands in a json payload Each command is an element in this array of strings: [\"page 5\",\"dim 50\",\"light on\",\"statusupdate\"] The commands are interpreted and processed sequentially. jsonl (json lines) This command can be used to create new objects or update the properties of an existing object. When updating an existing object objid is not required and will be ignored. Each line in the jsonl payload defines one object and has to be in the json format. For details see Pages and Objects","title":"Multiple Commands"},{"location":"compiling/","text":"Compiling Install Visual Studio Code ~ on Linux on MacOS on Windows Additional packages on Linux: sudo apt update sudo apt install git python3-venv Clone hasp-lvgl ~ Make sure to add the --recursive parameter when cloning the project from GitHub. Otherwise git will not download the required submodules in the /lib subdirectory. git clone --recursive https://github.com/fvanroie/hasp-lvgl If you already cloned hasp-lvgl without the submodules, you can fetch the submodules seperately using: git submodule update --init --recursive To switch to a different branch use: git clone --recursive https://github.com/fvanroie/hasp-lvgl cd hasp-lvgl git checkout 0.2.0 git submodule update --init --recursive Open in PlatformIO ~ Open the project folder in Visual Studio Code . You will receive a popup to install PlatformIO IDE if it is not already installed. This will automatically install all PlatformIO dependencies and the MCU compiler frameworks needed. Restart Visual Studio Code when the PIO installation completes. Create a configuration ~ Copy platformio_override-template.ini to platformio_override.ini and uncomment the platforms for esp32 and esp8266 : [platformio] extra_configs = ; Uncomment or edit the lines to show more User Setups in the PIO sidebar user_setups/esp32/*.ini user_setups/esp8266/*.ini ; user_setups/stm32f4xx/*.ini Then Click on the \"Refresh Project tasks\" icon in PlatformIO to list all the configured environments. Compile ~ MCU Environments ~ You can now run \"Build\" or \"Build All\" in PlatformIO to compile (all) the firmware. Native Linux build ~ For native linux_sdl builds, you also need: sudo apt update sudo apt install build-essential libsdl2-dev Native MacOS build ~ For native darwin_sdl builds, you also need Homebrew : brew install gcc sdl2 Native Windows build ~ For native windows_sdl builds, you also need MingW: Use MSYS2 pacman -S mingw-w64-x86_64-gcc mingw-w64-x86_64-SDL2 Add the path to your Mingw-w64 bin folder to the Windows PATH environment variable (usually C:\\msys64\\mingw64\\bin ). See instruction, 4 . Development ~ Block Diagram ~ MQTT Tests ~ To run the tavern testing suite, install the tavern python package and configure test\\config.yaml with your broker settings. pip install tavern tavern-ci .\\test\\","title":"Compiling"},{"location":"compiling/#install-visual-studio-code","text":"on Linux on MacOS on Windows Additional packages on Linux: sudo apt update sudo apt install git python3-venv","title":"Install Visual Studio Code"},{"location":"compiling/#clone-hasp-lvgl","text":"Make sure to add the --recursive parameter when cloning the project from GitHub. Otherwise git will not download the required submodules in the /lib subdirectory. git clone --recursive https://github.com/fvanroie/hasp-lvgl If you already cloned hasp-lvgl without the submodules, you can fetch the submodules seperately using: git submodule update --init --recursive To switch to a different branch use: git clone --recursive https://github.com/fvanroie/hasp-lvgl cd hasp-lvgl git checkout 0.2.0 git submodule update --init --recursive","title":"Clone hasp-lvgl"},{"location":"compiling/#open-in-platformio","text":"Open the project folder in Visual Studio Code . You will receive a popup to install PlatformIO IDE if it is not already installed. This will automatically install all PlatformIO dependencies and the MCU compiler frameworks needed. Restart Visual Studio Code when the PIO installation completes.","title":"Open in PlatformIO"},{"location":"compiling/#create-a-configuration","text":"Copy platformio_override-template.ini to platformio_override.ini and uncomment the platforms for esp32 and esp8266 : [platformio] extra_configs = ; Uncomment or edit the lines to show more User Setups in the PIO sidebar user_setups/esp32/*.ini user_setups/esp8266/*.ini ; user_setups/stm32f4xx/*.ini Then Click on the \"Refresh Project tasks\" icon in PlatformIO to list all the configured environments.","title":"Create a configuration"},{"location":"compiling/#compile","text":"","title":"Compile"},{"location":"compiling/#mcu-environments","text":"You can now run \"Build\" or \"Build All\" in PlatformIO to compile (all) the firmware.","title":"MCU Environments"},{"location":"compiling/#native-linux-build","text":"For native linux_sdl builds, you also need: sudo apt update sudo apt install build-essential libsdl2-dev","title":"Native Linux build"},{"location":"compiling/#native-macos-build","text":"For native darwin_sdl builds, you also need Homebrew : brew install gcc sdl2","title":"Native MacOS build"},{"location":"compiling/#native-windows-build","text":"For native windows_sdl builds, you also need MingW: Use MSYS2 pacman -S mingw-w64-x86_64-gcc mingw-w64-x86_64-SDL2 Add the path to your Mingw-w64 bin folder to the Windows PATH environment variable (usually C:\\msys64\\mingw64\\bin ). See instruction, 4 .","title":"Native Windows build"},{"location":"compiling/#development","text":"","title":"Development"},{"location":"compiling/#block-diagram","text":"","title":"Block Diagram"},{"location":"compiling/#mqtt-tests","text":"To run the tavern testing suite, install the tavern python package and configure test\\config.yaml with your broker settings. pip install tavern tavern-ci .\\test\\","title":"MQTT Tests"},{"location":"example-0/","text":"Widgets Demo Code ~ This is a real-world example of a pages.jsonl file: {\"page\":1,\"comment\":\"---------- Page 1 ----------\"} {\"obj\":\"btn\",\"id\":1,\"x\":10,\"y\":45,\"w\":220,\"h\":55,\"toggle\":true,\"text\":\"Push Me \\uf0a6\"} {\"obj\":\"cb\",\"id\":2,\"x\":10,\"y\":100,\"w\":220,\"h\":55,\"text\":\"A Checkbox\"} {\"obj\":\"label\",\"id\":3,\"x\":10,\"y\":10,\"w\":220,\"h\":30,\"text\":\"My Label\",\"align\":1,\"padh\":50} {\"obj\":\"switch\",\"id\":4,\"x\":70,\"y\":205,\"w\":100,\"h\":55} {\"obj\":\"led\",\"id\":5,\"x\":10,\"y\":205,\"w\":55,\"h\":55} {\"obj\":\"dropdown\",\"id\":6,\"x\":10,\"y\":150,\"w\":150,\"options\":\"\\uf007 Line 1\\n\\uf007 Line 2\\n\\uf007 Line 3\"} {\"obj\":\"spinner\",\"id\":7,\"x\":165,\"y\":140,\"w\":70,\"h\":70} {\"page\":2,\"comment\":\"---------- Page 2 ----------\"} {\"obj\":\"slider\",\"id\":1,\"x\":10,\"y\":170,\"w\":200,\"h\":50} {\"obj\":\"gauge\",\"id\":3,\"x\":13,\"y\":10,\"w\":100,\"h\":100} {\"obj\":\"bar\",\"id\":4,\"x\":10,\"y\":110,\"w\":200,\"h\":50} {\"obj\":\"lmeter\",\"id\":5,\"x\":127,\"y\":10,\"w\":100,\"h\":100} {\"obj\":\"label\",\"id\":10,\"x\":0,\"y\":0,\"w\":70,\"h\":50,\"parentid\":5,\"text\":\"\\uf00c OK\"} {\"comment\":\"---------- Page 3 ----------\"} {\"obj\":\"cpicker\",\"id\":1,\"page\":3,\"x\":20,\"y\":0,\"w\":200,\"h\":200} {\"obj\":\"cpicker\",\"id\":2,\"page\":3,\"x\":20,\"y\":210,\"w\":200,\"h\":50,\"rect\":true} {\"page\":4,\"comment\":\"---------- Page 4 ----------\"} {\"obj\":\"dropdown\",\"id\":1,\"x\":10,\"y\":10,\"w\":220,\"options\":\"Spring\\nSummer\\nAutumn\\nWinter\"} {\"obj\":\"roller\",\"id\":2,\"x\":40,\"y\":50,\"w\":160,\"rows\":3,\"options\":\"2020\\n2021\\n2022\\n2023\\n2024\"} {\"page\":0,\"comment\":\"---------- All Pages ----------\"} {\"obj\":\"btn\",\"id\":1,\"x\":0,\"y\":270,\"w\":75,\"h\":50,\"opacity\":100,\"text\":\"\\uF053 Prev\"} {\"obj\":\"btn\",\"id\":2,\"x\":75,\"y\":270,\"w\":90,\"h\":50,\"opacity\":100,\"text\":\"\\uF015 Home\"} {\"obj\":\"btn\",\"id\":3,\"x\":165,\"y\":270,\"w\":75,\"h\":50,\"opacity\":100,\"text\":\"Next \\uF054\"} Result ~","title":"Widgets Demo"},{"location":"example-0/#code","text":"This is a real-world example of a pages.jsonl file: {\"page\":1,\"comment\":\"---------- Page 1 ----------\"} {\"obj\":\"btn\",\"id\":1,\"x\":10,\"y\":45,\"w\":220,\"h\":55,\"toggle\":true,\"text\":\"Push Me \\uf0a6\"} {\"obj\":\"cb\",\"id\":2,\"x\":10,\"y\":100,\"w\":220,\"h\":55,\"text\":\"A Checkbox\"} {\"obj\":\"label\",\"id\":3,\"x\":10,\"y\":10,\"w\":220,\"h\":30,\"text\":\"My Label\",\"align\":1,\"padh\":50} {\"obj\":\"switch\",\"id\":4,\"x\":70,\"y\":205,\"w\":100,\"h\":55} {\"obj\":\"led\",\"id\":5,\"x\":10,\"y\":205,\"w\":55,\"h\":55} {\"obj\":\"dropdown\",\"id\":6,\"x\":10,\"y\":150,\"w\":150,\"options\":\"\\uf007 Line 1\\n\\uf007 Line 2\\n\\uf007 Line 3\"} {\"obj\":\"spinner\",\"id\":7,\"x\":165,\"y\":140,\"w\":70,\"h\":70} {\"page\":2,\"comment\":\"---------- Page 2 ----------\"} {\"obj\":\"slider\",\"id\":1,\"x\":10,\"y\":170,\"w\":200,\"h\":50} {\"obj\":\"gauge\",\"id\":3,\"x\":13,\"y\":10,\"w\":100,\"h\":100} {\"obj\":\"bar\",\"id\":4,\"x\":10,\"y\":110,\"w\":200,\"h\":50} {\"obj\":\"lmeter\",\"id\":5,\"x\":127,\"y\":10,\"w\":100,\"h\":100} {\"obj\":\"label\",\"id\":10,\"x\":0,\"y\":0,\"w\":70,\"h\":50,\"parentid\":5,\"text\":\"\\uf00c OK\"} {\"comment\":\"---------- Page 3 ----------\"} {\"obj\":\"cpicker\",\"id\":1,\"page\":3,\"x\":20,\"y\":0,\"w\":200,\"h\":200} {\"obj\":\"cpicker\",\"id\":2,\"page\":3,\"x\":20,\"y\":210,\"w\":200,\"h\":50,\"rect\":true} {\"page\":4,\"comment\":\"---------- Page 4 ----------\"} {\"obj\":\"dropdown\",\"id\":1,\"x\":10,\"y\":10,\"w\":220,\"options\":\"Spring\\nSummer\\nAutumn\\nWinter\"} {\"obj\":\"roller\",\"id\":2,\"x\":40,\"y\":50,\"w\":160,\"rows\":3,\"options\":\"2020\\n2021\\n2022\\n2023\\n2024\"} {\"page\":0,\"comment\":\"---------- All Pages ----------\"} {\"obj\":\"btn\",\"id\":1,\"x\":0,\"y\":270,\"w\":75,\"h\":50,\"opacity\":100,\"text\":\"\\uF053 Prev\"} {\"obj\":\"btn\",\"id\":2,\"x\":75,\"y\":270,\"w\":90,\"h\":50,\"opacity\":100,\"text\":\"\\uF015 Home\"} {\"obj\":\"btn\",\"id\":3,\"x\":165,\"y\":270,\"w\":75,\"h\":50,\"opacity\":100,\"text\":\"Next \\uF054\"}","title":"Code"},{"location":"example-0/#result","text":"","title":"Result"},{"location":"example-1/","text":"Jaffa Sunrise Code ~ This is an example of a pages.jsonl file: {\"page\":1,\"comment\":\"---------- Page 1 ----------\"} {\"obj\":\"btn\",\"id\":4,\"x\":5,\"y\":5,\"w\":230,\"h\":58,\"bg_color\":\"#000000\",\"border_color\":\"#FFAC00\",\"border_width\":2,\"radius\":10,\"radius1\":10,\"radius2\":10,\"text\":\"Lights On\",\"value_ofs_x\":-85,\"value_font\":1,\"value_str\":\"\\uf205\",\"value_color\":\"#B6B6B6\",\"text_color\":\"#B6B6B6\",\"text_font\":22} {\"obj\":\"btn\",\"id\":5,\"x\":5,\"y\":68,\"w\":230,\"h\":58,\"bg_color\":\"#000000\",\"border_color\":\"#FFAC00\",\"border_width\":2,\"radius\":10,\"radius1\":10,\"radius2\":10,\"text\":\"Daylight\",\"value_ofs_x\":-85,\"value_font\":1,\"value_str\":\"\\uf185\",\"value_color\":\"#B6B6B6\",\"text_color\":\"#B6B6B6\",\"text_font\":22} {\"obj\":\"btn\",\"id\":6,\"x\":5,\"y\":131,\"w\":230,\"h\":58,\"bg_color\":\"#000000\",\"border_color\":\"#FFAC00\",\"border_width\":2,\"radius\":10,\"radius1\":10,\"radius2\":10,\"text\":\"Night\",\"value_ofs_x\":-85,\"value_font\":1,\"value_str\":\"\\uf186\",\"value_color\":\"#B6B6B6\",\"text_color\":\"#B6B6B6\",\"text_font\":22} {\"obj\":\"btn\",\"id\":7,\"x\":5,\"y\":194,\"w\":230,\"h\":58,\"bg_color\":\"#000000\",\"border_color\":\"#FFAC00\",\"border_width\":2,\"radius\":10,\"radius1\":10,\"radius2\":10,\"text\":\"Lights Off\",\"value_ofs_x\":-85,\"value_font\":1,\"value_str\":\"\\uf204\",\"value_color\":\"#B6B6B6\",\"text_color\":\"#B6B6B6\",\"text_font\":22} {\"page\":2,\"comment\":\"---------- Page 2 ----------\"} {\"obj\":\"label\",\"id\":8,\"x\":5,\"y\":5,\"w\":230,\"h\":30,\"bg_color\":\"#000000\",\"border_color\":\"#C7BAA7\",\"border_width\":0,\"radius\":10,\"radius1\":10,\"radius2\":10,\"text\":\"Kitchen Dimmer\",\"text_color\":\"#B6B6B6\",\"text_font\":22} {\"obj\":\"label\",\"id\":9,\"x\":5,\"y\":80,\"w\":230,\"h\":30,\"bg_color\":\"#000000\",\"border_color\":\"#C7BAA7\",\"border_width\":0,\"radius\":10,\"radius1\":10,\"radius2\":10,\"text\":\"Dining Dimmer\",\"text_color\":\"#B6B6B6\",\"text_font\":22} {\"obj\":\"label\",\"id\":10,\"x\":5,\"y\":165,\"w\":230,\"h\":30,\"bg_color\":\"#000000\",\"border_color\":\"#C7BAA7\",\"border_width\":0,\"radius\":10,\"radius1\":10,\"radius2\":10,\"text\":\"Front Blinds\",\"text_color\":\"#B6B6B6\",\"text_font\":22} {\"obj\":\"slider\",\"id\":11,\"x\":20,\"y\":40,\"w\":200,\"h\":30,\"bg_color\":\"#C7BAA7\",\"border_color\":\"#C7BAA7\",\"border_width\":0,\"radius\":15,\"radius1\":15,\"radius2\":20,\"text_font\":1,\"val\":80,\"bg_color1\":\"#FFAC00\",\"bg_color2\":\"#DC5C05\"} {\"obj\":\"slider\",\"id\":12,\"x\":20,\"y\":120,\"w\":200,\"h\":30,\"bg_color\":\"#C7BAA7\",\"border_color\":\"#C7BAA7\",\"border_width\":0,\"radius\":15,\"radius1\":15,\"radius2\":20,\"text_font\":1,\"val\":65,\"bg_color1\":\"#FFAC00\",\"bg_color2\":\"#DC5C05\"} {\"obj\":\"slider\",\"id\":13,\"x\":20,\"y\":205,\"w\":200,\"h\":30,\"bg_color\":\"#C7BAA7\",\"border_color\":\"#C7BAA7\",\"border_width\":0,\"radius\":15,\"radius1\":15,\"radius2\":20,\"text_font\":1,\"val\":25,\"bg_color1\":\"#FFAC00\",\"bg_color2\":\"#DC5C05\"} {\"page\":3,\"comment\":\"---------- Page 3 ----------\"} {\"obj\":\"label\",\"id\":14,\"x\":42,\"y\":10,\"w\":236,\"h\":30,\"bg_color\":\"#000000\",\"border_color\":\"#C7BAA7\",\"border_width\":0,\"text\":\"Gold\",\"text_color\":\"#C7BAA7\",\"text_font\":22} {\"obj\":\"label\",\"id\":15,\"x\":42,\"y\":60,\"mode\":\"scroll\",\"w\":236,\"h\":30,\"bg_color\":\"#000000\",\"border_color\":\"#C7BAA7\",\"border_width\":0,\"text\":\"Chet Faker\",\"text_color\":\"#C7BAA7\",\"text_font\":22} {\"obj\":\"btn\",\"id\":16,\"x\":2,\"y\":140,\"w\":76,\"h\":61,\"bg_color\":\"#000000\",\"border_color\":\"#FFAC00\",\"border_width\":2,\"radius\":10,\"radius1\":10,\"radius2\":10,\"text\":\"\\uf048\",\"text_color\":\"#C7BAA7\",\"text_font\":1} {\"obj\":\"btn\",\"id\":17,\"x\":82,\"y\":140,\"w\":76,\"h\":61,\"bg_color\":\"#000000\",\"border_color\":\"#FFAC00\",\"border_width\":2,\"radius\":10,\"radius1\":10,\"radius2\":10,\"text\":\"\\uf04c\",\"text_color\":\"#C7BAA7\",\"text_font\":1} {\"obj\":\"btn\",\"id\":18,\"x\":162,\"y\":140,\"w\":76,\"h\":61,\"bg_color\":\"#000000\",\"border_color\":\"#FFAC00\",\"border_width\":2,\"radius\":10,\"radius1\":10,\"radius2\":10,\"text\":\"\\uf051\",\"text_color\":\"#C7BAA7\",\"text_font\":1} {\"obj\":\"bar\",\"id\":19,\"x\":2,\"y\":105,\"w\":236,\"h\":20,\"bg_color\":\"#C7BAA7\",\"border_color\":\"#C7BAA7\",\"border_width\":0,\"radius\":15,\"radius1\":15,\"radius2\":15,\"text_font\":1,\"val\":65,\"bg_color1\":\"#FFAC00\"} {\"obj\":\"slider\",\"id\":20,\"x\":35,\"y\":220,\"w\":170,\"h\":30,\"bg_color\":\"#C7BAA7\",\"border_color\":\"#C7BAA7\",\"border_width\":0,\"radius\":15,\"radius1\":15,\"radius2\":20,\"text_font\":1,\"val\":30,\"bg_color1\":\"#FFAC00\",\"bg_color2\":\"#DC5C05\"} {\"obj\":\"label\",\"id\":21,\"x\":2,\"y\":2,\"w\":40,\"h\":61,\"bg_color\":\"#000000\",\"border_color\":\"#C7BAA7\",\"border_width\":0,\"text\":\"\\uf001\",\"text_color\":\"#C7BAA7\",\"text_font\":1} {\"obj\":\"label\",\"id\":22,\"x\":10,\"y\":51,\"w\":36,\"h\":61,\"bg_color\":\"#000000\",\"border_color\":\"#C7BAA7\",\"border_width\":0,\"text\":\"\\uf3e0\",\"text_color\":\"#C7BAA7\",\"text_font\":1} {\"obj\":\"label\",\"id\":23,\"x\":5,\"y\":224,\"w\":25,\"h\":40,\"bg_color\":\"#000000\",\"border_color\":\"#C7BAA7\",\"border_width\":0,\"text\":\"\\uf026\",\"text_color\":\"#C7BAA7\",\"text_font\":22} {\"obj\":\"label\",\"id\":24,\"x\":210,\"y\":224,\"w\":25,\"h\":40,\"bg_color\":\"#000000\",\"border_color\":\"#C7BAA7\",\"border_width\":0,\"text\":\"\\uf028\",\"text_color\":\"#C7BAA7\",\"text_font\":22} {\"page\":0,\"comment\":\"---------- All pages ----------\"} {\"obj\":\"btn\",\"id\":1,\"page\":0,\"x\":5,\"y\":257,\"w\":73,\"h\":58,\"bg_color\":\"#000000\",\"border_color\":\"#C7BAA7\",\"border_width\":0,\"radius\":10,\"radius1\":10,\"radius2\":10,\"text\":\"\\uf060\",\"text_color\":\"#978B7D\",\"text_font\":1} {\"obj\":\"btn\",\"id\":2,\"page\":0,\"x\":83,\"y\":257,\"w\":73,\"h\":58,\"bg_color\":\"#000000\",\"border_color\":\"#C7BAA7\",\"border_width\":0,\"radius\":10,\"radius1\":10,\"radius2\":10,\"text\":\"\\uf039\",\"text_color\":\"#978B7D\",\"text_font\":1} {\"obj\":\"btn\",\"id\":3,\"page\":0,\"x\":161,\"y\":257,\"w\":73,\"h\":58,\"bg_color\":\"#000000\",\"border_color\":\"#C7BAA7\",\"border_width\":0,\"radius\":10,\"radius1\":10,\"radius2\":10,\"text\":\"\\uf061\",\"text_color\":\"#978B7D\",\"text_font\":1} OpenHab ~ The config files to have this demo load automatically can be found here . Result ~","title":"Jaffa Sunrise"},{"location":"example-1/#code","text":"This is an example of a pages.jsonl file: {\"page\":1,\"comment\":\"---------- Page 1 ----------\"} {\"obj\":\"btn\",\"id\":4,\"x\":5,\"y\":5,\"w\":230,\"h\":58,\"bg_color\":\"#000000\",\"border_color\":\"#FFAC00\",\"border_width\":2,\"radius\":10,\"radius1\":10,\"radius2\":10,\"text\":\"Lights On\",\"value_ofs_x\":-85,\"value_font\":1,\"value_str\":\"\\uf205\",\"value_color\":\"#B6B6B6\",\"text_color\":\"#B6B6B6\",\"text_font\":22} {\"obj\":\"btn\",\"id\":5,\"x\":5,\"y\":68,\"w\":230,\"h\":58,\"bg_color\":\"#000000\",\"border_color\":\"#FFAC00\",\"border_width\":2,\"radius\":10,\"radius1\":10,\"radius2\":10,\"text\":\"Daylight\",\"value_ofs_x\":-85,\"value_font\":1,\"value_str\":\"\\uf185\",\"value_color\":\"#B6B6B6\",\"text_color\":\"#B6B6B6\",\"text_font\":22} {\"obj\":\"btn\",\"id\":6,\"x\":5,\"y\":131,\"w\":230,\"h\":58,\"bg_color\":\"#000000\",\"border_color\":\"#FFAC00\",\"border_width\":2,\"radius\":10,\"radius1\":10,\"radius2\":10,\"text\":\"Night\",\"value_ofs_x\":-85,\"value_font\":1,\"value_str\":\"\\uf186\",\"value_color\":\"#B6B6B6\",\"text_color\":\"#B6B6B6\",\"text_font\":22} {\"obj\":\"btn\",\"id\":7,\"x\":5,\"y\":194,\"w\":230,\"h\":58,\"bg_color\":\"#000000\",\"border_color\":\"#FFAC00\",\"border_width\":2,\"radius\":10,\"radius1\":10,\"radius2\":10,\"text\":\"Lights Off\",\"value_ofs_x\":-85,\"value_font\":1,\"value_str\":\"\\uf204\",\"value_color\":\"#B6B6B6\",\"text_color\":\"#B6B6B6\",\"text_font\":22} {\"page\":2,\"comment\":\"---------- Page 2 ----------\"} {\"obj\":\"label\",\"id\":8,\"x\":5,\"y\":5,\"w\":230,\"h\":30,\"bg_color\":\"#000000\",\"border_color\":\"#C7BAA7\",\"border_width\":0,\"radius\":10,\"radius1\":10,\"radius2\":10,\"text\":\"Kitchen Dimmer\",\"text_color\":\"#B6B6B6\",\"text_font\":22} {\"obj\":\"label\",\"id\":9,\"x\":5,\"y\":80,\"w\":230,\"h\":30,\"bg_color\":\"#000000\",\"border_color\":\"#C7BAA7\",\"border_width\":0,\"radius\":10,\"radius1\":10,\"radius2\":10,\"text\":\"Dining Dimmer\",\"text_color\":\"#B6B6B6\",\"text_font\":22} {\"obj\":\"label\",\"id\":10,\"x\":5,\"y\":165,\"w\":230,\"h\":30,\"bg_color\":\"#000000\",\"border_color\":\"#C7BAA7\",\"border_width\":0,\"radius\":10,\"radius1\":10,\"radius2\":10,\"text\":\"Front Blinds\",\"text_color\":\"#B6B6B6\",\"text_font\":22} {\"obj\":\"slider\",\"id\":11,\"x\":20,\"y\":40,\"w\":200,\"h\":30,\"bg_color\":\"#C7BAA7\",\"border_color\":\"#C7BAA7\",\"border_width\":0,\"radius\":15,\"radius1\":15,\"radius2\":20,\"text_font\":1,\"val\":80,\"bg_color1\":\"#FFAC00\",\"bg_color2\":\"#DC5C05\"} {\"obj\":\"slider\",\"id\":12,\"x\":20,\"y\":120,\"w\":200,\"h\":30,\"bg_color\":\"#C7BAA7\",\"border_color\":\"#C7BAA7\",\"border_width\":0,\"radius\":15,\"radius1\":15,\"radius2\":20,\"text_font\":1,\"val\":65,\"bg_color1\":\"#FFAC00\",\"bg_color2\":\"#DC5C05\"} {\"obj\":\"slider\",\"id\":13,\"x\":20,\"y\":205,\"w\":200,\"h\":30,\"bg_color\":\"#C7BAA7\",\"border_color\":\"#C7BAA7\",\"border_width\":0,\"radius\":15,\"radius1\":15,\"radius2\":20,\"text_font\":1,\"val\":25,\"bg_color1\":\"#FFAC00\",\"bg_color2\":\"#DC5C05\"} {\"page\":3,\"comment\":\"---------- Page 3 ----------\"} {\"obj\":\"label\",\"id\":14,\"x\":42,\"y\":10,\"w\":236,\"h\":30,\"bg_color\":\"#000000\",\"border_color\":\"#C7BAA7\",\"border_width\":0,\"text\":\"Gold\",\"text_color\":\"#C7BAA7\",\"text_font\":22} {\"obj\":\"label\",\"id\":15,\"x\":42,\"y\":60,\"mode\":\"scroll\",\"w\":236,\"h\":30,\"bg_color\":\"#000000\",\"border_color\":\"#C7BAA7\",\"border_width\":0,\"text\":\"Chet Faker\",\"text_color\":\"#C7BAA7\",\"text_font\":22} {\"obj\":\"btn\",\"id\":16,\"x\":2,\"y\":140,\"w\":76,\"h\":61,\"bg_color\":\"#000000\",\"border_color\":\"#FFAC00\",\"border_width\":2,\"radius\":10,\"radius1\":10,\"radius2\":10,\"text\":\"\\uf048\",\"text_color\":\"#C7BAA7\",\"text_font\":1} {\"obj\":\"btn\",\"id\":17,\"x\":82,\"y\":140,\"w\":76,\"h\":61,\"bg_color\":\"#000000\",\"border_color\":\"#FFAC00\",\"border_width\":2,\"radius\":10,\"radius1\":10,\"radius2\":10,\"text\":\"\\uf04c\",\"text_color\":\"#C7BAA7\",\"text_font\":1} {\"obj\":\"btn\",\"id\":18,\"x\":162,\"y\":140,\"w\":76,\"h\":61,\"bg_color\":\"#000000\",\"border_color\":\"#FFAC00\",\"border_width\":2,\"radius\":10,\"radius1\":10,\"radius2\":10,\"text\":\"\\uf051\",\"text_color\":\"#C7BAA7\",\"text_font\":1} {\"obj\":\"bar\",\"id\":19,\"x\":2,\"y\":105,\"w\":236,\"h\":20,\"bg_color\":\"#C7BAA7\",\"border_color\":\"#C7BAA7\",\"border_width\":0,\"radius\":15,\"radius1\":15,\"radius2\":15,\"text_font\":1,\"val\":65,\"bg_color1\":\"#FFAC00\"} {\"obj\":\"slider\",\"id\":20,\"x\":35,\"y\":220,\"w\":170,\"h\":30,\"bg_color\":\"#C7BAA7\",\"border_color\":\"#C7BAA7\",\"border_width\":0,\"radius\":15,\"radius1\":15,\"radius2\":20,\"text_font\":1,\"val\":30,\"bg_color1\":\"#FFAC00\",\"bg_color2\":\"#DC5C05\"} {\"obj\":\"label\",\"id\":21,\"x\":2,\"y\":2,\"w\":40,\"h\":61,\"bg_color\":\"#000000\",\"border_color\":\"#C7BAA7\",\"border_width\":0,\"text\":\"\\uf001\",\"text_color\":\"#C7BAA7\",\"text_font\":1} {\"obj\":\"label\",\"id\":22,\"x\":10,\"y\":51,\"w\":36,\"h\":61,\"bg_color\":\"#000000\",\"border_color\":\"#C7BAA7\",\"border_width\":0,\"text\":\"\\uf3e0\",\"text_color\":\"#C7BAA7\",\"text_font\":1} {\"obj\":\"label\",\"id\":23,\"x\":5,\"y\":224,\"w\":25,\"h\":40,\"bg_color\":\"#000000\",\"border_color\":\"#C7BAA7\",\"border_width\":0,\"text\":\"\\uf026\",\"text_color\":\"#C7BAA7\",\"text_font\":22} {\"obj\":\"label\",\"id\":24,\"x\":210,\"y\":224,\"w\":25,\"h\":40,\"bg_color\":\"#000000\",\"border_color\":\"#C7BAA7\",\"border_width\":0,\"text\":\"\\uf028\",\"text_color\":\"#C7BAA7\",\"text_font\":22} {\"page\":0,\"comment\":\"---------- All pages ----------\"} {\"obj\":\"btn\",\"id\":1,\"page\":0,\"x\":5,\"y\":257,\"w\":73,\"h\":58,\"bg_color\":\"#000000\",\"border_color\":\"#C7BAA7\",\"border_width\":0,\"radius\":10,\"radius1\":10,\"radius2\":10,\"text\":\"\\uf060\",\"text_color\":\"#978B7D\",\"text_font\":1} {\"obj\":\"btn\",\"id\":2,\"page\":0,\"x\":83,\"y\":257,\"w\":73,\"h\":58,\"bg_color\":\"#000000\",\"border_color\":\"#C7BAA7\",\"border_width\":0,\"radius\":10,\"radius1\":10,\"radius2\":10,\"text\":\"\\uf039\",\"text_color\":\"#978B7D\",\"text_font\":1} {\"obj\":\"btn\",\"id\":3,\"page\":0,\"x\":161,\"y\":257,\"w\":73,\"h\":58,\"bg_color\":\"#000000\",\"border_color\":\"#C7BAA7\",\"border_width\":0,\"radius\":10,\"radius1\":10,\"radius2\":10,\"text\":\"\\uf061\",\"text_color\":\"#978B7D\",\"text_font\":1}","title":"Code"},{"location":"example-1/#openhab","text":"The config files to have this demo load automatically can be found here .","title":"OpenHab"},{"location":"example-1/#result","text":"","title":"Result"},{"location":"example-2/","text":"Dash UI Code ~ pages.jsonl file: {\"page\":1,\"comment\":\"---------- Page 1 ----------\"} {\"id\":0,\"bg_color\":\"#FFFFFF\",\"text_color\":\"#000000\",\"radius\":0,\"border_side\":0} {\"obj\":\"btn\",\"id\":1,\"x\":0,\"y\":0,\"w\":240,\"h\":30,\"text\":\"LIVING ROOM\",\"value_font\":22,\"bg_color\":\"#2C3E50\",\"text_color\":\"#FFFFFF\",\"radius\":0,\"border_side\":0} {\"obj\":\"arc\",\"id\":2,\"x\":5,\"y\":45,\"w\":140,\"h\":100,\"max\":40,\"border_side\":0,\"type\":0,\"rotation\":0,\"start_angle\":180,\"end_angle\":0,\"start_angle1\":180,\"value_font\":12,\"value_ofs_x\":-19,\"value_ofs_y\":-4,\"bg_opa\":0} {\"obj\":\"arc\",\"id\":3,\"x\":130,\"y\":45,\"w\":140,\"h\":100,\"max\":100,\"border_side\":0,\"type\":0,\"start_angle\":180,\"end_angle\":0,\"start_angle1\":180,\"value_font\":12,\"value_color\":\"#000000\",\"value_ofs_x\":-19,\"value_ofs_y\":-4,\"bg_opa\":0} {\"obj\":\"btn\",\"id\":4,\"x\":0,\"y\":120,\"w\":240,\"h\":20,\"val\":0,\"text\":\"CO2 levels: \",\"radius\":0,\"border_side\":0} {\"obj\":\"label\",\"id\":5,\"x\":2,\"y\":35,\"w\":140,\"text\":\"Temperature\"} {\"obj\":\"label\",\"id\":6,\"x\":140,\"y\":35,\"w\":140,\"text\":\"Humidity\"} {\"obj\":\"btn\",\"id\":7,\"x\":0,\"y\":160,\"w\":240,\"h\":20,\"text\":\"LIGHTS\",\"bg_color\":\"#F1C40F\",\"text_color\":\"#FFFFFF\",\"radius\":0,\"border_side\":0} {\"obj\":\"label\",\"id\":8,\"x\":20,\"y\":190,\"w\":140,\"h\":20,\"text\":\"Ceiling Light\"} {\"obj\":\"switch\",\"id\":9,\"x\":160,\"y\":190,\"w\":40,\"h\":20,\"toggle\":\"TRUE\"} {\"obj\":\"label\",\"id\":10,\"x\":20,\"y\":215,\"w\":140,\"h\":20,\"text\":\"Wall Light\"} {\"obj\":\"switch\",\"id\":11,\"x\":160,\"y\":215,\"w\":40,\"h\":20,\"toggle\":\"TRUE\"} {\"obj\":\"label\",\"id\":12,\"x\":20,\"y\":240,\"w\":200,\"h\":20,\"text\":\"Ambient Light\"} {\"obj\":\"slider\",\"id\":13,\"x\":30,\"y\":265,\"w\":200,\"h\":10} {\"page\":0,\"comment\":\"---------- All pages ----------\"} {\"page\":0,\"obj\":\"btn\",\"id\":1,\"x\":0,\"y\":290,\"w\":76,\"h\":30,\"opacity\":50,\"text\":\"\\uF053\",\"radius\":0,\"bg_color\":\"#34495E\",\"text_color\":\"#000000\"} {\"page\":0,\"obj\":\"btn\",\"id\":2,\"x\":75,\"y\":290,\"w\":90,\"h\":30,\"opacity\":100,\"text\":\"\\uF015\",\"radius\":0,\"bg_color\":\"#34495E\",\"text_color\":\"#000000\"} {\"page\":0,\"obj\":\"btn\",\"id\":3,\"x\":164,\"y\":290,\"w\":76,\"h\":30,\"opacity\":100,\"text\":\"\\uF054\",\"radius\":0,\"bg_color\":\"#34495E\",\"text_color\":\"#000000\"} Result ~ Values for Temperature, Humidity and CO2 Sensor are sent from another device by publishing to the appropriate command topic: hasp/lanbon/command/p1b2.val %value% - update Temperature arc value hasp/lanbon/command/p1b2.value_str %value%\u00b0C - update Temperature text value hasp/lanbon/command/p1b3.val %value% - update Humidity arc value hasp/lanbon/command/p1b3.value_str %value% % - update Humidity text value hasp/lanbon/command/p1b4.text CO2 levels: %value% - update CO2 level value","title":"Dash UI"},{"location":"example-2/#code","text":"pages.jsonl file: {\"page\":1,\"comment\":\"---------- Page 1 ----------\"} {\"id\":0,\"bg_color\":\"#FFFFFF\",\"text_color\":\"#000000\",\"radius\":0,\"border_side\":0} {\"obj\":\"btn\",\"id\":1,\"x\":0,\"y\":0,\"w\":240,\"h\":30,\"text\":\"LIVING ROOM\",\"value_font\":22,\"bg_color\":\"#2C3E50\",\"text_color\":\"#FFFFFF\",\"radius\":0,\"border_side\":0} {\"obj\":\"arc\",\"id\":2,\"x\":5,\"y\":45,\"w\":140,\"h\":100,\"max\":40,\"border_side\":0,\"type\":0,\"rotation\":0,\"start_angle\":180,\"end_angle\":0,\"start_angle1\":180,\"value_font\":12,\"value_ofs_x\":-19,\"value_ofs_y\":-4,\"bg_opa\":0} {\"obj\":\"arc\",\"id\":3,\"x\":130,\"y\":45,\"w\":140,\"h\":100,\"max\":100,\"border_side\":0,\"type\":0,\"start_angle\":180,\"end_angle\":0,\"start_angle1\":180,\"value_font\":12,\"value_color\":\"#000000\",\"value_ofs_x\":-19,\"value_ofs_y\":-4,\"bg_opa\":0} {\"obj\":\"btn\",\"id\":4,\"x\":0,\"y\":120,\"w\":240,\"h\":20,\"val\":0,\"text\":\"CO2 levels: \",\"radius\":0,\"border_side\":0} {\"obj\":\"label\",\"id\":5,\"x\":2,\"y\":35,\"w\":140,\"text\":\"Temperature\"} {\"obj\":\"label\",\"id\":6,\"x\":140,\"y\":35,\"w\":140,\"text\":\"Humidity\"} {\"obj\":\"btn\",\"id\":7,\"x\":0,\"y\":160,\"w\":240,\"h\":20,\"text\":\"LIGHTS\",\"bg_color\":\"#F1C40F\",\"text_color\":\"#FFFFFF\",\"radius\":0,\"border_side\":0} {\"obj\":\"label\",\"id\":8,\"x\":20,\"y\":190,\"w\":140,\"h\":20,\"text\":\"Ceiling Light\"} {\"obj\":\"switch\",\"id\":9,\"x\":160,\"y\":190,\"w\":40,\"h\":20,\"toggle\":\"TRUE\"} {\"obj\":\"label\",\"id\":10,\"x\":20,\"y\":215,\"w\":140,\"h\":20,\"text\":\"Wall Light\"} {\"obj\":\"switch\",\"id\":11,\"x\":160,\"y\":215,\"w\":40,\"h\":20,\"toggle\":\"TRUE\"} {\"obj\":\"label\",\"id\":12,\"x\":20,\"y\":240,\"w\":200,\"h\":20,\"text\":\"Ambient Light\"} {\"obj\":\"slider\",\"id\":13,\"x\":30,\"y\":265,\"w\":200,\"h\":10} {\"page\":0,\"comment\":\"---------- All pages ----------\"} {\"page\":0,\"obj\":\"btn\",\"id\":1,\"x\":0,\"y\":290,\"w\":76,\"h\":30,\"opacity\":50,\"text\":\"\\uF053\",\"radius\":0,\"bg_color\":\"#34495E\",\"text_color\":\"#000000\"} {\"page\":0,\"obj\":\"btn\",\"id\":2,\"x\":75,\"y\":290,\"w\":90,\"h\":30,\"opacity\":100,\"text\":\"\\uF015\",\"radius\":0,\"bg_color\":\"#34495E\",\"text_color\":\"#000000\"} {\"page\":0,\"obj\":\"btn\",\"id\":3,\"x\":164,\"y\":290,\"w\":76,\"h\":30,\"opacity\":100,\"text\":\"\\uF054\",\"radius\":0,\"bg_color\":\"#34495E\",\"text_color\":\"#000000\"}","title":"Code"},{"location":"example-2/#result","text":"Values for Temperature, Humidity and CO2 Sensor are sent from another device by publishing to the appropriate command topic: hasp/lanbon/command/p1b2.val %value% - update Temperature arc value hasp/lanbon/command/p1b2.value_str %value%\u00b0C - update Temperature text value hasp/lanbon/command/p1b3.val %value% - update Humidity arc value hasp/lanbon/command/p1b3.value_str %value% % - update Humidity text value hasp/lanbon/command/p1b4.text CO2 levels: %value% - update CO2 level value","title":"Result"},{"location":"faq/","text":"Frequently Asked Questions The font looks tiny ~ On ESP8266, the out-of-the box font is Unscii 8pt because this font takes up very little space in memory and on flash. This default font is just intended to get the device setup, then you can Upload your own .zi font. On ESP32, the default font is Monserrat 12. How to use Fontawesome icons? ~ Upload another .zi file named fontawesome xx .zi of the same point size as the normal text .zi font. e.g. If your custom font is arial24.zi\u00b4, you should also add a fontawesome24.zi` file. You can download fontawesome.zip from the HMI Font Pack repository. Is there a file browser built-in? ~ A: There is no native file browser included yet, as this currently is low on the priority list. However, you can upload the edit.htm.gz (3kB) file to the flash partition from the ESP32 FSBrowser repository. Download it from: https://github.com/espressif/arduino-esp32/blob/master/libraries/WebServer/examples/FSBrowser/data/edit.htm.gz When the edit.htm.gz file is present on the flash partition you will see an additional File Browser button on the Main Webpage: Using that webpage, you can right-click and delete files: How to delete files from flash? ~ See: Is there a file browser built-in?","title":"FAQ"},{"location":"faq/#the-font-looks-tiny","text":"On ESP8266, the out-of-the box font is Unscii 8pt because this font takes up very little space in memory and on flash. This default font is just intended to get the device setup, then you can Upload your own .zi font. On ESP32, the default font is Monserrat 12.","title":"The font looks tiny"},{"location":"faq/#how-to-use-fontawesome-icons","text":"Upload another .zi file named fontawesome xx .zi of the same point size as the normal text .zi font. e.g. If your custom font is arial24.zi\u00b4, you should also add a fontawesome24.zi` file. You can download fontawesome.zip from the HMI Font Pack repository.","title":"How to use Fontawesome icons?"},{"location":"faq/#is-there-a-file-browser-built-in","text":"A: There is no native file browser included yet, as this currently is low on the priority list. However, you can upload the edit.htm.gz (3kB) file to the flash partition from the ESP32 FSBrowser repository. Download it from: https://github.com/espressif/arduino-esp32/blob/master/libraries/WebServer/examples/FSBrowser/data/edit.htm.gz When the edit.htm.gz file is present on the flash partition you will see an additional File Browser button on the Main Webpage: Using that webpage, you can right-click and delete files:","title":"Is there a file browser built-in?"},{"location":"faq/#how-to-delete-files-from-flash","text":"See: Is there a file browser built-in?","title":"How to delete files from flash?"},{"location":"firmware-update/","text":"Firmware Update ESP Firmware Update ~ Serial Upload ~ Either use Tasmotizer or esptool.py to upload a new firmware file to the ESP. This procedure is the same as the initial installation. HTTP Upload ~ When the ESP has previously been flashed via serial, you can upload a new firmware file using the internal webserver. HTTP Update ~ When the ESP has previously been flashed via serial you can download and install new firmware directly from an external webserver. OTA Upload ~ When the ESP has previously been flashed via serial, subsequent updates can be performed Over-the-Air from within PlatformIO. STM32F4xx Firmware Update ~","title":"Firmware update"},{"location":"firmware-update/#esp-firmware-update","text":"","title":"ESP Firmware Update"},{"location":"firmware-update/#serial-upload","text":"Either use Tasmotizer or esptool.py to upload a new firmware file to the ESP. This procedure is the same as the initial installation.","title":"Serial Upload"},{"location":"firmware-update/#http-upload","text":"When the ESP has previously been flashed via serial, you can upload a new firmware file using the internal webserver.","title":"HTTP Upload"},{"location":"firmware-update/#http-update","text":"When the ESP has previously been flashed via serial you can download and install new firmware directly from an external webserver.","title":"HTTP Update"},{"location":"firmware-update/#ota-upload","text":"When the ESP has previously been flashed via serial, subsequent updates can be performed Over-the-Air from within PlatformIO.","title":"OTA Upload"},{"location":"firmware-update/#stm32f4xx-firmware-update","text":"","title":"STM32F4xx Firmware Update"},{"location":"fonts-lvgl/","text":"Fonts Built-in Fonts ~ The ESP8266 firmware only has 1 built-in font: Unscii with font size 8pt. The ESP32 additionally contains the Roboto Condensed font in these font sizes: 12, 16, 22 and 28pt. The built-in fonts can be set by using the pointsize as parameter: for example: p4b1.text_font=16 p4b2.value_font=8 Built-in Icons ~ These icons are included in the Roboto Condensed font: Icon UTF-8 Desciption Icon UTF-8 Description F001 music F074 random F008 film F077 chevron-up F00B th-list F078 chevron-down F00C check F079 retweet F00D times F07B folder F011 power-off F093 upload F013 cog F095 phone F015 home F0C4 cut F019 download F0C5 copy F01C inbox F0C7 save F021 sync F0E7 bolt F026 volume-off F0EA paste F027 volume-down F0F3 bell F028 volume-up F11C keyboard F03E image F124 location-arrow F048 step-backward F15B file F04B play F1EB wifi F04C pause F240 battery-full F04D stop F241 battery-three-quarters F051 step-forward F242 battery-half F052 eject F243 battery-quarter F053 chevron-left F244 battery-empty F054 chevron-right F287 usb F067 plus F293 bluetooth F068 minus F304 pen F06E eye F2ED trash-alt F070 eye-slash F55A backspace F071 exclamation-triangle F7C2 sd-card To use an icon in a text you need to prefix the UTF-8 value with \\u . To ensure proper decoding the payload should be used with a json or jsonl command. jsonl example: {\"obj\":\"label\",\"id\":10,\"x\":0,\"y\":0,\"w\":70,\"h\":50,\"parentid\":5,\"text\":\"\\uf00c OK\"} json example: [\"p3b10.text=\\uf00c OK\"] Custom Fonts ~ You can add a custom font by uploading it to the internal flash. Apply it as the default font on the Configuration > HASP Settings page. FontAwesome Icons ~","title":"Fonts lvgl"},{"location":"fonts-lvgl/#built-in-fonts","text":"The ESP8266 firmware only has 1 built-in font: Unscii with font size 8pt. The ESP32 additionally contains the Roboto Condensed font in these font sizes: 12, 16, 22 and 28pt. The built-in fonts can be set by using the pointsize as parameter: for example: p4b1.text_font=16 p4b2.value_font=8","title":"Built-in Fonts"},{"location":"fonts-lvgl/#built-in-icons","text":"These icons are included in the Roboto Condensed font: Icon UTF-8 Desciption Icon UTF-8 Description F001 music F074 random F008 film F077 chevron-up F00B th-list F078 chevron-down F00C check F079 retweet F00D times F07B folder F011 power-off F093 upload F013 cog F095 phone F015 home F0C4 cut F019 download F0C5 copy F01C inbox F0C7 save F021 sync F0E7 bolt F026 volume-off F0EA paste F027 volume-down F0F3 bell F028 volume-up F11C keyboard F03E image F124 location-arrow F048 step-backward F15B file F04B play F1EB wifi F04C pause F240 battery-full F04D stop F241 battery-three-quarters F051 step-forward F242 battery-half F052 eject F243 battery-quarter F053 chevron-left F244 battery-empty F054 chevron-right F287 usb F067 plus F293 bluetooth F068 minus F304 pen F06E eye F2ED trash-alt F070 eye-slash F55A backspace F071 exclamation-triangle F7C2 sd-card To use an icon in a text you need to prefix the UTF-8 value with \\u . To ensure proper decoding the payload should be used with a json or jsonl command. jsonl example: {\"obj\":\"label\",\"id\":10,\"x\":0,\"y\":0,\"w\":70,\"h\":50,\"parentid\":5,\"text\":\"\\uf00c OK\"} json example: [\"p3b10.text=\\uf00c OK\"]","title":"Built-in Icons"},{"location":"fonts-lvgl/#custom-fonts","text":"You can add a custom font by uploading it to the internal flash. Apply it as the default font on the Configuration > HASP Settings page.","title":"Custom Fonts"},{"location":"fonts-lvgl/#fontawesome-icons","text":"","title":"FontAwesome Icons"},{"location":"fonts/","text":"Fonts Built-in Fonts ~ The ESP8266 firmware only has 1 built-in font: Unscii with font size 8pt. The ESP32 additionally contains the Ubuntu Condensed font in these font sizes: 12, 16, 22 and 28pt. The built-in fonts can be set by using the pointsize as parameter: for example: p4b1.text_font=16 p4b2.value_font=8 Built-in Icons ~ These icons are included in the built-in font sizes: Iconset arrow-down F063 arrow-left F060 arrow-right F061 arrow-up F062 caret-down F0D7 caret-left F0D9 caret-right F0DA caret-up F0D8 chevron-down F078 chevron-left F053 chevron-right F054 chevron-up F077 redo F01E reply F3E5 undo F0E2 backward F04A forward F04E microphone F130 music F001 pause F04C pause-circle F28B play F04B play-circle F144 step-backward F048 step-forward F051 stop F04D volume-down F028 volume-mute F6A9 volume-off F026 volume-up F028 door-closed F52A door-open F52B eye F06E eye-slash F070 lock F023 lock-open F3C1 toggle-off F204 toggle-on F205 unlock F09C battery-empty F244 battery-full F240 battery-half F242 battery-quarter F243 battery-three-quarters F241 bell F0F3 desktop F108 laptop F109 lightbulb F0EB mobile-alt F3CD plug F1E6 power-off F011 signal F012 sliders-h F1DE tv F26C wifi F1EB bath F2CD bed F236 car F1B9 coffee F0F4 home F015 key F084 poo F2FE toilet F7D8 trash F1F8 utensils F2E7 warehouse F494 temperature-high F769 temperature-low F76B thermometer-empty F2CB thermometer-full F2C7 thermometer-half F2C9 thermometer-quarter F2CA thermometer-three-quarters F2C8 tint F043 bolt F0E7 cloud F0C2 cloud-moon F6C3 cloud-moon-rain F73C cloud-rain F73D cloud-showers-heavy F740 cloud-sun F6C4 cloud-sun-rain F743 moon F186 smog F75F snowflake F2DC sun F185 umbrella F0E9 wind F72E backspace F55A ban F05E bars F0C9 chart-area F1FE chart-bar F080 chart-line F201 chart-pie F200 check F00C check-circle F058 check-square F14A cog F013 cogs F085 info F129 info-circle F05A minus F068 minus-circle F056 minus-square F146 plus F067 plus-circle F055 plus-square F0FE portrait F3E0 puzzle-piece F12E question F128 question-circle F059 shapes F61F skull F54C star F005 stopwatch F2F2 times F00D user F007 To use an icon in a text you need to prefix the UTF-8 value with \\u . To ensure proper decoding the payload should be used with a json or jsonl command. jsonl example: {\"obj\":\"label\",\"id\":10,\"x\":0,\"y\":0,\"w\":70,\"h\":50,\"parentid\":5,\"text\":\"\\uf00c OK\"} json example: [\"p2b10.text=\\uf00c OK\"] Custom Fonts ~ You can add a custom font by uploading it to the internal flash. Apply it as the default font on the Configuration > HASP Settings page. FontAwesome Icons ~","title":"Fonts"},{"location":"fonts/#built-in-fonts","text":"The ESP8266 firmware only has 1 built-in font: Unscii with font size 8pt. The ESP32 additionally contains the Ubuntu Condensed font in these font sizes: 12, 16, 22 and 28pt. The built-in fonts can be set by using the pointsize as parameter: for example: p4b1.text_font=16 p4b2.value_font=8","title":"Built-in Fonts"},{"location":"fonts/#built-in-icons","text":"These icons are included in the built-in font sizes: Iconset arrow-down F063 arrow-left F060 arrow-right F061 arrow-up F062 caret-down F0D7 caret-left F0D9 caret-right F0DA caret-up F0D8 chevron-down F078 chevron-left F053 chevron-right F054 chevron-up F077 redo F01E reply F3E5 undo F0E2 backward F04A forward F04E microphone F130 music F001 pause F04C pause-circle F28B play F04B play-circle F144 step-backward F048 step-forward F051 stop F04D volume-down F028 volume-mute F6A9 volume-off F026 volume-up F028 door-closed F52A door-open F52B eye F06E eye-slash F070 lock F023 lock-open F3C1 toggle-off F204 toggle-on F205 unlock F09C battery-empty F244 battery-full F240 battery-half F242 battery-quarter F243 battery-three-quarters F241 bell F0F3 desktop F108 laptop F109 lightbulb F0EB mobile-alt F3CD plug F1E6 power-off F011 signal F012 sliders-h F1DE tv F26C wifi F1EB bath F2CD bed F236 car F1B9 coffee F0F4 home F015 key F084 poo F2FE toilet F7D8 trash F1F8 utensils F2E7 warehouse F494 temperature-high F769 temperature-low F76B thermometer-empty F2CB thermometer-full F2C7 thermometer-half F2C9 thermometer-quarter F2CA thermometer-three-quarters F2C8 tint F043 bolt F0E7 cloud F0C2 cloud-moon F6C3 cloud-moon-rain F73C cloud-rain F73D cloud-showers-heavy F740 cloud-sun F6C4 cloud-sun-rain F743 moon F186 smog F75F snowflake F2DC sun F185 umbrella F0E9 wind F72E backspace F55A ban F05E bars F0C9 chart-area F1FE chart-bar F080 chart-line F201 chart-pie F200 check F00C check-circle F058 check-square F14A cog F013 cogs F085 info F129 info-circle F05A minus F068 minus-circle F056 minus-square F146 plus F067 plus-circle F055 plus-square F0FE portrait F3E0 puzzle-piece F12E question F128 question-circle F059 shapes F61F skull F54C star F005 stopwatch F2F2 times F00D user F007 To use an icon in a text you need to prefix the UTF-8 value with \\u . To ensure proper decoding the payload should be used with a json or jsonl command. jsonl example: {\"obj\":\"label\",\"id\":10,\"x\":0,\"y\":0,\"w\":70,\"h\":50,\"parentid\":5,\"text\":\"\\uf00c OK\"} json example: [\"p2b10.text=\\uf00c OK\"]","title":"Built-in Icons"},{"location":"fonts/#custom-fonts","text":"You can add a custom font by uploading it to the internal flash. Apply it as the default font on the Configuration > HASP Settings page.","title":"Custom Fonts"},{"location":"fonts/#fontawesome-icons","text":"","title":"FontAwesome Icons"},{"location":"gallery/","text":"Gallery","title":"Gallery"},{"location":"getting-started/","text":"Getting Started hasp-lvgl supports the ESP32, ESP8266 and STM32F4 families of microcontrollers. It needs a compatible micro-controller with drivers supporting the attached display, touch controller, storage and network. Below is a list of recommended development boards and a TFT touchscreen to get you up-and-running in no time. Recommended Boards ~ table th:first-of-type { width: 12%; } table th:nth-of-type(2) { width: 22%; } table th:nth-of-type(3) { width: 22%; } table th:nth-of-type(4) { width: 22%; } table th:last-of-type { width: 22%; } Minimal Basic Standard MCU ESP8266 ESP32-WROOM ESP32-WROVER CPU Freq. 80Mhz 240Mhz 240Mhz Ram 80Kb 520Kb 520Kb PSRam no no yes Minimal Flash 4MB 4MB 4MB Display ILI9341 SPI ILI9341 SPI ILI9341 SPI Touch XPT2046 SPI XPT2046 SPI XPT2046 SPI Network Wi-Fi Wi-Fi Wi-Fi Dev. Board* D1 mini ESP8266 D1 mini ESP32 TTGO T7 v1.5 Mini32 Firmware Download Download Download Due to the large number of possible hardware options a selection of 3 popular ESP development boards has been made for the precompiled binaries. For new projects we recommend ESP32-WROVER boards with PSram. The performance of the ESP8266 will be slow due to its low memory and CPU frequency. It is okay for getting started, for small project where speed is not needed or when you have one at hand. Advanced users can build and compile custom configurations using PlatformIO, however this is not currently supported. Recommended Display ~ Lolin TFT 2.4\" ~ ILI9341 SPI touchscreens with backlight dimming via PWM are quite cheap to get. An ILI9341 TFT display with SPI is required when using a pre-built binary. The touch controller needs to be the XPT2046 Resistive Touch driver. The Lolin TFT 2.4\" is plug-and-play with the 3 recommended ESP development boards. If you have another ESP or MCU, you can still use this display using jumper cables. You can also solder a row of headers at the bottom of the display to plug it into a breadboard. Therefor the Lolin TFT 2.4 Touch Shield is used as the development display of choice. Backlight Control ~ To use PWM dimming on the Lolin TFT 2.4\" you must connect the TFT-LED pin to either D1, D2 or D4. D1 is recommended for backlight control and configured by default. Do not use D3 for backlight control because it is already in use for touch! It is not recommended to use D4 for backlight control because it is already in use for PSram on the ESP32-Wrover. The D1-mini has D4 connected to on-board LED and boot fails if pulled LOW Compatible ESP boards ~ The Lolin TFT 2.4\" header is plug-and-play compatible with these development boards, no need to use any jumper cables: ESP32: Wemos D1 Mini ESP32 ( only solder the inner row of pin headers) TTGO T7 V1.5 MINI32 ESP32 ( only solder the inner row of pin headers) LOLIN D32 Pro V2.0.0 using an additional TFT cable ESP8266: Wemos D1 Mini ESP8266 Lolin D1 Mini Pro ESP8266 V2.0.0 Note If you have a Lolin TFT 2.4\" Display and a compatible ESP development board, you have all the hardware that is needed. In that case you can skip ahead to the Firmware Installation . Alternative SPI Display ~ Any common ILI9341 320x240 4-wire SPI touchscreen with XPT2046 Resistive Touch driver can be used, like: 2.4\" SKU: MSP2402 2.8\" SKU: MSP2807 3.2\" SKU: MSP3218 You will need to connect the GPIO pins using jumper wires.","title":"Getting Started"},{"location":"getting-started/#recommended-boards","text":"table th:first-of-type { width: 12%; } table th:nth-of-type(2) { width: 22%; } table th:nth-of-type(3) { width: 22%; } table th:nth-of-type(4) { width: 22%; } table th:last-of-type { width: 22%; } Minimal Basic Standard MCU ESP8266 ESP32-WROOM ESP32-WROVER CPU Freq. 80Mhz 240Mhz 240Mhz Ram 80Kb 520Kb 520Kb PSRam no no yes Minimal Flash 4MB 4MB 4MB Display ILI9341 SPI ILI9341 SPI ILI9341 SPI Touch XPT2046 SPI XPT2046 SPI XPT2046 SPI Network Wi-Fi Wi-Fi Wi-Fi Dev. Board* D1 mini ESP8266 D1 mini ESP32 TTGO T7 v1.5 Mini32 Firmware Download Download Download Due to the large number of possible hardware options a selection of 3 popular ESP development boards has been made for the precompiled binaries. For new projects we recommend ESP32-WROVER boards with PSram. The performance of the ESP8266 will be slow due to its low memory and CPU frequency. It is okay for getting started, for small project where speed is not needed or when you have one at hand. Advanced users can build and compile custom configurations using PlatformIO, however this is not currently supported.","title":"Recommended Boards"},{"location":"getting-started/#recommended-display","text":"","title":"Recommended Display"},{"location":"getting-started/#lolin-tft-24","text":"ILI9341 SPI touchscreens with backlight dimming via PWM are quite cheap to get. An ILI9341 TFT display with SPI is required when using a pre-built binary. The touch controller needs to be the XPT2046 Resistive Touch driver. The Lolin TFT 2.4\" is plug-and-play with the 3 recommended ESP development boards. If you have another ESP or MCU, you can still use this display using jumper cables. You can also solder a row of headers at the bottom of the display to plug it into a breadboard. Therefor the Lolin TFT 2.4 Touch Shield is used as the development display of choice.","title":"Lolin TFT 2.4\""},{"location":"getting-started/#compatible-esp-boards","text":"The Lolin TFT 2.4\" header is plug-and-play compatible with these development boards, no need to use any jumper cables: ESP32: Wemos D1 Mini ESP32 ( only solder the inner row of pin headers) TTGO T7 V1.5 MINI32 ESP32 ( only solder the inner row of pin headers) LOLIN D32 Pro V2.0.0 using an additional TFT cable ESP8266: Wemos D1 Mini ESP8266 Lolin D1 Mini Pro ESP8266 V2.0.0 Note If you have a Lolin TFT 2.4\" Display and a compatible ESP development board, you have all the hardware that is needed. In that case you can skip ahead to the Firmware Installation .","title":"Compatible ESP boards"},{"location":"getting-started/#alternative-spi-display","text":"Any common ILI9341 320x240 4-wire SPI touchscreen with XPT2046 Resistive Touch driver can be used, like: 2.4\" SKU: MSP2402 2.8\" SKU: MSP2807 3.2\" SKU: MSP3218 You will need to connect the GPIO pins using jumper wires.","title":"Alternative SPI Display"},{"location":"installation/","text":"Installation Download the firmware ~ Go to the releases page on GitHub to download the latest hasp-lvgl binaries. There are currently 2 download options, pick the one appropriate for your hardware: hasp-lvgl-0.2.0-esp32_ili9341_spi.bin + boot files hasp-lvgl-0.2.0-esp8266_ili9341_spi.bin Note If no precompiled firmware file is available for your board you can configure, compile and upload the firmware yourself using PlatformIO. Install the firmware ~ Flash ESP32 ~ When flashing the ESP32 for the first time, you need to install a bootloader, partition scheme and application loader: esptool.py --port \"COM1\" erase_flash esptool.py --port \"COM1\" write_flash 0x1000 bootloader_dio_40m.bin --flash_mode dio --flash_freq 40m esptool.py --port \"COM1\" write_flash 0x8000 partitions.bin esptool.py --port \"COM1\" write_flash 0xe000 boot_app0.bin Change COM1 to the correct port on your computer. then flash the actual firmware: esptool.py -p \"COM1\" --baud 921600 write_flash 0x10000 d1-mini-esp32_ili9341_<version>.bin or all previous steps in one long command line: esptool.py -p \"COM1\" --baud 921600 --before default_reset --after hard_reset write_flash --flash_mode dio --flash_freq 40m --flash_size detect 0x1000 bootloader_dio_40m.bin 0x8000 partitions.bin 0xe000 boot_app0.bin 0x10000 d1-mini-esp32_ili9341_<version>.bin Flash ESP8266 ~ Unlike the ESP32, for ESP8266 you only need one single .bin file: Using Tasmotizer (Windows) ~ Using esp-tool.py ~ esptool.py -p \"COM1\" write_flash --flash_mode qio --flash_size 4m 0x0 d1-mini-esp8266_ili9341_<version>.bin Change COM1 to the correct port on your computer and 4m to the correct size of the internal flash chip. STM32F407 devEbox ~ Note There is no precompiled firmware file available for STM32F4 boards. You will need to configure, compile and upload the firmware yourself using PlatformIO. Using Serial ~ Connect your serial TTL adapter RX and TX pins to PA9 and PA10 of the devEbox. Place the boot jumpers into programming mode Reset the board. Upload the firmware using: Using DFU (USB) ~ Connect your serial TTL adapter RX and TX pins to PA9 and PA10 of the devEbox. Place the boot jumpers into programming mode Reset the board. Upload the firmware using: Using ST Link (USB) ~ Install ST Link software Connect the devEbox using the USB port Launch ST Link Select the hasp-lvgl-0.2.0-stm32f407_devEbox_3.2_ili9341_fsmc.bin file Flash the firmware to the board","title":"Installation"},{"location":"installation/#download-the-firmware","text":"Go to the releases page on GitHub to download the latest hasp-lvgl binaries. There are currently 2 download options, pick the one appropriate for your hardware: hasp-lvgl-0.2.0-esp32_ili9341_spi.bin + boot files hasp-lvgl-0.2.0-esp8266_ili9341_spi.bin Note If no precompiled firmware file is available for your board you can configure, compile and upload the firmware yourself using PlatformIO.","title":"Download the firmware"},{"location":"installation/#install-the-firmware","text":"","title":"Install the firmware"},{"location":"installation/#flash-esp32","text":"When flashing the ESP32 for the first time, you need to install a bootloader, partition scheme and application loader: esptool.py --port \"COM1\" erase_flash esptool.py --port \"COM1\" write_flash 0x1000 bootloader_dio_40m.bin --flash_mode dio --flash_freq 40m esptool.py --port \"COM1\" write_flash 0x8000 partitions.bin esptool.py --port \"COM1\" write_flash 0xe000 boot_app0.bin Change COM1 to the correct port on your computer. then flash the actual firmware: esptool.py -p \"COM1\" --baud 921600 write_flash 0x10000 d1-mini-esp32_ili9341_<version>.bin or all previous steps in one long command line: esptool.py -p \"COM1\" --baud 921600 --before default_reset --after hard_reset write_flash --flash_mode dio --flash_freq 40m --flash_size detect 0x1000 bootloader_dio_40m.bin 0x8000 partitions.bin 0xe000 boot_app0.bin 0x10000 d1-mini-esp32_ili9341_<version>.bin","title":"Flash ESP32"},{"location":"installation/#flash-esp8266","text":"Unlike the ESP32, for ESP8266 you only need one single .bin file:","title":"Flash ESP8266"},{"location":"installation/#stm32f407-devebox","text":"Note There is no precompiled firmware file available for STM32F4 boards. You will need to configure, compile and upload the firmware yourself using PlatformIO.","title":"STM32F407 devEbox"},{"location":"license/","text":"License MIT License ~ Hasp-lvgl is Copyright\u00a9 2019-2021 fvanroie, netwize.be and contributors Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Components ~ Core ~ Hasp-lvgl is based on the existing work of the following open source developers: HASwitchPlate , the original Arduino project, Copyright\u00a9 2019 Allen Derusha. HASwitchPlate is distributed under the terms of the MIT License . LVGL graphics library, Copyright\u00a9 2016 G\u00e1bor Kiss-V\u00e1mosi and Copyright\u00a9 2020 LVGL LLC. LVGL is distributed under the terms of the MIT License . ArduinoJson Copyright\u00a9 2014-2020 Benoit BLANCHON MIT License . MCU ~ TFT_eSPI display library, Copyright\u00a9 2020 Bodmer (https://github.com/Bodmer) All rights reserved. TFT_eSPI is distributed under the terms of the FreeBSD License and includes parts from the Adafruit_GFX library , Copyright\u00a9 2012 Adafruit Industries. All rights reserved. Adafruit_GFX is distributed under the terms of the BSD License zi Font Engine Copyright\u00a9 2020 fvanroie, netwize.be MIT License . PubSubClient Copyright\u00a9 2008-2015 Nicholas O'Leary MIT License . Logging engine is based on ArduinoLog , Copyright\u00a9 2017,2018 Thijs Elenbaas, MrRobot62, rahuldeo2047, NOX73, dhylands, Josha blemasle, mfalkvidd with modifications by fvanroie, netwize.be. ArduinoLog is distributed under the terms of the MIT License . QR Code generator Copyright\u00a9 Project Nayuki MIT License . AceButton Copyright\u00a9 2018 Brian T. Park MIT License . Native Application ~ paho.mqtt.c client library Copyright\u00a9 Eclipse Foundation Paho is distributed under the terms of the Eclipse Public License v2.0 Simple DirectMedia Layer library Copyright\u00a9 1997-2021 Sam Lantinga slouken@libsdl.org SDL 2.0 and newer are available under the zlib license Native Windows Application ~ mingw-w64 GCC for Windows 64 & 32 bits Copyright\u00a9 2009 - 2013 by the mingw-w64 project Mingw-w64 is free software and permissively-licensed. The details are located in the sources themselves. Assets ~ Built-in font unscii (8pt) Copyright\u00a9 viznut. A public domain bitmapped Unicode font Built-in font Roboto Consensed Copyright\u00a9 2011 Google Inc. All Rights Reserved. Ubuntu Consensed is licensed under the Apache License, Version 2.0 . Custom zi fonts and built-in fonts incorporate Font Awesome , Copyright\u00a9 2017 Dave Gandy. Font Awesome is distributed under the terms of the SIL OFL 1.1 and MIT License . The bootscreen uses the MaterialDesign Icons font, Copyright\u00a9 2014, Austin Andrews. MaterialDesign Icons font is licensed under the SIL Open Font License, Version 1.1.","title":"License"},{"location":"license/#mit-license","text":"Hasp-lvgl is Copyright\u00a9 2019-2021 fvanroie, netwize.be and contributors Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"MIT License"},{"location":"license/#components","text":"","title":"Components"},{"location":"license/#core","text":"Hasp-lvgl is based on the existing work of the following open source developers: HASwitchPlate , the original Arduino project, Copyright\u00a9 2019 Allen Derusha. HASwitchPlate is distributed under the terms of the MIT License . LVGL graphics library, Copyright\u00a9 2016 G\u00e1bor Kiss-V\u00e1mosi and Copyright\u00a9 2020 LVGL LLC. LVGL is distributed under the terms of the MIT License . ArduinoJson Copyright\u00a9 2014-2020 Benoit BLANCHON MIT License .","title":"Core"},{"location":"license/#mcu","text":"TFT_eSPI display library, Copyright\u00a9 2020 Bodmer (https://github.com/Bodmer) All rights reserved. TFT_eSPI is distributed under the terms of the FreeBSD License and includes parts from the Adafruit_GFX library , Copyright\u00a9 2012 Adafruit Industries. All rights reserved. Adafruit_GFX is distributed under the terms of the BSD License zi Font Engine Copyright\u00a9 2020 fvanroie, netwize.be MIT License . PubSubClient Copyright\u00a9 2008-2015 Nicholas O'Leary MIT License . Logging engine is based on ArduinoLog , Copyright\u00a9 2017,2018 Thijs Elenbaas, MrRobot62, rahuldeo2047, NOX73, dhylands, Josha blemasle, mfalkvidd with modifications by fvanroie, netwize.be. ArduinoLog is distributed under the terms of the MIT License . QR Code generator Copyright\u00a9 Project Nayuki MIT License . AceButton Copyright\u00a9 2018 Brian T. Park MIT License .","title":"MCU"},{"location":"license/#native-application","text":"paho.mqtt.c client library Copyright\u00a9 Eclipse Foundation Paho is distributed under the terms of the Eclipse Public License v2.0 Simple DirectMedia Layer library Copyright\u00a9 1997-2021 Sam Lantinga slouken@libsdl.org SDL 2.0 and newer are available under the zlib license","title":"Native Application"},{"location":"license/#native-windows-application","text":"mingw-w64 GCC for Windows 64 & 32 bits Copyright\u00a9 2009 - 2013 by the mingw-w64 project Mingw-w64 is free software and permissively-licensed. The details are located in the sources themselves.","title":"Native Windows Application"},{"location":"license/#assets","text":"Built-in font unscii (8pt) Copyright\u00a9 viznut. A public domain bitmapped Unicode font Built-in font Roboto Consensed Copyright\u00a9 2011 Google Inc. All Rights Reserved. Ubuntu Consensed is licensed under the Apache License, Version 2.0 . Custom zi fonts and built-in fonts incorporate Font Awesome , Copyright\u00a9 2017 Dave Gandy. Font Awesome is distributed under the terms of the SIL OFL 1.1 and MIT License . The bootscreen uses the MaterialDesign Icons font, Copyright\u00a9 2014, Austin Andrews. MaterialDesign Icons font is licensed under the SIL Open Font License, Version 1.1.","title":"Assets"},{"location":"objects/","text":"Objects There are two ways to create an object on the screen: Uploading a pages.jsonl file onto the internal flash Use the jsonl command (via MQTT, serial or telnet console) Common Properties ~ These are the common properties shared among all objects, but only the id and obj properties are required to create an object: Property Value Required Default Description id 1..255 yes n/a ID of the object on this page obj string yes n/a Name of the object type (see below) page 0..12 no n/a ID of the page the object appears on groupid 0..15 no 0 (none) ID of the GPIO group the object belongs to x int16 no 0 horizontal position on the page y int16 no 0 vertical position on the page w int16 no 0 width of the object h int16 no 0 height of the object enabled bool no true object is clickable hidden bool no false object is hidden opacity 0..255 no 255 how much the the object is opaque radius uint16 no dep. on theme the radius of the rounded corners of the object 0 = square corners 100 - pill shaped object (true circle if object has same width and height) If the page parameter is not present, the object is placed on the same page as the previous object . If page is not specified for the first object either, the current page being displayed is used. The maximum number of pages and objects is limited by the memory available in the MCU. \"page\":0 indicates that the object is visible on all pages. It can be used for example to specify a static menu bar. You can still hide the object on select pages if needed. Objects on page 0 appear on top of any objects on the underlying page. All objects are clickable by default and respond to touch events. To disable touch events for an object set its enabled property to false . Common Methods ~ These are the common methods shared among all objects, Method Parameters Description delete Delete the object from the page to_front Bring the object to the front on the page to_back Send the object to the back on the page p1b5.delete p1b3.to_front Object Types ~ Each object type is an ID that indicates which object type that line represents. Besides the common properties listed above, each object type can have specific properties. Cheatsheet ~ objid obj Type Description 10 btn Binary Button 11 checkbox Binary Checkbox 40 switch Binary Switch 32 bar Range Progress Bar 30 slider Range Slider 22 arc Range Arc 33 lmeter Range Line Meter 31 gauge Range Gauge 50 dropdown Selector Dropdown List 51 roller Selector Roller 13 btnmatrix Selector Button Matrix 20 cpicker Selector Colorpicker 91 obj Visual Base Object 12 label Visual Label 41 led Visual LED 21 spinner Visual Spinner Button ~ obj: btn Property Value Default Description toggle bool false When enabled, creates a toggle-on/toggle-off button. If false, creates a normal button val int16 0 The value: 1 for toggled, 0 for untoggled text string \"\" The text of the label mode string expand The wrapping mode of long text labels. expand = Expand the object size to the text size break = Keep the object width, break the too long lines and expand the object height dots = Keep the size and write dots at the end if the text is too long scroll = Keep the size and roll the text back and forth loop = Keep the size and roll the text circularly crop = Keep the size and crop the text out of it align 0..2 0 Text alignment: 0 = left, 1 = center, 2 = right Normal buttons ( toggle=false ) send touch events while they occur. The possible events are: DOWN : Occurs when a button goes from depressed to pressed SHORT : The button was released within a short time i.e. a short click has occurred LONG : Event is send when the button is still being pressed after the threshold time UP : The button is released after being pressing for a LONG threshold time. Toggle Switches ( toggle=true ) send out their new value only when toggled: {\"val\":\"0\"} or {\"val\":\"1\"} . Example: {\"obj\":\"btn\",\"id\":1,\"x\":10,\"y\":45,\"w\":220,\"h\":55,\"toggle\":true,\"text\":\"Push Me \\uf0a6\"} Checkbox ~ obj: checkbox Property Value Default Description val int16 0 1 = checked 0 = unchecked text string \"Checkbox\" The label of the checkbox Note The checkbox object ignores the w and h attribute. These are calculated based on the font and text. Text Label ~ obj: label Property Value Default Description text string \"Text\" The text of the label, \\n for line break. mode string crop The wrapping mode of long text labels. expand = Expand the object size to the text size break = Keep the object width, break the too long lines and expand the object height dots = Keep the size and write dots at the end if the text is too long scroll = Keep the size and roll the text back and forth loop = Keep the size and roll the text circularly crop = Keep the size and crop the text out of it align 0..2 0 Text alignment: 0 = left, 1 = center, 2 = right Example: {\"page\":2,\"id\":1,\"obj\":\"label\",\"h\":24,\"w\":120,\"text\":\"\\ufe05 Icon Demo\"} Button Matrix ~ obj: btnmatrix Property Value Default Description options json array \"Text\" Json array of strings where each element is the label of a button. Use \"\\n\" for a new line of buttons. align 0..2 0 Text alignment: 0 = left, 1 = center, 2 = right The styling properties apply to all buttons in the matrix. To change the color of a single label prefix the text with a #RRGGBB hexadecimal color code and close with a single hash # tag. Example: p2b1.options [\"#FF0000 Red Text#\",\"#0000FF Cyan Text#\",\"\\n\",\"#FFFF00 Yellow Text#\"] Arc ~ obj: arc Property Value Default Description min int16 0 minimum value of the indicator max int16 100 maximum value of the indicator val int16 0 current value of the indicator rotation int16 0 offset to the 0 degree position type 0-2 0 0 = normal, 1 = symmetrical, 2 = reverse adjustable bool false Add knob that the user can operate to change the value start_angle 0-360 start angle of the arc background (see note) end_angle 0-360 end angle of the arc background (see note) start_angle1 0-360 start angle of the arc indicator (see note) end_angle1 0-360 end angle of the arc indicator (see note) Note Zero degree is at the middle right (3 o'clock) of the object and the degrees are increasing in a clockwise direction. The angles should be in the [0-360] range. Example: {\"obj\":\"arc\",\"id\":5,\"x\":20,\"y\":75,\"w\":200,\"h\":200,\"min\":15,\"max\":35,\"border_side\":0,\"type\":0,\"rotation\":0,\"start_angle\":135,\"end_angle\":45,\"start_angle1\":135,\"end_angle1\":45,\"adjustable\":true} Spinner ~ obj: spinner Property Value Default Description speed int16 1000 The time for 1 turn in ms direction int16 100 0 = clockwise, 1 = counter-clockwise thickness int16 dep. on theme The width of the arc line Colorpicker ~ obj: cpicker Property Value Default Description color color 0 The selected color in html format #rrggbb rect bool false true = color picker has a rectangular shape like a slider. false = circular shape. Setting Color ~ Examples: p0b2.color=13891 p1b5.color=silver p2b3.color=#C0C0C0 Slider ~ obj: slider Property Value Default Description min int16 0 minimum value of the indicator max int16 100 maximum value of the indicator val int16 0 current value of the indicator Double Slider ~ objid:30 Property Value Default Description min int16 0 minimum value of the indicator max int16 100 maximum value of the indicator val int16 0 current value of the indicator Line Meter ~ obj: lmeter Property Value Default Description min int16 0 minimum value of the indicator max int16 100 maximum value of the indicator val int16 0 current value of the indicator angle 0-360 240 angle between start and end of the scale line_count uint16 31 tick count of the scale rotation 0-360 0 offset for the scale angles to rotate it type 0-1 0 0 = indicator lines are activated clock-wise 1 = indicator lines are activated counter-clock-wise Use line properties to customise. Gauge ~ obj: gauge Property Value Default Description min int16 0 minimum value of the indicator max int16 100 maximum value of the indicator val int16 0 current value of the indicator critical_value int16 80 scale color will be changed to scale_end_color after this value angle 0-360 240 angle between start and end of the scale label_count uint8 number of labels (and minor tick count) of the scale line_count uint16 31 minor tick count of the scale rotation 0-360 0 offset for the gauge's angles to rotate it format uint16 0 divider for major tick values To strip trailing zero's of major tick labels the format divider can be used to scale the values before printing: 0 : print the major tick value as is 1 : strip 1 zero, i.e. divide tick value by 10 before printing the major tick label 2 : strip 2 zeros, i.e. divide tick value by 100 before printing the major tick label 3 : strip 3 zeros, i.e. divide tick value by 1000 before printing the major tick label 4 : strip 4 zeros, i.e. divide tick value by 10000 before printing the major tick label Only these values are allowed, arbitrary numbers are not supported. Progress Bar ~ obj: bar Property Value Default Description min int16 0 minimum value of the indicator max int16 100 maximum value of the indicator val int16 0 current value of the indicator Switch ~ obj: switch Property Value Default Description val bool 0 1 = on, 0 = off bg_color1 color 0 changes indicator color bg_color2 color 0 changes knob color Example: {\"obj\":\"switch\",\"id\":6,\"x\":89,\"y\":235,\"w\":66,\"h\":30,\"toggle\":true} LED Indicator ~ obj: led Property Value Default Description val byte 0 The brightness of the indicator [ 0..255 ] Dropdown List ~ obj: dropdown Property Value Default Description options string \"\" List of items separated by \\n val int16 0 The number of the selected item text string \"\" Read-only The text of the selected item To change the currently selected item, use the val attribute. To change the items in the list, use the options attribute. When the item is changed both val and text of the newly selected item are send out. Roller ~ obj: roller Property Value Default Description options string \"\" List of items separated by \\n val int16 0 The number of the selected item text string \"\" Read-only The text of the selected item rows int8 3 The number of rows that are visible Use this property instead of h to set object height align 0..2 0 Text alignment: 0 = left, 1 = center, 2 = right To change the currently selected item, use the val attribute. To change the items in the list, use the options attribute. When the item is changed both val and text of the newly selected item is sent out. Base Object ~ obj: obj The Base Object can be directly used as a simple widget. It is nothing more then a (rounded) rectangle. You can use it as a background shape for other objects by putting its jsonl line before the object.","title":"Objects"},{"location":"objects/#common-properties","text":"These are the common properties shared among all objects, but only the id and obj properties are required to create an object: Property Value Required Default Description id 1..255 yes n/a ID of the object on this page obj string yes n/a Name of the object type (see below) page 0..12 no n/a ID of the page the object appears on groupid 0..15 no 0 (none) ID of the GPIO group the object belongs to x int16 no 0 horizontal position on the page y int16 no 0 vertical position on the page w int16 no 0 width of the object h int16 no 0 height of the object enabled bool no true object is clickable hidden bool no false object is hidden opacity 0..255 no 255 how much the the object is opaque radius uint16 no dep. on theme the radius of the rounded corners of the object 0 = square corners 100 - pill shaped object (true circle if object has same width and height) If the page parameter is not present, the object is placed on the same page as the previous object . If page is not specified for the first object either, the current page being displayed is used. The maximum number of pages and objects is limited by the memory available in the MCU. \"page\":0 indicates that the object is visible on all pages. It can be used for example to specify a static menu bar. You can still hide the object on select pages if needed. Objects on page 0 appear on top of any objects on the underlying page. All objects are clickable by default and respond to touch events. To disable touch events for an object set its enabled property to false .","title":"Common Properties"},{"location":"objects/#common-methods","text":"These are the common methods shared among all objects, Method Parameters Description delete Delete the object from the page to_front Bring the object to the front on the page to_back Send the object to the back on the page p1b5.delete p1b3.to_front","title":"Common Methods"},{"location":"objects/#object-types","text":"Each object type is an ID that indicates which object type that line represents. Besides the common properties listed above, each object type can have specific properties.","title":"Object Types"},{"location":"objects/#cheatsheet","text":"objid obj Type Description 10 btn Binary Button 11 checkbox Binary Checkbox 40 switch Binary Switch 32 bar Range Progress Bar 30 slider Range Slider 22 arc Range Arc 33 lmeter Range Line Meter 31 gauge Range Gauge 50 dropdown Selector Dropdown List 51 roller Selector Roller 13 btnmatrix Selector Button Matrix 20 cpicker Selector Colorpicker 91 obj Visual Base Object 12 label Visual Label 41 led Visual LED 21 spinner Visual Spinner","title":"Cheatsheet"},{"location":"objects/#button","text":"obj: btn Property Value Default Description toggle bool false When enabled, creates a toggle-on/toggle-off button. If false, creates a normal button val int16 0 The value: 1 for toggled, 0 for untoggled text string \"\" The text of the label mode string expand The wrapping mode of long text labels. expand = Expand the object size to the text size break = Keep the object width, break the too long lines and expand the object height dots = Keep the size and write dots at the end if the text is too long scroll = Keep the size and roll the text back and forth loop = Keep the size and roll the text circularly crop = Keep the size and crop the text out of it align 0..2 0 Text alignment: 0 = left, 1 = center, 2 = right Normal buttons ( toggle=false ) send touch events while they occur. The possible events are: DOWN : Occurs when a button goes from depressed to pressed SHORT : The button was released within a short time i.e. a short click has occurred LONG : Event is send when the button is still being pressed after the threshold time UP : The button is released after being pressing for a LONG threshold time. Toggle Switches ( toggle=true ) send out their new value only when toggled: {\"val\":\"0\"} or {\"val\":\"1\"} . Example: {\"obj\":\"btn\",\"id\":1,\"x\":10,\"y\":45,\"w\":220,\"h\":55,\"toggle\":true,\"text\":\"Push Me \\uf0a6\"}","title":"Button"},{"location":"objects/#checkbox","text":"obj: checkbox Property Value Default Description val int16 0 1 = checked 0 = unchecked text string \"Checkbox\" The label of the checkbox Note The checkbox object ignores the w and h attribute. These are calculated based on the font and text.","title":"Checkbox"},{"location":"objects/#text-label","text":"obj: label Property Value Default Description text string \"Text\" The text of the label, \\n for line break. mode string crop The wrapping mode of long text labels. expand = Expand the object size to the text size break = Keep the object width, break the too long lines and expand the object height dots = Keep the size and write dots at the end if the text is too long scroll = Keep the size and roll the text back and forth loop = Keep the size and roll the text circularly crop = Keep the size and crop the text out of it align 0..2 0 Text alignment: 0 = left, 1 = center, 2 = right Example: {\"page\":2,\"id\":1,\"obj\":\"label\",\"h\":24,\"w\":120,\"text\":\"\\ufe05 Icon Demo\"}","title":"Text Label"},{"location":"objects/#button-matrix","text":"obj: btnmatrix Property Value Default Description options json array \"Text\" Json array of strings where each element is the label of a button. Use \"\\n\" for a new line of buttons. align 0..2 0 Text alignment: 0 = left, 1 = center, 2 = right The styling properties apply to all buttons in the matrix. To change the color of a single label prefix the text with a #RRGGBB hexadecimal color code and close with a single hash # tag. Example: p2b1.options [\"#FF0000 Red Text#\",\"#0000FF Cyan Text#\",\"\\n\",\"#FFFF00 Yellow Text#\"]","title":"Button Matrix"},{"location":"objects/#arc","text":"obj: arc Property Value Default Description min int16 0 minimum value of the indicator max int16 100 maximum value of the indicator val int16 0 current value of the indicator rotation int16 0 offset to the 0 degree position type 0-2 0 0 = normal, 1 = symmetrical, 2 = reverse adjustable bool false Add knob that the user can operate to change the value start_angle 0-360 start angle of the arc background (see note) end_angle 0-360 end angle of the arc background (see note) start_angle1 0-360 start angle of the arc indicator (see note) end_angle1 0-360 end angle of the arc indicator (see note) Note Zero degree is at the middle right (3 o'clock) of the object and the degrees are increasing in a clockwise direction. The angles should be in the [0-360] range. Example: {\"obj\":\"arc\",\"id\":5,\"x\":20,\"y\":75,\"w\":200,\"h\":200,\"min\":15,\"max\":35,\"border_side\":0,\"type\":0,\"rotation\":0,\"start_angle\":135,\"end_angle\":45,\"start_angle1\":135,\"end_angle1\":45,\"adjustable\":true}","title":"Arc"},{"location":"objects/#spinner","text":"obj: spinner Property Value Default Description speed int16 1000 The time for 1 turn in ms direction int16 100 0 = clockwise, 1 = counter-clockwise thickness int16 dep. on theme The width of the arc line","title":"Spinner"},{"location":"objects/#colorpicker","text":"obj: cpicker Property Value Default Description color color 0 The selected color in html format #rrggbb rect bool false true = color picker has a rectangular shape like a slider. false = circular shape.","title":"Colorpicker"},{"location":"objects/#slider","text":"obj: slider Property Value Default Description min int16 0 minimum value of the indicator max int16 100 maximum value of the indicator val int16 0 current value of the indicator","title":"Slider"},{"location":"objects/#double-slider","text":"objid:30 Property Value Default Description min int16 0 minimum value of the indicator max int16 100 maximum value of the indicator val int16 0 current value of the indicator","title":"Double Slider"},{"location":"objects/#line-meter","text":"obj: lmeter Property Value Default Description min int16 0 minimum value of the indicator max int16 100 maximum value of the indicator val int16 0 current value of the indicator angle 0-360 240 angle between start and end of the scale line_count uint16 31 tick count of the scale rotation 0-360 0 offset for the scale angles to rotate it type 0-1 0 0 = indicator lines are activated clock-wise 1 = indicator lines are activated counter-clock-wise Use line properties to customise.","title":"Line Meter"},{"location":"objects/#gauge","text":"obj: gauge Property Value Default Description min int16 0 minimum value of the indicator max int16 100 maximum value of the indicator val int16 0 current value of the indicator critical_value int16 80 scale color will be changed to scale_end_color after this value angle 0-360 240 angle between start and end of the scale label_count uint8 number of labels (and minor tick count) of the scale line_count uint16 31 minor tick count of the scale rotation 0-360 0 offset for the gauge's angles to rotate it format uint16 0 divider for major tick values To strip trailing zero's of major tick labels the format divider can be used to scale the values before printing: 0 : print the major tick value as is 1 : strip 1 zero, i.e. divide tick value by 10 before printing the major tick label 2 : strip 2 zeros, i.e. divide tick value by 100 before printing the major tick label 3 : strip 3 zeros, i.e. divide tick value by 1000 before printing the major tick label 4 : strip 4 zeros, i.e. divide tick value by 10000 before printing the major tick label Only these values are allowed, arbitrary numbers are not supported.","title":"Gauge"},{"location":"objects/#progress-bar","text":"obj: bar Property Value Default Description min int16 0 minimum value of the indicator max int16 100 maximum value of the indicator val int16 0 current value of the indicator","title":"Progress Bar"},{"location":"objects/#switch","text":"obj: switch Property Value Default Description val bool 0 1 = on, 0 = off bg_color1 color 0 changes indicator color bg_color2 color 0 changes knob color Example: {\"obj\":\"switch\",\"id\":6,\"x\":89,\"y\":235,\"w\":66,\"h\":30,\"toggle\":true}","title":"Switch"},{"location":"objects/#led-indicator","text":"obj: led Property Value Default Description val byte 0 The brightness of the indicator [ 0..255 ]","title":"LED Indicator"},{"location":"objects/#dropdown-list","text":"obj: dropdown Property Value Default Description options string \"\" List of items separated by \\n val int16 0 The number of the selected item text string \"\" Read-only The text of the selected item To change the currently selected item, use the val attribute. To change the items in the list, use the options attribute. When the item is changed both val and text of the newly selected item are send out.","title":"Dropdown List"},{"location":"objects/#roller","text":"obj: roller Property Value Default Description options string \"\" List of items separated by \\n val int16 0 The number of the selected item text string \"\" Read-only The text of the selected item rows int8 3 The number of rows that are visible Use this property instead of h to set object height align 0..2 0 Text alignment: 0 = left, 1 = center, 2 = right To change the currently selected item, use the val attribute. To change the items in the list, use the options attribute. When the item is changed both val and text of the newly selected item is sent out.","title":"Roller"},{"location":"objects/#base-object","text":"obj: obj The Base Object can be directly used as a simple widget. It is nothing more then a (rounded) rectangle. You can use it as a background shape for other objects by putting its jsonl line before the object.","title":"Base Object"},{"location":"pages/","text":"Pages The initial layout of the pages is defined by creating a special file on the flash file system. This layout is displayed each time HASP starts up. Upload this file (and other resource assets like fonts and images) using the web interface HASP Design menu. pages.jsonl ~ The location of this file is /pages.jsonl in the root of the filesystem. It uses the JSON Lines format with one json object per line. Each line should contain exactly one valid json object and end with a line-break \\n (not a comma) . The jsonl lines are interpreted line-by-line. When a malformed line is encountered, the processing of the rest of the file stops. If you are missing objects, check the logs to see which line was processed last. You probably have a typo in the following line which blocks parsing the rest of the file. Note The complete file in its entirety is not a valid json file. Each individual line however must be a valid json object. The file extension is .jsonl and not .json . Objects ~ Each line in pages.jsonl creates one object on a page and has to be in the json format. The order of the objects also dictates the layer on the page from bottom to top. Example Objects {\"page\":2,\"id\":1,\"obj\":\"label\",\"x\":5,\"y\":5,\"h\":50,\"w\":50,\"enabled\":true,\"hidden\":false} {\"page\":2,\"id\":2,\"obj\":\"btn\",\"x\":5,\"y\":90,\"h\":90,\"w\":50,\"enabled\":false,\"hidden\":false} Once the object is created, you can reference it with pxby where x is the page number and y is the id of the object. for example: p2b1.w=100 p2b2.hidden=true Comments ~ If any of the required id or objid properties are missing - and the line is still valid json - then it is interpreted as a comment. You can also use the page parameter in a comment to set the default page for new objects that don't have a page parameter. Example 1: Add a comment on a single line that is ignored. {\"comment\":\" ----------- Page 2 layout ------------\"} Example 2: Set the default page for next object(s) to 3 besides adding a comment as well. {\"page\":3,\"comment\":\" ---- My Awesome Color Picker Layout ----\"} If you then omit the page parameter in the lines below this comment, those objects will appear by default on page 3 . If the line is not valid json, the parsing of the rest of the file is also stopped. Blank Lines ~ Blank lines are allowed for readability and are ignored.","title":"Pages"},{"location":"pages/#pagesjsonl","text":"The location of this file is /pages.jsonl in the root of the filesystem. It uses the JSON Lines format with one json object per line. Each line should contain exactly one valid json object and end with a line-break \\n (not a comma) . The jsonl lines are interpreted line-by-line. When a malformed line is encountered, the processing of the rest of the file stops. If you are missing objects, check the logs to see which line was processed last. You probably have a typo in the following line which blocks parsing the rest of the file. Note The complete file in its entirety is not a valid json file. Each individual line however must be a valid json object. The file extension is .jsonl and not .json .","title":"pages.jsonl"},{"location":"pages/#objects","text":"Each line in pages.jsonl creates one object on a page and has to be in the json format. The order of the objects also dictates the layer on the page from bottom to top. Example Objects {\"page\":2,\"id\":1,\"obj\":\"label\",\"x\":5,\"y\":5,\"h\":50,\"w\":50,\"enabled\":true,\"hidden\":false} {\"page\":2,\"id\":2,\"obj\":\"btn\",\"x\":5,\"y\":90,\"h\":90,\"w\":50,\"enabled\":false,\"hidden\":false} Once the object is created, you can reference it with pxby where x is the page number and y is the id of the object. for example: p2b1.w=100 p2b2.hidden=true","title":"Objects"},{"location":"pages/#comments","text":"If any of the required id or objid properties are missing - and the line is still valid json - then it is interpreted as a comment. You can also use the page parameter in a comment to set the default page for new objects that don't have a page parameter. Example 1: Add a comment on a single line that is ignored. {\"comment\":\" ----------- Page 2 layout ------------\"} Example 2: Set the default page for next object(s) to 3 besides adding a comment as well. {\"page\":3,\"comment\":\" ---- My Awesome Color Picker Layout ----\"} If you then omit the page parameter in the lines below this comment, those objects will appear by default on page 3 . If the line is not valid json, the parsing of the rest of the file is also stopped.","title":"Comments"},{"location":"pages/#blank-lines","text":"Blank lines are allowed for readability and are ignored.","title":"Blank Lines"},{"location":"stm32/","text":"Experimental MCUs ~ Recommended Boards ~ table th:first-of-type { width: 12%; } table th:nth-of-type(2) { width: 22%; } table th:nth-of-type(3) { width: 22%; } table th:nth-of-type(4) { width: 22%; } table th:last-of-type { width: 22%; } Basic Standard Pro Experimental MCU ESP8266 ESP32-WROOM ESP32-WROVER STM32F4 CPU Freq. 80Mhz 240Mhz 240Mhz 168 MHz Ram 80Kb 520Kb 520Kb 192Kb PSRam no no yes no Minimal Flash 4MB 4MB 4MB 512Kb Display ILI9341 SPI ILI9341 SPI ILI9341 SPI ILI9341 FSMC Touch XPT2046 SPI XPT2046 SPI XPT2046 SPI XPT2046 SPI Network Wi-Fi Wi-Fi Wi-Fi Ethernet / Wi-Fi Dev. Board* [D1 mini ESP8266][3] [D1 mini ESP32][4] [TTGO T7 v1.5 Mini32][5] STM32F407VET/ZGT Black Firmware Download Download Download STM32F407xxT Black Combo ~ There are several cheap STM32F407xx Black boards available on the market with a TFT display header and accompanying 3.2\" ILI9341 FSMC screen (320x240). This hardware is experimental and not fully supported. Selection of STM32F407 boards. Make sure to purchase a compatible screen, preferably from the same vendor. There are multiple FSMC interfaces: e.g. One is marked TFT , another is marked New-TFT and a third has no markings. The pinout of each header & display is different and are not interchangeable! You can however use jumper cables instead, but it won't be plug-and-plug anymore. The following boards are being tested: STM32F407VET6 Black (v2.1) with 512 KB flash ~ STM32F407VET6 Black (v2.0 and v2.1) Purchase Links: AliExpress AliExpress AliExpress (! V2.0 !) Documentation can be found on GitHub STM32F407ZGT6 Black (V3.0) with 1 MB flash ~ STM32F407ZGT6 Black (v3.0) Purchase Link: Documentation can be found on GitHub Attention The STM32F4 boards do not have network connectivity. You can use a compatible network adapter and configure it in PlatformIO. Images of STM32 boards are CC BY-NC 4.0 from https://stm32-base.org/","title":"Stm32"},{"location":"stm32/#experimental-mcus","text":"","title":"Experimental MCUs"},{"location":"stm32/#recommended-boards","text":"table th:first-of-type { width: 12%; } table th:nth-of-type(2) { width: 22%; } table th:nth-of-type(3) { width: 22%; } table th:nth-of-type(4) { width: 22%; } table th:last-of-type { width: 22%; } Basic Standard Pro Experimental MCU ESP8266 ESP32-WROOM ESP32-WROVER STM32F4 CPU Freq. 80Mhz 240Mhz 240Mhz 168 MHz Ram 80Kb 520Kb 520Kb 192Kb PSRam no no yes no Minimal Flash 4MB 4MB 4MB 512Kb Display ILI9341 SPI ILI9341 SPI ILI9341 SPI ILI9341 FSMC Touch XPT2046 SPI XPT2046 SPI XPT2046 SPI XPT2046 SPI Network Wi-Fi Wi-Fi Wi-Fi Ethernet / Wi-Fi Dev. Board* [D1 mini ESP8266][3] [D1 mini ESP32][4] [TTGO T7 v1.5 Mini32][5] STM32F407VET/ZGT Black Firmware Download Download Download","title":"Recommended Boards"},{"location":"styling/","text":"Styling Properties You can adjust the appearance of objects by changing the foreground, background and/or border color of each object. Some objects allow for more complex syling, effectively changing its appearance or its sub-components. Boolean ~ Properties with a boolean data type accept these values and are case insensitive: true / ON / 1 / yes false / OFF / 0 / no Colors ~ Color values can be: Short names (from table below) RGB hex code ( #rrggbb ) Short hex code ( #rgb ) RGB565 number format ( 0..65535 ) Hex Code Short Name Hex Code Short Name #00FFFF Cyan or Aqua #FFC0CB Pink #00FF00 Lime #DDA0DD Plum #008000 Green #DA70D6 Orchid #008080 Teal #EE82EE Violet #0000FF Blue #FF00FF Magenta or Fuchsia #000080 Navy #800080 Purple #808000 Olive #4B0082 Indigo #CD853F Peru #B00000 Blush #A0522D Sienna #FF0000 Red #A52A2A Brown #FF6347 Tomato #800000 Maroon #FA8072 Salmon #FFFFFF White #FF7F50 Coral #FFFAFA Snow #FFA500 Orange #FFFFF0 Ivory #FFD700 Gold #FAF0E6 Linen #FFFF00 Yellow #F5F5DC Beige #F0E68C Khaki #F0FFFF Azure #FFE4C4 Bisque #C0C0C0 Silver #F5DEB3 Wheat #808080 Gray or Grey #D2B48C Tan #000000 Black Setting Color ~ Examples: p0b2.value_color=13891 p1b5.text_color=silver p2b3.bg_color=#C042A3 p2b4.border_color=#9f9 Return values ~ When retrieving the color of an object, both the HTML representation as the RGB values are returned seperately. The format will be a json object with components: color : 6 digit hexadecimal code preceeded by a hash # sign. r : byte value for red ( 0..255 ) g : byte value for green ( 0..255 ) b : byte value for blue ( 0..255 ) For example, the color returned by a color picker change event is: hasp/plate_123/state/p1b4 => {\"color\":\"#00fff6\",\"r\":0,\"g\":255,\"b\":246} Background ~ The color and gradient used for drawing the background of an object. Property Type Description bg_opa byte The background opacity level bg_color color The background color bg_grad_color color The background gradient color bg_grad_dir [0..2] 0 = none (=default) 1 = horizontal 2 = vertical bg_grad_stop byte Specifies where the gradient should stop. 0 = at left/top most position 255= at right/bottom most position (=default) bg_main_stop byte Specifies where should the gradient start 0 = at left/top most position (=default) 255= at right/bottom most position To adjust the background style of a page use pxb0 where x is the page number. Border ~ The border is drawn on top of the background. It has radius rounding. Property Type Description border_color color Specifies the color of the border border_opa byte Specifies opacity of the border border_width byte Set the width of the border border_side byte Specifies which sides of the border to draw. 0 = none 1 = bottom 2 = top 4 = left 8 = right 15 = full A sum of these values is also possible to select specific sides. border_post bool If true the border will be drawn after all children have been drawn. Line ~ Properties for line objects only. Property Type Description line_color color Color of the line line_opa byte Opacity level of the line [0-255] line_width int16 Width of the line line_dash_width int16 Width of dash. Dashing is drawn only for horizontal or vertical lines. 0 = disable dash (= default) line_dash_gap int16 Gap between two dash line. Dashing is drawn only for horizontal or vertical lines. 0 = disable dash (= default) line_rounded bool true = draw rounded line endings. Default = false Padding and Margin ~ Padding sets the space on the inner sides of the edges. It means \"I don't want my children too close to my sides, so keep this space\". Padding inner sets the \"gap\" between the children. Margin sets the space on the outer side of the edges. It means \"I want this space around me\". Objects use them to set spacing. See the documentation of the objects for the details. Property Type Description pad_top int16 Set the padding on the top pad_bottom int16 Set the padding on the bottom pad_left int16 Set the padding on the left pad_right int16 Set the padding on the right pad_inner int16 Set the padding inside the object between children margin_top int16 Set the margin on the top margin_bottom int16 Set the margin on the bottom margin_left int16 Set the margin on the left margin_right int16 Set the margin on the right Scale ~ The properties for styling the scale of a linemeter or gauge. Property Type Description scale_grad_color color Make gradient to this color on the scale lines scale_end_color color Color of the scale lines in the end region scale_width int16 Width of the scale scale_border_width int16 Width of a border drawn on the outer side of the scale in the normal region scale_end_border_width int16 Width of a border drawn on the outer side of the scale in the end region scale_end_line_width int16 Width of a scale lines in the end region Shadow ~ The shadow is a blurred area under the object. Property Type Description shadow_color color Color of the shadow shadow_opa byte Specifies opacity of the shadow shadow_width int16 Set the width (blur size) of the outline shadow_ofs_x int16 Set the an X offset for the shadow shadow_ofs_y int16 Set the an Y offset for the shadow shadow_spread byte Make the shadow larger than the background in every direction by this value Text ~ Properties for textual objects only. Property Type Description text_color color Color of the text text_opa byte Opacity level of the text [0-255] text_font byte The Font ID text_letter_space int16 Distance between letters of the text, can be a negative number text_line_space int16 Distance between lines of the text, can be a negative number text_decor byte Add text decoration. 0 = none (=default) 1 = underline 2 = strikethrough 3 = underline and strikethrough text_sel_color color Set background color of text selection Value ~ Value is an arbitrary text drawn on top of an object. It can be a lightweight replacement for creating label objects. Property Type Description value_str string Text to display value_color color Color of the text value_opa byte Opacity level of the text [0-255] value_font byte The Font ID value_letter_space int16 Distance between letters of the text, can be a negative number value_line_space int16 Distance between lines of the text, can be a negative number value_align align Alignment of the text. Can be: none, left, right, top, bottom, full or center (=default) value_ofs_x int16 X offset from the original position of the alignment value_ofs_y int16 Y offset from the original position of the alignment","title":"Styling"},{"location":"styling/#boolean","text":"Properties with a boolean data type accept these values and are case insensitive: true / ON / 1 / yes false / OFF / 0 / no","title":"Boolean"},{"location":"styling/#colors","text":"Color values can be: Short names (from table below) RGB hex code ( #rrggbb ) Short hex code ( #rgb ) RGB565 number format ( 0..65535 ) Hex Code Short Name Hex Code Short Name #00FFFF Cyan or Aqua #FFC0CB Pink #00FF00 Lime #DDA0DD Plum #008000 Green #DA70D6 Orchid #008080 Teal #EE82EE Violet #0000FF Blue #FF00FF Magenta or Fuchsia #000080 Navy #800080 Purple #808000 Olive #4B0082 Indigo #CD853F Peru #B00000 Blush #A0522D Sienna #FF0000 Red #A52A2A Brown #FF6347 Tomato #800000 Maroon #FA8072 Salmon #FFFFFF White #FF7F50 Coral #FFFAFA Snow #FFA500 Orange #FFFFF0 Ivory #FFD700 Gold #FAF0E6 Linen #FFFF00 Yellow #F5F5DC Beige #F0E68C Khaki #F0FFFF Azure #FFE4C4 Bisque #C0C0C0 Silver #F5DEB3 Wheat #808080 Gray or Grey #D2B48C Tan #000000 Black","title":"Colors"},{"location":"styling/#background","text":"The color and gradient used for drawing the background of an object. Property Type Description bg_opa byte The background opacity level bg_color color The background color bg_grad_color color The background gradient color bg_grad_dir [0..2] 0 = none (=default) 1 = horizontal 2 = vertical bg_grad_stop byte Specifies where the gradient should stop. 0 = at left/top most position 255= at right/bottom most position (=default) bg_main_stop byte Specifies where should the gradient start 0 = at left/top most position (=default) 255= at right/bottom most position To adjust the background style of a page use pxb0 where x is the page number.","title":"Background"},{"location":"styling/#border","text":"The border is drawn on top of the background. It has radius rounding. Property Type Description border_color color Specifies the color of the border border_opa byte Specifies opacity of the border border_width byte Set the width of the border border_side byte Specifies which sides of the border to draw. 0 = none 1 = bottom 2 = top 4 = left 8 = right 15 = full A sum of these values is also possible to select specific sides. border_post bool If true the border will be drawn after all children have been drawn.","title":"Border"},{"location":"styling/#line","text":"Properties for line objects only. Property Type Description line_color color Color of the line line_opa byte Opacity level of the line [0-255] line_width int16 Width of the line line_dash_width int16 Width of dash. Dashing is drawn only for horizontal or vertical lines. 0 = disable dash (= default) line_dash_gap int16 Gap between two dash line. Dashing is drawn only for horizontal or vertical lines. 0 = disable dash (= default) line_rounded bool true = draw rounded line endings. Default = false","title":"Line"},{"location":"styling/#padding-and-margin","text":"Padding sets the space on the inner sides of the edges. It means \"I don't want my children too close to my sides, so keep this space\". Padding inner sets the \"gap\" between the children. Margin sets the space on the outer side of the edges. It means \"I want this space around me\". Objects use them to set spacing. See the documentation of the objects for the details. Property Type Description pad_top int16 Set the padding on the top pad_bottom int16 Set the padding on the bottom pad_left int16 Set the padding on the left pad_right int16 Set the padding on the right pad_inner int16 Set the padding inside the object between children margin_top int16 Set the margin on the top margin_bottom int16 Set the margin on the bottom margin_left int16 Set the margin on the left margin_right int16 Set the margin on the right","title":"Padding and Margin"},{"location":"styling/#scale","text":"The properties for styling the scale of a linemeter or gauge. Property Type Description scale_grad_color color Make gradient to this color on the scale lines scale_end_color color Color of the scale lines in the end region scale_width int16 Width of the scale scale_border_width int16 Width of a border drawn on the outer side of the scale in the normal region scale_end_border_width int16 Width of a border drawn on the outer side of the scale in the end region scale_end_line_width int16 Width of a scale lines in the end region","title":"Scale"},{"location":"styling/#shadow","text":"The shadow is a blurred area under the object. Property Type Description shadow_color color Color of the shadow shadow_opa byte Specifies opacity of the shadow shadow_width int16 Set the width (blur size) of the outline shadow_ofs_x int16 Set the an X offset for the shadow shadow_ofs_y int16 Set the an Y offset for the shadow shadow_spread byte Make the shadow larger than the background in every direction by this value","title":"Shadow"},{"location":"styling/#text","text":"Properties for textual objects only. Property Type Description text_color color Color of the text text_opa byte Opacity level of the text [0-255] text_font byte The Font ID text_letter_space int16 Distance between letters of the text, can be a negative number text_line_space int16 Distance between lines of the text, can be a negative number text_decor byte Add text decoration. 0 = none (=default) 1 = underline 2 = strikethrough 3 = underline and strikethrough text_sel_color color Set background color of text selection","title":"Text"},{"location":"styling/#value","text":"Value is an arbitrary text drawn on top of an object. It can be a lightweight replacement for creating label objects. Property Type Description value_str string Text to display value_color color Color of the text value_opa byte Opacity level of the text [0-255] value_font byte The Font ID value_letter_space int16 Distance between letters of the text, can be a negative number value_line_space int16 Distance between lines of the text, can be a negative number value_align align Alignment of the text. Can be: none, left, right, top, bottom, full or center (=default) value_ofs_x int16 X offset from the original position of the alignment value_ofs_y int16 Y offset from the original position of the alignment","title":"Value"},{"location":"wifi-setup/","text":"Wi-Fi Setup At first boot, when no Wi-Fi setup is found, the device will create an initial Access Point for configuring the device. If the touchscreen is properly connected it will display a QR code, along with a temporary SSID and password, to connect to the device. Either use the touchscreen interface or connect via a web browser to setup the credentials for your local Wi-Fi access point: Using Touchscreen ~ Tap on the screen to start a Touch Calibration sequence: Precisely touch the 4 corners as indicated Use the on-screen keyboard to enter your local SSID and password Tap on the Checkmark button in the lower righthand corner to save the settings The device will validate the entered credentials and reboot if they are correct. Using Wi-Fi Access-Point ~ Connect to the temporary Access Point by scanning the QR on the display, if available. Or Check the serial log for the SSID and password to connect. Browse to http://192.168.4.1 Enter your local SSID and password for joining the device to your wireless network Click Save Settings The device will automatically reboot and connect to your wireless LAN Using Command line ~ You can also directly configure the Wi-Fi settings via the serial console: ssid myAccessPointName pass myWifiPassword reboot To skip this step, Wi-Fi credentials can be saved into the .bin file when you compile the firmware yourself. Rename user_config_override-template.h to user_config_override.h , enter your credentials and use flag -DUSE_CONFIG_OVERRIDE when compiling","title":"Wi-Fi Setup"},{"location":"wifi-setup/#using-touchscreen","text":"Tap on the screen to start a Touch Calibration sequence: Precisely touch the 4 corners as indicated Use the on-screen keyboard to enter your local SSID and password Tap on the Checkmark button in the lower righthand corner to save the settings The device will validate the entered credentials and reboot if they are correct.","title":"Using Touchscreen"},{"location":"wifi-setup/#using-wi-fi-access-point","text":"Connect to the temporary Access Point by scanning the QR on the display, if available. Or Check the serial log for the SSID and password to connect. Browse to http://192.168.4.1 Enter your local SSID and password for joining the device to your wireless network Click Save Settings The device will automatically reboot and connect to your wireless LAN","title":"Using Wi-Fi Access-Point"},{"location":"wifi-setup/#using-command-line","text":"You can also directly configure the Wi-Fi settings via the serial console: ssid myAccessPointName pass myWifiPassword reboot To skip this step, Wi-Fi credentials can be saved into the .bin file when you compile the firmware yourself. Rename user_config_override-template.h to user_config_override.h , enter your credentials and use flag -DUSE_CONFIG_OVERRIDE when compiling","title":"Using Command line"},{"location":"configuration/debug/","text":"Debug Settings ~ Web UI ~ With the upload function you can upload 2 types of files * .jsonl This file contains the layout for the pages See 'pages' section for more information on this file * .zi These are font files used in the Nextion/TJC HMI disp. Serial Speed ~ Select one of the built-in themes to select the general style for the HASP interface. With the Hue slider you can select the base color for the built-in theme. Syslog Server ~ Enter the filename of the .jsonl you have uploaded to enables the layout on startup. Syslog Port ~ Select to what page the display should switch on startup. Syslog Protocol ~ Select the brightness level of the display on startup. Please note that the display must support dim feature and GPIO for dim is set in display setup. Click 'Save Settings' to save your settings to the device. A restart is required to make the settings active. Navigate back to the Main Menu and click Restart to activate the settings.","title":"Debug Settings"},{"location":"configuration/debug/#debug-settings","text":"","title":"Debug Settings"},{"location":"configuration/debug/#web-ui","text":"With the upload function you can upload 2 types of files * .jsonl This file contains the layout for the pages See 'pages' section for more information on this file * .zi These are font files used in the Nextion/TJC HMI disp.","title":"Web UI"},{"location":"configuration/debug/#serial-speed","text":"Select one of the built-in themes to select the general style for the HASP interface. With the Hue slider you can select the base color for the built-in theme.","title":"Serial Speed"},{"location":"configuration/debug/#syslog-server","text":"Enter the filename of the .jsonl you have uploaded to enables the layout on startup.","title":"Syslog Server"},{"location":"configuration/debug/#syslog-port","text":"Select to what page the display should switch on startup.","title":"Syslog Port"},{"location":"configuration/debug/#syslog-protocol","text":"Select the brightness level of the display on startup. Please note that the display must support dim feature and GPIO for dim is set in display setup. Click 'Save Settings' to save your settings to the device. A restart is required to make the settings active. Navigate back to the Main Menu and click Restart to activate the settings.","title":"Syslog Protocol"},{"location":"configuration/display/","text":"Display Settings ~ Define the overal settings of the display driver. Web UI ~ Short Idle ~ When the display has not been touched for the Short Idle amount of seconds, an idle = SHORT event will be sent out. Long Idle ~ When the display has not been touched for Long + Short Idle amount of seconds, an idle = LONG event will be sent out. The Long Idle period begins to count after the Short Idle period. Orientation ~ Rotate the display by the set number of degrees and optionally mirror the display as well. Show Pointer ~ Enable this option to show a mouse pointer. This helps with checking if the touches are correctly detected. Backlight Control ~ Sets the GPIO pin which is used for PWM dimming of the backlight. Calibrate ~ Only available with XPT2046 resistive touchscreen controllers. Starts an onscreen calibration sequence. Click 'Save Settings' to save your settings to the device. A restart is required to make the settings active. Navigate back to the Main Menu and click Restart to activate the settings.","title":"Display Settings"},{"location":"configuration/display/#display-settings","text":"Define the overal settings of the display driver.","title":"Display Settings"},{"location":"configuration/display/#web-ui","text":"","title":"Web UI"},{"location":"configuration/display/#short-idle","text":"When the display has not been touched for the Short Idle amount of seconds, an idle = SHORT event will be sent out.","title":"Short Idle"},{"location":"configuration/display/#long-idle","text":"When the display has not been touched for Long + Short Idle amount of seconds, an idle = LONG event will be sent out. The Long Idle period begins to count after the Short Idle period.","title":"Long Idle"},{"location":"configuration/display/#orientation","text":"Rotate the display by the set number of degrees and optionally mirror the display as well.","title":"Orientation"},{"location":"configuration/display/#show-pointer","text":"Enable this option to show a mouse pointer. This helps with checking if the touches are correctly detected.","title":"Show Pointer"},{"location":"configuration/display/#backlight-control","text":"Sets the GPIO pin which is used for PWM dimming of the backlight.","title":"Backlight Control"},{"location":"configuration/display/#calibrate","text":"Only available with XPT2046 resistive touchscreen controllers. Starts an onscreen calibration sequence. Click 'Save Settings' to save your settings to the device. A restart is required to make the settings active. Navigate back to the Main Menu and click Restart to activate the settings.","title":"Calibrate"},{"location":"configuration/gpio/","text":"GPIO Settings You can attach external devices like buttons, switches, relays or LEDs using the GPIO pins of the ESP. Web UI ~ Pin ~ Select the pin of the gpio to use. Pins known to be in use will be hidden from this list. Check the documentation of your board to see which pins are free to be used as gpio. Groupid ~ GPIOs and objects can be grouped together by specifying a groupid. The state of objects is then altered by any object in the same group. This allows for simple action-reaction scenarios without relying on a home automation system: Link a switch and relay together Link a push button and doorbell together The applied value is normalized and proportionate to the value of the input object, much like a percentage: Binary objects, like a switch, checkbox or toggle button only pass along 0% and 100% values. Range objects, like a slider, arc slider, roller or drop-down list pass along a value between 0-65535, depending on their current min , max and val attributes. Note The grouping of multiple gpios and objects together is intended for simple actions only. More complex actions should be performed by a home automation system, without linking groupids together. Default state ~ The polarity of the gpio when it is not being engaged i.e. the gpio is not connected, zero or idle: HIGH : The default state is high using the internal PULL_UP resistor. LOW : The default state is low using the internal PULL_DOWN resistor. Types ~ Button ~ A button gpio sends events to topic input# where # is the groupnumber. GPIO buttons send out events while they occur. The possible events are: DOWN : Occurs when a button goes from depressed to pressed SHORT : The button was released within a short time i.e. a short click has occurred LONG : Event is send when the button is still being pressed after the threshold time UP : The button is released after being pressing for a LONG threshold time. The values of objects or gpios with the same groupid will be set to maximum when the button is being pressed and to minimum when the button is released. Switch ~ A switch gpio sends events to input# where # is the groupnumber. GPIO Switches send out their value when toggled: {\"val\":\"0\"} or {\"val\":\"1\"}. The values of objects or gpios in the same group will be set to maximum when the switch is turned on and to minimum when the switch is turned off. Relay ~ Set the relay ON or OFF when an event is received on output# where # is the groupnumber or from another group intput . When a relay is grouped with a button or switch in the same group, it will be turned ON or OFF according to the state of the button or switch. When a relay is controlled by a range object (slider, arc slider, roller, drop-down list) within the same group, the state will be be ON if the .val value is halfway the range or above. Warning Attaching devices to mains power can be dangerous! Configuring gpios is done on your own responsibility . Be sure to test any system thoroughly using low voltages first. Led ~ Set the brightness of the LED between 0 and 255 when a value is received on output# where # is the groupnumber. When a led is controlled by a button or switch in the same group, it will be turned ON or off according to the state of the button or switch. When a led is controlled by a range object (slider, arc slider, roller, drop-down list) in the same group, the brightness will be proportional to the .val value of the object within its range ( min-max ). For example: Consider a roller or drop-down list with 4 options: OFF , Low , Medium and High . The .val values can range from 0 to 3. These will set the brightness of the led to 0 (0%), 84 (33%), 170 (66%) and 255 (100%) respectively. For a roller or drop-down list with 5 options, .val ranges between 0 and 4. The brightness of the led increases 25% with each step. PWM ~ Set the duty cycle of the pin between 0 and 4095 when a value is received on output# where # is the groupnumber or from another group intput . When the PWM gpio is grouped with a button or switch, its duty cycle is either set to full-duty or off according to the state of the button or switch. When the PWM gpio is grouped with range object (slider, arc slider, roller, drop-down list), the duty cycle is proportional to the .val value of the object within its range ( min-max ). Idle State ~ The GPIO pins do not affect the idle state of the device. Only interacting with the touchscreen automatically resets the idle state. If you want a GPIO pin to wakeup the device, you should monitor its mqtt topic and use the wakeup , dim and light commands appropriately. Click 'Save Settings' to save your settings to the device. A restart is required to make the settings active. Navigate back to the Main Menu and click Restart to activate the settings.","title":"Gpio"},{"location":"configuration/gpio/#web-ui","text":"","title":"Web UI"},{"location":"configuration/gpio/#pin","text":"Select the pin of the gpio to use. Pins known to be in use will be hidden from this list. Check the documentation of your board to see which pins are free to be used as gpio.","title":"Pin"},{"location":"configuration/gpio/#groupid","text":"GPIOs and objects can be grouped together by specifying a groupid. The state of objects is then altered by any object in the same group. This allows for simple action-reaction scenarios without relying on a home automation system: Link a switch and relay together Link a push button and doorbell together The applied value is normalized and proportionate to the value of the input object, much like a percentage: Binary objects, like a switch, checkbox or toggle button only pass along 0% and 100% values. Range objects, like a slider, arc slider, roller or drop-down list pass along a value between 0-65535, depending on their current min , max and val attributes. Note The grouping of multiple gpios and objects together is intended for simple actions only. More complex actions should be performed by a home automation system, without linking groupids together.","title":"Groupid"},{"location":"configuration/gpio/#default-state","text":"The polarity of the gpio when it is not being engaged i.e. the gpio is not connected, zero or idle: HIGH : The default state is high using the internal PULL_UP resistor. LOW : The default state is low using the internal PULL_DOWN resistor.","title":"Default state"},{"location":"configuration/gpio/#types","text":"","title":"Types"},{"location":"configuration/gpio/#button","text":"A button gpio sends events to topic input# where # is the groupnumber. GPIO buttons send out events while they occur. The possible events are: DOWN : Occurs when a button goes from depressed to pressed SHORT : The button was released within a short time i.e. a short click has occurred LONG : Event is send when the button is still being pressed after the threshold time UP : The button is released after being pressing for a LONG threshold time. The values of objects or gpios with the same groupid will be set to maximum when the button is being pressed and to minimum when the button is released.","title":"Button"},{"location":"configuration/gpio/#switch","text":"A switch gpio sends events to input# where # is the groupnumber. GPIO Switches send out their value when toggled: {\"val\":\"0\"} or {\"val\":\"1\"}. The values of objects or gpios in the same group will be set to maximum when the switch is turned on and to minimum when the switch is turned off.","title":"Switch"},{"location":"configuration/gpio/#relay","text":"Set the relay ON or OFF when an event is received on output# where # is the groupnumber or from another group intput . When a relay is grouped with a button or switch in the same group, it will be turned ON or OFF according to the state of the button or switch. When a relay is controlled by a range object (slider, arc slider, roller, drop-down list) within the same group, the state will be be ON if the .val value is halfway the range or above. Warning Attaching devices to mains power can be dangerous! Configuring gpios is done on your own responsibility . Be sure to test any system thoroughly using low voltages first.","title":"Relay"},{"location":"configuration/gpio/#led","text":"Set the brightness of the LED between 0 and 255 when a value is received on output# where # is the groupnumber. When a led is controlled by a button or switch in the same group, it will be turned ON or off according to the state of the button or switch. When a led is controlled by a range object (slider, arc slider, roller, drop-down list) in the same group, the brightness will be proportional to the .val value of the object within its range ( min-max ). For example: Consider a roller or drop-down list with 4 options: OFF , Low , Medium and High . The .val values can range from 0 to 3. These will set the brightness of the led to 0 (0%), 84 (33%), 170 (66%) and 255 (100%) respectively. For a roller or drop-down list with 5 options, .val ranges between 0 and 4. The brightness of the led increases 25% with each step.","title":"Led"},{"location":"configuration/gpio/#pwm","text":"Set the duty cycle of the pin between 0 and 4095 when a value is received on output# where # is the groupnumber or from another group intput . When the PWM gpio is grouped with a button or switch, its duty cycle is either set to full-duty or off according to the state of the button or switch. When the PWM gpio is grouped with range object (slider, arc slider, roller, drop-down list), the duty cycle is proportional to the .val value of the object within its range ( min-max ).","title":"PWM"},{"location":"configuration/gpio/#idle-state","text":"The GPIO pins do not affect the idle state of the device. Only interacting with the touchscreen automatically resets the idle state. If you want a GPIO pin to wakeup the device, you should monitor its mqtt topic and use the wakeup , dim and light commands appropriately. Click 'Save Settings' to save your settings to the device. A restart is required to make the settings active. Navigate back to the Main Menu and click Restart to activate the settings.","title":"Idle State"},{"location":"configuration/hasp/","text":"HASP Settings ~ You can configure the general look and feel for the interface by uploading you favorite fonts and selecting your favorite theme and color. Web UI ~ Upload ~ With the upload function you can upload 2 types of files * .jsonl This file contains the layout for the pages See 'pages' section for more information on this file * .zi These are font files used in the Nextion/TJC HMI disp. UI Theme and Hue ~ Select one of the built-in themes to select the general style for the HASP interface. With the Hue slider you can select the base color for the built-in theme. Startup layout ~ Enter the filename of the .jsonl you have uploaded to enables the layout on startup. Startup Page ~ Select to what page the display should switch on startup. Startup brightness ~ Select the brightness level of the display on startup. Please note that the display must support dim feature and GPIO for dim is set in display setup. Click 'Save Settings' to save your settings to the device. A restart is required to make the settings active. Navigate back to the Main Menu and click Restart to activate the settings.","title":"HASP Settings"},{"location":"configuration/hasp/#hasp-settings","text":"You can configure the general look and feel for the interface by uploading you favorite fonts and selecting your favorite theme and color.","title":"HASP Settings"},{"location":"configuration/hasp/#web-ui","text":"","title":"Web UI"},{"location":"configuration/http/","text":"HTTP Settings ~ To restrict access to the web user interface you can set a Username and Password. Web UI ~ Click 'Save Settings' to activate immediately. If the username and/or password have been changed you need to enter the new values. Note Please note that all http communication is unencrypted and that this is only a simple security measure","title":"HTTP Settings"},{"location":"configuration/http/#http-settings","text":"To restrict access to the web user interface you can set a Username and Password.","title":"HTTP Settings"},{"location":"configuration/http/#web-ui","text":"Click 'Save Settings' to activate immediately. If the username and/or password have been changed you need to enter the new values. Note Please note that all http communication is unencrypted and that this is only a simple security measure","title":"Web UI"},{"location":"configuration/mqtt/","text":"MQTT Settings ~ All communication between HASP Open Display and your Home Automation service is done over MQTT. You will need an already working MQTT Broker. Learn more about the protocol on MQTT Essentials Web UI ~ HASP Node Name ~ The Node Name is the unique identifier of your device on your MQTT Broker. For example, setting the Node Name to plate35 will make the device listen and communicate on the main topic hasp/plate35/ Group Name ~ The Group Name is the unique identifier for a Group of devices. For example, the default Group Name is plates . This will make all devices in this group listen on the main topic hasp/plates/ This way you can send a command to all devices in the group at the same moment. Each devices will only respond on their own main Node Name topic. MQTT Broker ~ Set the IP or hostname of your MQTT Broker MQTT Port ~ Set the port for your MQTT Broker MQTT User and Password ~ Enter credentials if your MQTT Broker requires a Username and Password. Click 'Save Settings' to save your settings to the device. A restart is required to make the settings active. Navigate back to the Main Menu and click Restart to activate the settings. Commandline ~ You can also configure the mqtt settings via the serial or telnet console: hostname myPlateName mqtthost 192.168.0.123 mqttport 1883 mqttuser myUsername mqttpass myPassword reboot","title":"MQTT Settings"},{"location":"configuration/mqtt/#mqtt-settings","text":"All communication between HASP Open Display and your Home Automation service is done over MQTT. You will need an already working MQTT Broker. Learn more about the protocol on MQTT Essentials","title":"MQTT Settings"},{"location":"configuration/mqtt/#web-ui","text":"","title":"Web UI"},{"location":"configuration/mqtt/#hasp-node-name","text":"The Node Name is the unique identifier of your device on your MQTT Broker. For example, setting the Node Name to plate35 will make the device listen and communicate on the main topic hasp/plate35/","title":"HASP Node Name"},{"location":"configuration/mqtt/#group-name","text":"The Group Name is the unique identifier for a Group of devices. For example, the default Group Name is plates . This will make all devices in this group listen on the main topic hasp/plates/ This way you can send a command to all devices in the group at the same moment. Each devices will only respond on their own main Node Name topic.","title":"Group Name"},{"location":"configuration/mqtt/#mqtt-broker","text":"Set the IP or hostname of your MQTT Broker","title":"MQTT Broker"},{"location":"configuration/mqtt/#mqtt-port","text":"Set the port for your MQTT Broker","title":"MQTT Port"},{"location":"configuration/mqtt/#mqtt-user-and-password","text":"Enter credentials if your MQTT Broker requires a Username and Password. Click 'Save Settings' to save your settings to the device. A restart is required to make the settings active. Navigate back to the Main Menu and click Restart to activate the settings.","title":"MQTT User and Password"},{"location":"configuration/mqtt/#commandline","text":"You can also configure the mqtt settings via the serial or telnet console: hostname myPlateName mqtthost 192.168.0.123 mqttport 1883 mqttuser myUsername mqttpass myPassword reboot","title":"Commandline"},{"location":"configuration/wifi/","text":"Wifi Settings ~ When using a wireless network adapter, you need to configure the SSID to connect. Web UI ~ SSID ~ The name of the access point to connect to. Password ~ Optional password for the access point, if required. Click 'Save Settings' to save your settings to the device. A restart is required to make the settings active. Navigate back to the Main Menu and click Restart to activate the settings. Commandline ~ You can also configure the wifi settings via the serial or telnet console: ssid myAccessPointName pass myWifiPassword reboot","title":"Wifi Settings"},{"location":"configuration/wifi/#wifi-settings","text":"When using a wireless network adapter, you need to configure the SSID to connect.","title":"Wifi Settings"},{"location":"configuration/wifi/#web-ui","text":"","title":"Web UI"},{"location":"configuration/wifi/#ssid","text":"The name of the access point to connect to.","title":"SSID"},{"location":"configuration/wifi/#password","text":"Optional password for the access point, if required. Click 'Save Settings' to save your settings to the device. A restart is required to make the settings active. Navigate back to the Main Menu and click Restart to activate the settings.","title":"Password"},{"location":"configuration/wifi/#commandline","text":"You can also configure the wifi settings via the serial or telnet console: ssid myAccessPointName pass myWifiPassword reboot","title":"Commandline"},{"location":"devices/esp32-touchdown/","text":"ESP32-Touchdown Features: ESP32-WROOM-32D ILI9488 3.5\" (480*320) TFT screen in 4-wire SPI mode FT62x6 Capacitive Touch Controller APK2112 3.3V regulator MCP73831 battery management IC CP2102 USB-to-UART IC USB-C connector Piezo Speaker microSD card holder Battery voltage divider connected to GPIO35 Stemma / JST-PH I2C connector Compact size: 100x57x15mm This board was originaly created for the FreeTouchDeck project and the hardware is also open source. Due to the extensive documentation it was easy to port hasp-lvgl to the ESP32-Touchdown. Available on Video ~ Backlight Control ~ To enable backlight control, make sure the solder jumper pad is in position 2-1: 3D Printed Cases ~ You can find several different 3D printable cases in the ESP32-Touchdown repository : Flashing ~ The ESP32-Touchdown can easily be flashed over USB like any ESP32 development board. GPIO Settings ~ These pins can be used freely as GPIOs: PCB Blueprint ~ The ESP32-Touchdown is fully Open Source Hardware : Schematics Bill of materials PCB layout Datasheets HASP build_flags ~ Specify the LCD Configuration to use and define the GPIOs in the environment build flags: build_flags = ${env.build_flags} ${esp32.build_flags} ${esp32.vspi} ; Use VSPI hardware SPI bus ;region -- TFT_eSPI build options ------------------------ -D USER_SETUP_LOADED=1 -D ILI9488_DRIVER=1 -D TFT_ROTATION=0 ; 0=0, 1=90, 2=180 or 3=270 degree -D TFT_WIDTH=320 -D TFT_HEIGHT=480 -D TFT_CS=15 ;// Chip select control pin -D TFT_DC=2 ;// Data Command control pin -D TFT_RST=4 ;// Reset pin (could connect to RST pin) -D TFT_BCKL=5 ;None, configurable via web UI (e.g. 2 for D4) -D SUPPORT_TRANSACTIONS -D TOUCH_DRIVER=6336 ; XPT2606 Resistive touch panel driver -D TOUCH_SDA=21 -D TOUCH_SCL=22 -D TOUCH_IRQ=27 ; not connected -D TOUCH_RST=-1 ; not used, connected to 3.3V -D TOUCH_FREQUENCY=400000 -D SPI_FREQUENCY=27000000 -D SPI_READ_FREQUENCY=16000000 ;endregion","title":"ESP32-Touchdown"},{"location":"devices/esp32-touchdown/#video","text":"","title":"Video"},{"location":"devices/esp32-touchdown/#backlight-control","text":"To enable backlight control, make sure the solder jumper pad is in position 2-1:","title":"Backlight Control"},{"location":"devices/esp32-touchdown/#3d-printed-cases","text":"You can find several different 3D printable cases in the ESP32-Touchdown repository :","title":"3D Printed Cases"},{"location":"devices/esp32-touchdown/#flashing","text":"The ESP32-Touchdown can easily be flashed over USB like any ESP32 development board.","title":"Flashing"},{"location":"devices/esp32-touchdown/#gpio-settings","text":"These pins can be used freely as GPIOs:","title":"GPIO Settings"},{"location":"devices/esp32-touchdown/#pcb-blueprint","text":"The ESP32-Touchdown is fully Open Source Hardware : Schematics Bill of materials PCB layout Datasheets","title":"PCB Blueprint"},{"location":"devices/esp32-touchdown/#hasp-build_flags","text":"Specify the LCD Configuration to use and define the GPIOs in the environment build flags: build_flags = ${env.build_flags} ${esp32.build_flags} ${esp32.vspi} ; Use VSPI hardware SPI bus ;region -- TFT_eSPI build options ------------------------ -D USER_SETUP_LOADED=1 -D ILI9488_DRIVER=1 -D TFT_ROTATION=0 ; 0=0, 1=90, 2=180 or 3=270 degree -D TFT_WIDTH=320 -D TFT_HEIGHT=480 -D TFT_CS=15 ;// Chip select control pin -D TFT_DC=2 ;// Data Command control pin -D TFT_RST=4 ;// Reset pin (could connect to RST pin) -D TFT_BCKL=5 ;None, configurable via web UI (e.g. 2 for D4) -D SUPPORT_TRANSACTIONS -D TOUCH_DRIVER=6336 ; XPT2606 Resistive touch panel driver -D TOUCH_SDA=21 -D TOUCH_SCL=22 -D TOUCH_IRQ=27 ; not connected -D TOUCH_RST=-1 ; not used, connected to 3.3V -D TOUCH_FREQUENCY=400000 -D SPI_FREQUENCY=27000000 -D SPI_READ_FREQUENCY=16000000 ;endregion","title":"HASP build_flags"},{"location":"devices/lanbon-l8/","text":"Lanbon L8 Model Number: L8-HS (switch) AU version EU version US version Features: Input voltage 110-250V ~ 50-60Hz AC ESP32-WROVER-B Capacitive touch screen 3 Relays - load up to 200W/gang Analog temperature sensor Note Model Number: L8-HD (dimmer) has not been tested! Model Number: L8-HT (thermostat switch) has not been tested! Model Number: L8-HB (boiler switch) has not been tested! Contents ~ Flashing ~ Disclaimer Never connect high-voltage when the panel is not properly secured in place. Disengage the high-voltage power Detach the panel from the PSU power supply Connect RX, TX, IO0, GND and power pins to the female pinheader: Either supply 3.3V or 5V on the corresponding power pin, depending on the voltage supplied by the UART ttl (not both at the same time). Because there is no RESET pin, you need to powercycle the board to activate flash mode GPIO Settings ~ Pin Type Group Default 12 Relay 1 Low 14 Relay 2 Low 26 Mood Red 4 Low 27 Relay 3 Low 32 Mood Green 5 Low 33 Mood Blue 6 Low To configure all GPIOs at once use this command: config/gpio {\"config\":[2360346,2491680,2623009,2097420,2097678,2097947,0,0]} Wiring Diagrams ~ The switch supports several wiring configurations: Video ~ LCD Configuration ~ The lcd_config.ini file specifies the different properties of the display, except for the actual pin configuration: st7789v = -D ST7789_DRIVER=1 ;-D CGRAM_OFFSET=1 ; Library will add offsets required -D TFT_SDA_READ ; Read from display, it only provides an SDA pin -D TFT_WIDTH=240 -D TFT_HEIGHT=320 -D TFT_ROTATION=2 ; see TFT_ROTATION values ; -D TFT_INVERSION_OFF ; for normal colors ; -D TFT_RGB_ORDER=TFT_RGB ; Colour order Red-Green-Blue -D TFT_RGB_ORDER=TFT_BGR ; Colour order Blue-Green-Red -D SPI_FREQUENCY=80000000 -D SPI_READ_FREQUENCY=6000000 -D USER_SETUP_LOADED=1 -D SUPPORT_TRANSACTIONS HASP build_flags ~ Specify the LCD Configuration to use and define the GPIOs in the environment build flags: build_flags = ${env.build_flags} ${esp32.build_flags} ${esp32.ps_ram} ;region -- TFT_eSPI build options ------------------------ ${lcd.st7789v} -D LANBONL8 -D TFT_RST=18 ; FCP pin2 RESET -D TFT_SCLK=19 ; FCP pin3 SCL -D TFT_DC=21 ; FCP pin4 D/C -D TFT_CS=22 ; FCP pin5 CS -D TFT_MOSI=23 ; FCP pin6 SDA -D TFT_MISO=25 ; FCP pin7 SDO -D TFT_BCKL=5 -D TOUCH_DRIVER=5206 -D TOUCH_SDA=4 -D TOUCH_SCL=0 -D TOUCH_IRQ=-1 ; not connected -D TOUCH_RST=-1 ; not used, connected to 3.3V on FCP pin10 -D TOUCH_FREQUENCY=400000 -D LED_RED=26 -D LED_GREEN=32 -D LED_BLUE=33 -D RELAY_1=12 -D RELAY_2=24 -D RELAY_3=37 ;endregion","title":"Lanbon L8"},{"location":"devices/lanbon-l8/#contents","text":"","title":"Contents"},{"location":"devices/lanbon-l8/#flashing","text":"Disclaimer Never connect high-voltage when the panel is not properly secured in place. Disengage the high-voltage power Detach the panel from the PSU power supply Connect RX, TX, IO0, GND and power pins to the female pinheader: Either supply 3.3V or 5V on the corresponding power pin, depending on the voltage supplied by the UART ttl (not both at the same time). Because there is no RESET pin, you need to powercycle the board to activate flash mode","title":"Flashing"},{"location":"devices/lanbon-l8/#gpio-settings","text":"Pin Type Group Default 12 Relay 1 Low 14 Relay 2 Low 26 Mood Red 4 Low 27 Relay 3 Low 32 Mood Green 5 Low 33 Mood Blue 6 Low To configure all GPIOs at once use this command: config/gpio {\"config\":[2360346,2491680,2623009,2097420,2097678,2097947,0,0]}","title":"GPIO Settings"},{"location":"devices/lanbon-l8/#wiring-diagrams","text":"The switch supports several wiring configurations:","title":"Wiring Diagrams"},{"location":"devices/lanbon-l8/#video","text":"","title":"Video"},{"location":"devices/lanbon-l8/#lcd-configuration","text":"The lcd_config.ini file specifies the different properties of the display, except for the actual pin configuration: st7789v = -D ST7789_DRIVER=1 ;-D CGRAM_OFFSET=1 ; Library will add offsets required -D TFT_SDA_READ ; Read from display, it only provides an SDA pin -D TFT_WIDTH=240 -D TFT_HEIGHT=320 -D TFT_ROTATION=2 ; see TFT_ROTATION values ; -D TFT_INVERSION_OFF ; for normal colors ; -D TFT_RGB_ORDER=TFT_RGB ; Colour order Red-Green-Blue -D TFT_RGB_ORDER=TFT_BGR ; Colour order Blue-Green-Red -D SPI_FREQUENCY=80000000 -D SPI_READ_FREQUENCY=6000000 -D USER_SETUP_LOADED=1 -D SUPPORT_TRANSACTIONS","title":"LCD Configuration"},{"location":"devices/lanbon-l8/#hasp-build_flags","text":"Specify the LCD Configuration to use and define the GPIOs in the environment build flags: build_flags = ${env.build_flags} ${esp32.build_flags} ${esp32.ps_ram} ;region -- TFT_eSPI build options ------------------------ ${lcd.st7789v} -D LANBONL8 -D TFT_RST=18 ; FCP pin2 RESET -D TFT_SCLK=19 ; FCP pin3 SCL -D TFT_DC=21 ; FCP pin4 D/C -D TFT_CS=22 ; FCP pin5 CS -D TFT_MOSI=23 ; FCP pin6 SDA -D TFT_MISO=25 ; FCP pin7 SDO -D TFT_BCKL=5 -D TOUCH_DRIVER=5206 -D TOUCH_SDA=4 -D TOUCH_SCL=0 -D TOUCH_IRQ=-1 ; not connected -D TOUCH_RST=-1 ; not used, connected to 3.3V on FCP pin10 -D TOUCH_FREQUENCY=400000 -D LED_RED=26 -D LED_GREEN=32 -D LED_BLUE=33 -D RELAY_1=12 -D RELAY_2=24 -D RELAY_3=37 ;endregion","title":"HASP build_flags"},{"location":"devices/m5stack-core2/","text":"M5Stack core2 A 2\" 240x320 capacitive touch display with a custom ESP32 module.","title":"M5stack core2"},{"location":"displays/ILI9341_IPS/","text":"ILI9341 IPS Panel A 240x320 IPS TFT display with an ILI9341 controller and XPT2046 touch controller. Improvement over TN versions of the display with amazing view angles. Pin Configuration ~ Pin Function ESP32 Pin Config Name Display Pin 1 Module Ground GND GND 2 Module Power 3.3v 3V3 VCC 3 SPI Clock GPIO18 TFT_SCLK CLK 4 Data Input GPIO23 TFT_MOSI MOSI 5 LCD Reset line GPIO15 TFT_RST RES 6 Data Command control GPIO5 TFT_DC DC 7 Backlight GPIO21 TFT_BCKL BLK 8 Data Output GPIO19 TFT_MISO MISO 9 Chip Select GPIO26 TFT_CS CS1 10 Touch Select GPIO17 TOUCH_CS CS2 11 Touch Interrupt SPI MISO, MOSI and SCLK are shared between the touch controller and the LCD controller. Custom build ~ Define a custom environment in platformio_override.ini and add a new esp32_ili9341_spi entry under extra_default_envs = If you've wired pins differently, change the values below. ;-- ILI9341 SPI version ------------------------ [env:esp32_ili9341_spi] platform = espressif32 platform_packages = framework-arduinoespressif32 framework = arduino board = esp32dev monitor_port = COM4 upload_port = ${env:esp32_ili9341_spi.monitor_port} monitor_filters = esp32_exception_decoder board_build.partitions = user_setups/esp32_partition_app1300k_spiffs1216k.csv build_flags = ${env.build_flags} ${esp32.build_flags} -D ILI9341_DRIVER=1 -D TFT_WIDTH=240 -D TFT_HEIGHT=320 -D TFT_ROTATION=0 ; see TFT_ROTATION values -D INVERT_COLORS=1 ; to fix colors -D SPI_FREQUENCY=60000000 -D SPI_TOUCH_FREQUENCY=2500000 -D SPI_READ_FREQUENCY=20000000 -D USER_SETUP_LOADED=1 -D TOUCH_DRIVER=2046 ; XPT2046 Resistive SPI touch panel driver -D SUPPORT_TRANSACTIONS ${esp32.vspi} ; Use VSPI hardware SPI bus: ; TFT_MISO=19 | TFT_MOSI=23 | TFT_SCLK=18 ; MISO = 8 | MOSI = 4 | CLK = 3 ; wiring recommendations, change pins according to your wiring -D TFT_DC=5 ; DC, lcd pin 3 -D TFT_RST=15 ; RES, lcd pin 5 -D TFT_BCKL=-1 ; BLK, lcd pin 7 (configurable via web UI (e.g. 21)) -D TFT_CS=26 ; CS1, lcd pin 9 -D TOUCH_CS=17 ; CS2, lcd pin 10 lib_deps = ${env.lib_deps} ${esp32.lib_deps} lib_ignore = ${env.lib_ignore} ${esp32.lib_ignore} extra_scripts = ${env.extra_scripts} ${esp32.extra_scripts}","title":"ILI9341 IPS"},{"location":"displays/ILI9341_IPS/#pin-configuration","text":"Pin Function ESP32 Pin Config Name Display Pin 1 Module Ground GND GND 2 Module Power 3.3v 3V3 VCC 3 SPI Clock GPIO18 TFT_SCLK CLK 4 Data Input GPIO23 TFT_MOSI MOSI 5 LCD Reset line GPIO15 TFT_RST RES 6 Data Command control GPIO5 TFT_DC DC 7 Backlight GPIO21 TFT_BCKL BLK 8 Data Output GPIO19 TFT_MISO MISO 9 Chip Select GPIO26 TFT_CS CS1 10 Touch Select GPIO17 TOUCH_CS CS2 11 Touch Interrupt SPI MISO, MOSI and SCLK are shared between the touch controller and the LCD controller.","title":"Pin Configuration"},{"location":"displays/ILI9341_IPS/#custom-build","text":"Define a custom environment in platformio_override.ini and add a new esp32_ili9341_spi entry under extra_default_envs = If you've wired pins differently, change the values below. ;-- ILI9341 SPI version ------------------------ [env:esp32_ili9341_spi] platform = espressif32 platform_packages = framework-arduinoespressif32 framework = arduino board = esp32dev monitor_port = COM4 upload_port = ${env:esp32_ili9341_spi.monitor_port} monitor_filters = esp32_exception_decoder board_build.partitions = user_setups/esp32_partition_app1300k_spiffs1216k.csv build_flags = ${env.build_flags} ${esp32.build_flags} -D ILI9341_DRIVER=1 -D TFT_WIDTH=240 -D TFT_HEIGHT=320 -D TFT_ROTATION=0 ; see TFT_ROTATION values -D INVERT_COLORS=1 ; to fix colors -D SPI_FREQUENCY=60000000 -D SPI_TOUCH_FREQUENCY=2500000 -D SPI_READ_FREQUENCY=20000000 -D USER_SETUP_LOADED=1 -D TOUCH_DRIVER=2046 ; XPT2046 Resistive SPI touch panel driver -D SUPPORT_TRANSACTIONS ${esp32.vspi} ; Use VSPI hardware SPI bus: ; TFT_MISO=19 | TFT_MOSI=23 | TFT_SCLK=18 ; MISO = 8 | MOSI = 4 | CLK = 3 ; wiring recommendations, change pins according to your wiring -D TFT_DC=5 ; DC, lcd pin 3 -D TFT_RST=15 ; RES, lcd pin 5 -D TFT_BCKL=-1 ; BLK, lcd pin 7 (configurable via web UI (e.g. 21)) -D TFT_CS=26 ; CS1, lcd pin 9 -D TOUCH_CS=17 ; CS2, lcd pin 10 lib_deps = ${env.lib_deps} ${esp32.lib_deps} lib_ignore = ${env.lib_ignore} ${esp32.lib_ignore} extra_scripts = ${env.extra_scripts} ${esp32.extra_scripts}","title":"Custom build"},{"location":"displays/MHS4001/","text":"MHS4001 6 GPIOs are required to drive the SPI display. One additional GPIO is needed for the XPT2046 touch sensor. Including the Vcc and Gnd pins, a total of 12 connections need to be made to the MCU: Pin Configuration ~ Pin Function ESP32 Pin Config Name Display Pin 1 Module Power 3.3V 3.3V 3.3V 2 Module Power 5v 5V 5V 3 Not connected NC 4 LED Backlight PWM 5V TFT_BCKL 5V 5-10 Not connected NC 11 Touch Interrupt NC TP_IRQ 12-13 Not connected NC 14 Module Ground GND GND 15-16 Not connected NC 17 Module Power 3.3V 3.3V 18 Data Command control pin GPIO4 TFT_DC LCD_RS 19 SPI Master Out Slave In GPIO23 TFT_MOSI LCD/SI/TP_SI 20 Not connected NC 21 Touch Panel Slave Out GPIO19 TFT_MISO TP_SO 22 LCD Reset pin GPIO32 TFT_RST RST 23 SPI Clock GPIO18 TFT_SCLK LCD_SCK/TP_SCK 24 Chip select control pin GPIO15 TFT_CS LCD_CS 25 Module Ground GND GND 26 Touch Chip Select GPIO22 TOUCH_CS TP_CS By default, pin 4 is normally connected to 5V. This turns the display backlight LED on all time. In order to control the backlight you can drive pin 4 of the display using a PNP transistor. The electronics circuit needed is not part of this diagram. SPI MISO, MOSI and SCLK are shared between the touch controller and the LCD controller. LCD Configuration ~ The lcd_config.ini file specifies the different properties of the display, except for the actual pin configuration: raspberrypi = -D RPI_DISPLAY_TYPE=1 -D ST7796_DRIVER=1 -D TFT_WIDTH=320 -D TFT_HEIGHT=480 -D TFT_ROTATION=0 ; 0=0, 1=90, 2=180 or 3=270 degree -D SPI_FREQUENCY=80000000 -D SPI_TOUCH_FREQUENCY=2500000 -D USER_SETUP_LOADED=1 -D TOUCH_DRIVER=2046 ; XPT2046 Resistive touch panel driver -D SUPPORT_TRANSACTIONS HASP build_flags ~ Specify the LCD Configuration to use and define the 7 GPIOs in the environment build flags: build_flags = ${flags.esp32_flags} ; -- TFT_eSPI build options ------------------------ ${lcd.raspberrypi} ${esp32.vspi} ; Use VSPI hardware SPI bus -D TFT_CS=15 -D TFT_DC=4 -D TFT_RST=32 -D TFT_BCKL=-1 ; None -D TOUCH_CS=22","title":"MHS4001"},{"location":"displays/MHS4001/#pin-configuration","text":"Pin Function ESP32 Pin Config Name Display Pin 1 Module Power 3.3V 3.3V 3.3V 2 Module Power 5v 5V 5V 3 Not connected NC 4 LED Backlight PWM 5V TFT_BCKL 5V 5-10 Not connected NC 11 Touch Interrupt NC TP_IRQ 12-13 Not connected NC 14 Module Ground GND GND 15-16 Not connected NC 17 Module Power 3.3V 3.3V 18 Data Command control pin GPIO4 TFT_DC LCD_RS 19 SPI Master Out Slave In GPIO23 TFT_MOSI LCD/SI/TP_SI 20 Not connected NC 21 Touch Panel Slave Out GPIO19 TFT_MISO TP_SO 22 LCD Reset pin GPIO32 TFT_RST RST 23 SPI Clock GPIO18 TFT_SCLK LCD_SCK/TP_SCK 24 Chip select control pin GPIO15 TFT_CS LCD_CS 25 Module Ground GND GND 26 Touch Chip Select GPIO22 TOUCH_CS TP_CS By default, pin 4 is normally connected to 5V. This turns the display backlight LED on all time. In order to control the backlight you can drive pin 4 of the display using a PNP transistor. The electronics circuit needed is not part of this diagram. SPI MISO, MOSI and SCLK are shared between the touch controller and the LCD controller.","title":"Pin Configuration"},{"location":"displays/MHS4001/#lcd-configuration","text":"The lcd_config.ini file specifies the different properties of the display, except for the actual pin configuration: raspberrypi = -D RPI_DISPLAY_TYPE=1 -D ST7796_DRIVER=1 -D TFT_WIDTH=320 -D TFT_HEIGHT=480 -D TFT_ROTATION=0 ; 0=0, 1=90, 2=180 or 3=270 degree -D SPI_FREQUENCY=80000000 -D SPI_TOUCH_FREQUENCY=2500000 -D USER_SETUP_LOADED=1 -D TOUCH_DRIVER=2046 ; XPT2046 Resistive touch panel driver -D SUPPORT_TRANSACTIONS","title":"LCD Configuration"},{"location":"displays/MHS4001/#hasp-build_flags","text":"Specify the LCD Configuration to use and define the 7 GPIOs in the environment build flags: build_flags = ${flags.esp32_flags} ; -- TFT_eSPI build options ------------------------ ${lcd.raspberrypi} ${esp32.vspi} ; Use VSPI hardware SPI bus -D TFT_CS=15 -D TFT_DC=4 -D TFT_RST=32 -D TFT_BCKL=-1 ; None -D TOUCH_CS=22","title":"HASP build_flags"},{"location":"displays/MRB3511/","text":"MRB3511 14 GPIOs are required to drive the 8-bit parallel display. Another 3 GPIOs are needed for the I\u00b2C touch sensor. Including the Vcc, Gnd an Rst pins, a total of 23 connections need to be made to the MCU: Pin Configuration ~ Pin Function ESP32 Pin Config Name Display Pin 1 Chip select control pin GPIO33 TFT_CS CS 2 Data Command control pin GPIO15 TFT_DC RS 3 Write control pin GPIO04 TFT_WR WR 4 Read control pin GPIO02 TFT_RD RD 5 LCD Reset pin GPIO32 TFT_RST RST 6 GPIO12 TFT_D0 D0 7 GPIO13 TFT_D1 D1 8 GPIO26 TFT_D2 D2 9 8-bit parallel data GPIO25 TFT_D3 D3 10 GPIO17 TFT_D4 D4 11 GPIO16 TFT_D5 D5 12 GPIO27 TFT_D6 D6 13 GPIO14 TFT_D7 D7 14-21 Not used, don't connect NC D8-15 22 Module Ground GND GND 23 LED Backlight PWM GPIO5 TFT_BCKL BL 24-25 Module Power - VDD 26-27 Module Ground GND GND 28-29 Not connected NC 30 IO, I\u00b2C SDA GPIO21 TOUCH_SDA SDA 31 Touch Chip Interrupt GPIO34 TOUCH_IRQ INT 32 Not connected NC 33 Touch IC Reset 3.3V CRST 34 IO, I\u00b2C SCL GPIO22 TOUCH_SCL SCL You need to desolder the 0R resistor on the back side of the panel from the 16-bit position. Then solder back the 0R resistor in the 8-bit position. There are no pins shared between the touch controller and the LCD controller. LCD Configuration ~ The lcd_config.ini file specifies the different properties of the display, except for the actual pin configuration: mrb3511 = -D ESP32_PARALLEL=1 -D ILI9488_DRIVER=1 -D TFT_WIDTH=320 -D TFT_HEIGHT=480 -D TFT_ROTATION=0 ; 0=0, 1=90, 2=180 or 3=270 degree -D USER_SETUP_LOADED=1 -D TOUCH_DRIVER=911 ; GT911 Capacitive touch panel driver -D SUPPORT_TRANSACTIONS HASP build_flags ~ Specify the LCD Configuration to use and define the 17 GPIOs in the environment build flags: build_flags = ${flags.esp32_flags} ; -- TFT_eSPI build options ------------------------ ${lcd.mrb3511} -D TFT_BCKL=5 ;None, configurable via web UI (e.g. 2 for D4) -D TFT_CS=33 ; Chip select control pin -D TFT_DC=15 ; =RS; Data Command control pin - must use a pin in the range 0-31 -D TFT_RST=32 ; Reset pin -D TFT_WR=4 ; Write strobe control pin - must use a pin in the range 0-31 -D TFT_RD=2 -D TFT_D0=12 ; Must use pins in the range 0-31 for the data bus -D TFT_D1=13 ; so a single register write sets/clears all bits -D TFT_D2=26 -D TFT_D3=25 -D TFT_D4=17 -D TFT_D5=16 -D TFT_D6=27 -D TFT_D7=14 -D TOUCH_SDA=21 -D TOUCH_SCL=22 -D TOUCH_IRQ=34 ; use 34-39 as these are input only pins -D TOUCH_RST=-1 ; not used, connected to 3.3V","title":"MRB3511"},{"location":"displays/MRB3511/#pin-configuration","text":"Pin Function ESP32 Pin Config Name Display Pin 1 Chip select control pin GPIO33 TFT_CS CS 2 Data Command control pin GPIO15 TFT_DC RS 3 Write control pin GPIO04 TFT_WR WR 4 Read control pin GPIO02 TFT_RD RD 5 LCD Reset pin GPIO32 TFT_RST RST 6 GPIO12 TFT_D0 D0 7 GPIO13 TFT_D1 D1 8 GPIO26 TFT_D2 D2 9 8-bit parallel data GPIO25 TFT_D3 D3 10 GPIO17 TFT_D4 D4 11 GPIO16 TFT_D5 D5 12 GPIO27 TFT_D6 D6 13 GPIO14 TFT_D7 D7 14-21 Not used, don't connect NC D8-15 22 Module Ground GND GND 23 LED Backlight PWM GPIO5 TFT_BCKL BL 24-25 Module Power - VDD 26-27 Module Ground GND GND 28-29 Not connected NC 30 IO, I\u00b2C SDA GPIO21 TOUCH_SDA SDA 31 Touch Chip Interrupt GPIO34 TOUCH_IRQ INT 32 Not connected NC 33 Touch IC Reset 3.3V CRST 34 IO, I\u00b2C SCL GPIO22 TOUCH_SCL SCL You need to desolder the 0R resistor on the back side of the panel from the 16-bit position. Then solder back the 0R resistor in the 8-bit position. There are no pins shared between the touch controller and the LCD controller.","title":"Pin Configuration"},{"location":"displays/MRB3511/#lcd-configuration","text":"The lcd_config.ini file specifies the different properties of the display, except for the actual pin configuration: mrb3511 = -D ESP32_PARALLEL=1 -D ILI9488_DRIVER=1 -D TFT_WIDTH=320 -D TFT_HEIGHT=480 -D TFT_ROTATION=0 ; 0=0, 1=90, 2=180 or 3=270 degree -D USER_SETUP_LOADED=1 -D TOUCH_DRIVER=911 ; GT911 Capacitive touch panel driver -D SUPPORT_TRANSACTIONS","title":"LCD Configuration"},{"location":"displays/MRB3511/#hasp-build_flags","text":"Specify the LCD Configuration to use and define the 17 GPIOs in the environment build flags: build_flags = ${flags.esp32_flags} ; -- TFT_eSPI build options ------------------------ ${lcd.mrb3511} -D TFT_BCKL=5 ;None, configurable via web UI (e.g. 2 for D4) -D TFT_CS=33 ; Chip select control pin -D TFT_DC=15 ; =RS; Data Command control pin - must use a pin in the range 0-31 -D TFT_RST=32 ; Reset pin -D TFT_WR=4 ; Write strobe control pin - must use a pin in the range 0-31 -D TFT_RD=2 -D TFT_D0=12 ; Must use pins in the range 0-31 for the data bus -D TFT_D1=13 ; so a single register write sets/clears all bits -D TFT_D2=26 -D TFT_D3=25 -D TFT_D4=17 -D TFT_D5=16 -D TFT_D6=27 -D TFT_D7=14 -D TOUCH_SDA=21 -D TOUCH_SCL=22 -D TOUCH_IRQ=34 ; use 34-39 as these are input only pins -D TOUCH_RST=-1 ; not used, connected to 3.3V","title":"HASP build_flags"},{"location":"displays/MSPxxxx/","text":"ILI9341 TFT Panel Models: 2.4\" SKU: MSP2402 2.8\" SKU: MSP2807 3.2\" SKU: MSP3218 The \"red\" 240x320 TFT displays with an ILI9341 controller and XPT2046 touch controller are very common. Make sure to select the touch version when ordering these screens online. The U2 touch chip needs to be populated on the board. Pin Configuration ~ Pin Function ESP32 Pin Config Name Display Pin 1 5V/3.3V power input 5V/3.3V VCC 2 Module Ground GND GND 3 Chip Select GPIO26 TFT_CS CS 4 LCD Reset line GPIO15 TFT_RST RESET 5 Data Command control GPIO5 TFT_DC DC 6 Data Input GPIO23 TFT_MOSI SDI(MOSI) 7 SPI Clock GPIO18 TFT_SCLK SCK 8 Backlight GPIO21 TFT_BCKL LED 9 Data Output (not used) GPIO19 or N/C TFT_MISO SDO(MISO) 10 Touch SPI Clock GPIO18 TFT_SCLK T_CLK 11 Touch Select GPIO17 TOUCH_CS T_CS 12 Touch Data Input GPIO23 TFT_MOSI T_DIN 13 Touch Data Output GPIO19 TFT_MISO T_DO 14 Touch Interrupt N/C T_IRQ SPI MISO, MOSI and SCLK are shared between the touch controller and the LCD controller. In some cases the pin 9 MISO of the LCD can prevent proper display initialization. This pin is not used by hasp-lvgl, so it can be left disconnected in case of issues. LCD Configuration ~ The lcd_config.ini file specifies the different properties of the display, except for the actual pin configuration: lolin24 = -D ILI9341_DRIVER=1 -D TFT_WIDTH=240 -D TFT_HEIGHT=320 -D TFT_ROTATION=0 ; Use default, see TFT_ROTATION values -D SPI_FREQUENCY=40000000 -D SPI_TOUCH_FREQUENCY=2500000 -D SPI_READ_FREQUENCY=20000000 -D USER_SETUP_LOADED=1 -D TOUCH_DRIVER=2046 ; XPT2046 Resistive SPI touch panel driver -D SUPPORT_TRANSACTIONS HASP build_flags ~ Specify the LCD Configuration to use and define the GPIOs in the environment build flags: build_flags = ${env.build_flags} ${esp32.build_flags} ;region -- TFT_eSPI build options ------------------------ ${lcd.lolin24} ${esp32.vspi} ; Use VSPI hardware SPI bus -D TFT_DC=5 -D TFT_CS=26 -D TFT_RST=-1 ; RST -D TFT_BCKL=-1 ; None, configurable via web UI (e.g. 21) -D TOUCH_CS=17 ; (can also be 22 or 16) ;endregion","title":"MSPxxxx"},{"location":"displays/MSPxxxx/#pin-configuration","text":"Pin Function ESP32 Pin Config Name Display Pin 1 5V/3.3V power input 5V/3.3V VCC 2 Module Ground GND GND 3 Chip Select GPIO26 TFT_CS CS 4 LCD Reset line GPIO15 TFT_RST RESET 5 Data Command control GPIO5 TFT_DC DC 6 Data Input GPIO23 TFT_MOSI SDI(MOSI) 7 SPI Clock GPIO18 TFT_SCLK SCK 8 Backlight GPIO21 TFT_BCKL LED 9 Data Output (not used) GPIO19 or N/C TFT_MISO SDO(MISO) 10 Touch SPI Clock GPIO18 TFT_SCLK T_CLK 11 Touch Select GPIO17 TOUCH_CS T_CS 12 Touch Data Input GPIO23 TFT_MOSI T_DIN 13 Touch Data Output GPIO19 TFT_MISO T_DO 14 Touch Interrupt N/C T_IRQ SPI MISO, MOSI and SCLK are shared between the touch controller and the LCD controller. In some cases the pin 9 MISO of the LCD can prevent proper display initialization. This pin is not used by hasp-lvgl, so it can be left disconnected in case of issues.","title":"Pin Configuration"},{"location":"displays/MSPxxxx/#lcd-configuration","text":"The lcd_config.ini file specifies the different properties of the display, except for the actual pin configuration: lolin24 = -D ILI9341_DRIVER=1 -D TFT_WIDTH=240 -D TFT_HEIGHT=320 -D TFT_ROTATION=0 ; Use default, see TFT_ROTATION values -D SPI_FREQUENCY=40000000 -D SPI_TOUCH_FREQUENCY=2500000 -D SPI_READ_FREQUENCY=20000000 -D USER_SETUP_LOADED=1 -D TOUCH_DRIVER=2046 ; XPT2046 Resistive SPI touch panel driver -D SUPPORT_TRANSACTIONS","title":"LCD Configuration"},{"location":"displays/MSPxxxx/#hasp-build_flags","text":"Specify the LCD Configuration to use and define the GPIOs in the environment build flags: build_flags = ${env.build_flags} ${esp32.build_flags} ;region -- TFT_eSPI build options ------------------------ ${lcd.lolin24} ${esp32.vspi} ; Use VSPI hardware SPI bus -D TFT_DC=5 -D TFT_CS=26 -D TFT_RST=-1 ; RST -D TFT_BCKL=-1 ; None, configurable via web UI (e.g. 21) -D TOUCH_CS=17 ; (can also be 22 or 16) ;endregion","title":"HASP build_flags"},{"location":"displays/WT32-SC01/","text":"WT32-SC01 A 320x480 capacitive touch display with on board ESP32-WROVER-B module.","title":"WT32 SC01"},{"location":"displays/Waveshare_RPi_LCD_Rev_C/","text":"Waveshare RPi LCD (Rev C) This screen comes in 3.5\" and 4.0\" sizes. 6 GPIOs are required to drive the SPI display. One additional GPIO is needed for the XPT2046 touch sensor and one extra GPIO for backlight dimming. Including the VCC and GND pins, a total of 13 connections need to be made to the MCU: Pin Configuration ~ Pin Function ESP32 Pin Config Name Display Pin 1 Module Power 3.3V 3.3V 3.3V 2 Module Power 5v 5V 5V 3 Not connected NC 4 5V 5-10 Not connected NC 11 Touch Interrupt NC TP_IRQ 12 (*) LED Backlight PWM TFT_BCKL LCD_LED 13 Not connected NC 14 Module Ground GND GND 15-16 Not connected NC 17 Module Power 3.3V 3.3V 18 Data Command control pin GPIO4 TFT_DC LCD_RS 19 SPI Master Out Slave In GPIO23 TFT_MOSI LCD/SI/TP_SI 20 Not connected NC 21 Touch Panel Slave Out GPIO19 TFT_MISO TP_SO 22 LCD Reset pin GPIO32 TFT_RST RST 23 SPI Clock GPIO18 TFT_SCLK LCD_SCK/TP_SCK 24 Chip select control pin GPIO15 TFT_CS LCD_CS 25 Module Ground GND GND 26 Touch Chip Select GPIO22 TOUCH_CS TP_CS SPI MISO, MOSI and SCLK are shared between the touch controller and the LCD controller. Attention (*) Only the WaveShare 4.0\" RPi LCD Revision C has a solder jumper on the back to enable PWM backlight dimming. Other revisions of this board do not have this feature. LCD Configuration ~ The lcd_config.ini file specifies the different properties of the display, except for the actual pin configuration: raspberrypi = -D RPI_DISPLAY_TYPE=1 -D ST7796_DRIVER=1 -D TFT_WIDTH=320 -D TFT_HEIGHT=480 -D TFT_ROTATION=0 ; 0=0, 1=90, 2=180 or 3=270 degree -D SPI_FREQUENCY=80000000 -D SPI_TOUCH_FREQUENCY=2500000 -D USER_SETUP_LOADED=1 -D TOUCH_DRIVER=2046 ; XPT2046 Resistive touch panel driver -D SUPPORT_TRANSACTIONS HASP build_flags ~ Specify the LCD Configuration to use and define the 7 GPIOs in the environment build flags: build_flags = ${flags.esp32_flags} ; -- TFT_eSPI build options ------------------------ ${lcd.raspberrypi} ${esp32.vspi} ; Use VSPI hardware SPI bus -D TFT_CS=15 -D TFT_DC=4 -D TFT_RST=32 -D TFT_BCKL=-1 ; None, configurable via web UI (e.g. 21) -D TOUCH_CS=22","title":"Waveshare RPi LCD Rev C"},{"location":"displays/Waveshare_RPi_LCD_Rev_C/#pin-configuration","text":"Pin Function ESP32 Pin Config Name Display Pin 1 Module Power 3.3V 3.3V 3.3V 2 Module Power 5v 5V 5V 3 Not connected NC 4 5V 5-10 Not connected NC 11 Touch Interrupt NC TP_IRQ 12 (*) LED Backlight PWM TFT_BCKL LCD_LED 13 Not connected NC 14 Module Ground GND GND 15-16 Not connected NC 17 Module Power 3.3V 3.3V 18 Data Command control pin GPIO4 TFT_DC LCD_RS 19 SPI Master Out Slave In GPIO23 TFT_MOSI LCD/SI/TP_SI 20 Not connected NC 21 Touch Panel Slave Out GPIO19 TFT_MISO TP_SO 22 LCD Reset pin GPIO32 TFT_RST RST 23 SPI Clock GPIO18 TFT_SCLK LCD_SCK/TP_SCK 24 Chip select control pin GPIO15 TFT_CS LCD_CS 25 Module Ground GND GND 26 Touch Chip Select GPIO22 TOUCH_CS TP_CS SPI MISO, MOSI and SCLK are shared between the touch controller and the LCD controller. Attention (*) Only the WaveShare 4.0\" RPi LCD Revision C has a solder jumper on the back to enable PWM backlight dimming. Other revisions of this board do not have this feature.","title":"Pin Configuration"},{"location":"displays/Waveshare_RPi_LCD_Rev_C/#lcd-configuration","text":"The lcd_config.ini file specifies the different properties of the display, except for the actual pin configuration: raspberrypi = -D RPI_DISPLAY_TYPE=1 -D ST7796_DRIVER=1 -D TFT_WIDTH=320 -D TFT_HEIGHT=480 -D TFT_ROTATION=0 ; 0=0, 1=90, 2=180 or 3=270 degree -D SPI_FREQUENCY=80000000 -D SPI_TOUCH_FREQUENCY=2500000 -D USER_SETUP_LOADED=1 -D TOUCH_DRIVER=2046 ; XPT2046 Resistive touch panel driver -D SUPPORT_TRANSACTIONS","title":"LCD Configuration"},{"location":"displays/Waveshare_RPi_LCD_Rev_C/#hasp-build_flags","text":"Specify the LCD Configuration to use and define the 7 GPIOs in the environment build flags: build_flags = ${flags.esp32_flags} ; -- TFT_eSPI build options ------------------------ ${lcd.raspberrypi} ${esp32.vspi} ; Use VSPI hardware SPI bus -D TFT_CS=15 -D TFT_DC=4 -D TFT_RST=32 -D TFT_BCKL=-1 ; None, configurable via web UI (e.g. 21) -D TOUCH_CS=22","title":"HASP build_flags"}]}